	LIST	; FORCE USER TO SEE WHO WE ARE.
	COMMENT .













			* * *   S I T B O L   * * *

				VERSION   3





	COPYRIGHT STEVENS INSTITUTE OF TECHNOLOGY   1972, 1973

	ALL RIGHT RESERVED.



















;-----------------------;

	IF2 ,<PRINTX SITBOL VERSION 3 - MODULE EDIT NUMBER = 1>

;-----------------------;


	TITLE	TBL   TABLES
;
;     CONTENTS
;
;	1. HASHNO
;	2. TABLE (PRIMARY FUNCTION)
;		2.1 TBL (TERTIARY EQUIVALENT)
;	3. TITEM (TABLE ITEM)
;		3.1 ALTE (ALLOCATE A TABLE ELEMEENT)
;	4. TVTBL - TRAPPED VARIABLE FOR TABLES
;		4.1 TBVAL
;		4.2 TBNAM
;		4.3 TBASGN
;	5. MISC.
;		5.1 ITE - INSERT A TABLE ELEMENT
;		5.2 FTE - FIND A TABLE ELEMENT
;		5.3 TSEQ - SEQUENCE THRU A TABLE
;	6. CONVERSION
;		6.1 CVTARY - CONVERT TO ARRAY
;		6.2 CVTTBL - CONVERT TO TABLE
;
   TWOSEG
   RELOC   400000
   RELOC   0
   RELOC   ; NORMAL MODE IS PURE

	EXDATA
	EXTERN	ASGNVL,GCOL,IDENT,IDINIT
	SALL		; CLEAN MACRO EXPANSION

	SUBTTL	HASHNO

;	HASHNO WILL RETURN A POSITIVE INTEGER IN Z
;	FOR ANY GIVEN DESCRIPTOR
;	CALLING SEQUENCE:
;		PUSH DESCRIPTOR ONTO STACK
;		JSP QLINK,HASHNO
;		RETURN (DESCRIPTOR POPPED)

HASHNO::HLRZ	Q2,-1(STACK)	; GET DATATYPE
	ANDI	Q2,DTNUM	; CLEAR OUT FLAGS
	CAIG	Q2,MAXDTN	; STANDARD TYPE?
	JRST	@JMPTBL(Q2)	;YES - LEAP INTO TABLE
	 ;
JMPTBL:	H.TWO		; EXTERNAL
	H.NUM		; INTEGER
	H.NUM		; REAL
	H.STR		; STRING
	H.PATT		; PATTERN
	H.ARY		; ARRAY
	H.TWO		; EXPRESSION
	H.TWO		; CODE
	H.DFD		; TABLE
	H.NAME		; NAME
	H.DFD		; DEFINED DATATYPE
	 ;
	IFN <<.-JMPTBL>-MAXDTN-1>,< PRINTX JMPTBL IN ERROR>
	IFN <DHASH-THASH>,< PRINTX NEED FIX FOR HASHNO OF TBL'S>


	 ; OR TWO DESCRIPTOR WORDS
	 ;
H.TWO:	HLRZ	Z,-1(STACK)	; USE DATATYPE
	JRST	H.FIN		; GO FINISH UP

	 ; NUMBERS
	 ;
H.NUM:	HLRZ	Z,-1(STACK)	; ADD DATATYPE ...
	ADD	Z,0(STACK)	; TO NUMBER
	JRST	H.FIN		; AND FINSIH UP

	 ; PATTERNS
	 ;
H.PATT:	MOVE	Q2,-1(STACK)	; LOAD ADDRESS OF PBLOK
	HRRZ	Z,LPHDR+PPROG(Q2)	; FIRST PRIMITIVE
	JRST	H.FIN		; FINISH UP

	 ; ARRAYS
	 ;
H.ARY:	MOVE	Q2,-1(STACK)	; PICK UP ADDRESS OF ABLOK
	HLRZ	Z,AHASH(Q2)	; GET HASH FIELD
	JRST	H.FIN		; FINSIH UP

	 ; NAMES
	 ;
H.NAME: MOVE	Z,0(STACK)	; PICK UP OFFSET
	SKIPE	Z		; SKIP IF A VARIABLE
	JRST	H.FIN		; OTHERWISE RETURN OFFSET
	 ;
	HRRZ	Z,-1(STACK)	; USE VARIABLE'S ADDRESS
	JRST	H.FIN		; AND RETURN

	 ; DEFINED DATATYPES
	 ;
H.DFD:	MOVE	Q2,-1(STACK)	; PICK UP ADDRESS OF DBLOK
	HLRZ	Z,DHASH(Q2)	; USE HASH FIELD
	JRST	H.FIN		; FINISH



	 ; STRINGS
	 ;
H.STR:	HRRZ	Q3,0(STACK)	; LENGTH OF STRING TO Q3
	JUMPE	Q3,H.TWO	; JUMP IF NULL
	MOVEM	Q3,IGNOQ	; SAVE LENGTH
	HLRZ	Q2,0(STACK)	; OFFSET TO Q2
	SUBI	Q3,5		; LENGTH-5 TO Q3
	JUMPLE	Q3,H.STR1	; JUMP IF STRING 5 CHARS. OR LESS
	 ;
	MOVEI	Z,5		; THE EFFECTIVE LENGTH ...
	MOVEM	Z,IGNOQ		; BECOMES 5
	LSH	Q3,-1		; DIVIDE LEN-5 BY 2
	ADD	Q2,Q3		; INCREASE TOTAL OFFSET
	 ;
	 ; HERE WITH Q2 HOLDING TOTAL BYTE OFFSET
	 ;
H.STR1:	IDIVI	Q2,5		; DIVIDE AND EXCHANGE TO OBTAIN ...
	EXCH	Q2,Q3		; WORD OFFSET - Q3, BYTE OFFSET - Q2
	ADD	Q3,-1(STACK)	; ADD IN ADDRESS OF SBLOK
	MOVE	Z,SCHARS+1(Q3)	; 2ND CHAR-WORD TO Z
	MOVE	Q3,SCHARS(Q3)	; 1ST CHAR-WORD TO Q3
	 ;
	 ; SHIFT THE CHARACTERS AROUND SO THAT THEY
	 ; WIND UP RIGHT-JUSTIFIED IN Z
	 ;
	LSH	Q3,-1		; CLOSE GAP
	LSHC	Q3,@SH.TB1(Q2)	; SHIFT RIGHT TO ALLIGN LEFT CHAR
	MOVE	Q2,IGNOQ	; RELOAD LENGTH
	LSH	Z,@SH.TB2(Q2)	; SHIFT RIGHT TO ALLIGN RIGHT CHAR
	 ;
	 ;
	 ; FINISH UP BY FALLING THROUGH TO COMMON CODE
	 ;
H.FIN:	TLZ	Z,400000	; ZERO OUT HIGH ORDER BIT
	SUB	STACK,[2,,2]	; POP STACK
	JRST	0(QLINK)	; AND RETURN



	 ; FIRST SHIFTING TABLE
	 ;
SH.TB1:	XWD	0,-5*7
	XWD	0,-4*7
	XWD	0,-3*7
	XWD	0,-2*7
	XWD	0,-1*7
	XWD	0,-0


	 ; SECOND SHIFTING TABLE
	 ;
SH.TB2:	XWD	0,0*7-^D36
	XWD	0,1*7-^D36
	XWD	0,2*7-^D36
	XWD	0,3*7-^D36
	XWD	0,4*7-^D36
	XWD	0,5*7-^D36

	SUBTTL	2. TABLE & TBL

	FUNC	TABLE$,2,ES	; PRIMARY FUNCTION

TABLE:	SUB	STACK,[2,,2]	; REMOVE 2ND ARG
	JSP	TLINK,CVTINT##	; MAKE AN INTEGER
	ERROR.	1,98		; BAD ARG
	SUB	STACK,[2,,2]	; REMOVE ARG
	SKIPGE	2(STACK)	; WE DON'T LIKE NEGATIVES
	ERROR	13,49
	 ;
	SKIPN	P2,2(STACK)	; LOAD RETURNED VALUE IF NOT 0
	MOVEI	P2,^D37		; DEFAULT TABLE SIZE IF 0
	 ;
	MOVE	Z,P2		; LOAD VALUE
	JSP	TLINK,TBL	; ALLOCATE THE TABLE
	JRST	1(PLINK)	; AND RETURN

	 ; 4.1 TBL - THE TERTIARY EQUIVALENT OF TABLE
	 ;
TBL::	MOVEM	Z,T2		; SAVE NUMBER OF BUCKEWTS
	ADD	Z,[TBLOK,,TBUCK] ; CREATE DESCRIPTOR
	JSP	QLINK,BLOK##	; ALLOCATE THE TABLE
	ERROR	6,0		; CAN'T ALLOCATE
	 ;
	MOVE	T3,-1(STACK)	; LOAD POINTET TO TBLOK
	AOS	T4,TBLID##	; GET NEXT ID
	HRL	T2,T4		; INSERT INTO LEFT HALF
	MOVEM	T2,THASH&TNBUCK(T3) ; INSERT THE FIELDS
	JRST	0(TLINK)	; AND RETURN

	SUBTTL	3. TITEM & ALTE

	 ; HERE WHEN HE REFERENCES A TABLE
	 ;
TITEM::	CAIE	Z,2		; 2 DESCRIPTORS?
	ERROR	3,2		; TOO MANY
	 ;
	HLRZ	T2,-3(STACK)	; GET TYPE OF FIRSTR ARF
	CAIE	T2,TDT		; TABLE?
	ERROR	3,1		; NO
	 ;
	JSP	TLINK,ALTE	; JUST ALLOCATE A TEBLOK
	JRST	1(PLINK)	; AND RETURN

	 ; HERE TO ALLOCATE A TABLE ELEMENT
	 ; CALLING SEQUENCE
	 ; 	PUSH TABLE ONTO STACK
	 ;	PUSH REFERENCE ELEMENT ONTO STACK
	 ;	JSP	TLINK,ALTE
	 ;	RETURN
	 ;
	 ; ALTE WILL REPLACE THE 2 DESCRIPTORS BY A
	 ; TRAPPED VARIABLE WHICH POINTS TO A TEBLOK
	 ; WHICH CONTAINS THE REFERENCE ELEMENT IN
	 ; THE TEREF FIELD AND THE TABLE IN THE TEVAL FIELD
	 ;
ALTE:	MOVE	Z,[TEBLOK,,LTEBLK] ; SET ...
	MOVEM	Z,BTCODE&BLENG(SURF) ; UP ...
	CLEARM	GCFLD(SURF)	; INITIAL ...
	CLEARM	TELINK(SURF)	; VALUES
	 ;
	POP	STACK,TEREF+1(SURF) 	; INSERT
	POP	STACK,TEREF(SURF) 	; REFERENCE ELEMENT
	POP	STACK,TEVAL+1(SURF) 	; TEMPORARILY ...
	POP	STACK,TEVAL(SURF)		; SAVE TABLE
 	 ;
	MOVE	T2,SURF		; PREPARE ...
	HRLI	T2,TVAR		; RETURN ...
	PUSH	STACK,T2	; DESCRIP-
	PUSH	STACK,[TVTBL]	; TOR
	 ;
	ADDI	SURF,LTEBLK	; BUMP SURF
	CAMLE	SURF,CEIL	; NEED A GC?
	JSP	QLINK,GCOL	; YES
	 ;
	JRST	0(TLINK)	; RETURN

	SUBTTL	4. TVTBL - TRAPPED VARIABLE FOR TABLES

TVTBL:	JRST	TBVAL
	JRST	TBNAM
	JRST	TBASGN

	 ; TRAPPED VARIABLE VALUE
	 ;
TBVAL:	SUB	STACK,[2,,2]	; POP TRAPPED VARIABLE
	 ;
	HRRZ	T1,1(STACK)	; POINT TO TEBLOK
	HRRZ	T2,TEVAL(T1)	; POINT TO TABLE
	JSP	S3,FTE		; FIND ELEMENT
	MOVE	T1,[NULLST-TEVAL] ; NO FIND - POINT TO NULL
	 ;
	PUSH	STACK,TEVAL(T1)	; PUSH VALUE
	PUSH	STACK,TEVAL+1(T1) ; ONTO STACK
	JRST	1(SLINK)	; AND RETURN

	 ; HERE WHEN JUST THE NAME IS WANTED
	 ; LIKE IN  .T<'ABC'>
	 ;
TBNAM:	JSP	S2,ITE		; INSERT ELEMENT IN TABLE
	JRST	1(SLINK)	; ALREADY THERE
	 ;
	 ; WAS NOT THERE BEFORE, INSERT VALUE
	 ;
	MOVSI	S2,SDT		; FIRST WORD OF NULL
	MOVE	S3,-1(STACK)	; LOAD ADDR OF TVAR
	MOVEM	S2,TEVAL(S3)	; INSERT FIRST WORD
	CLEARM	TEVAL+1(S3)	; INSERT 2ND WORD
	 ;
	JRST	1(SLINK)	; AND RETURN

	 ; HERE TO ASSIGN INTO A TABLE
	 ;
TBASGN:	POP	STACK,FLAS+1	; SAVE VALUE
	POP	STACK,FLAS	; OF ARGUMENT
	 ;
	JSP	S2,ITE		; INSERT TABLE ELEMENT
	JRST	TBASG1		; WAS THERE BEFORE
	 ;
	HRRZ	T1,-1(STACK)	; TRANSFER
	MOVE	T2,FLAS		; SAVED ...
	MOVE	T3,FLAS+1	; VALUE ...
	MOVEM	T2,TEVAL(T1)	; INTO ...
	MOVEM	T3,TEVAL+1(T1)	; TEBLOK
	 ;
	JRST	1(SLINK)	; AND RETURN

	 ; HERE IF TEVAL COULD CONTAIN TVAR
	 ;
TBASG1:	PUSH	STACK,FLAS	; PUSH VALUE
	PUSH	STACK,FLAS+1	; BACK ON STACK
	JSP	TLINK,ASGNVL	; ASSIGN TO TABLE ELEMENT
	ERROR	15		; CAN'T FAIL
	 ;
	JRST	1(SLINK)	; RETURN

	SUBTTL	5. ITE, FTE, TSEQ

	 ; ITE - INSERT TABLE ELEMENT
	 ; CALLING SEQUENCE:
	 ; 	PUSH TABLE TVAR DESCRIPTOR ONTO STACK
	 ; 	JSP	S2,ITE
	 ; 	RETURN 1  ; HERE IF ELEMEENT WAS FOUND IN TABLE
	 ; 	RETURN 2  ; HERE IF ELEMENT HAD TO BE INSERTED
	 ; 	
	 ; FOR BOTH RETURNS, A VAR DESCRIPTOR REPLACES THE
	 ; TVAR DESCRIPTOR. THE VAR DESCRIPTOR
	 ; IDENTIFIES THE TEVAL FIELD.
	 ;
ITE:	HRRZ	T1,-1(STACK)	; POINT TO TEBLOK
	HRRZ	T2,TEVAL(T1)	; POINT TO TBLOK
	JSP	S3,FTE		; FIND ENTRY
	JRST	ITE1		; NOT THERE
	 ;
ITE2:	SUB	STACK,[2,,2]	; POP TVAR
	HRLI	T1,VAR		; INSERT TYPE
	PUSH	STACK,T1	; PUSH
	PUSH	STACK,[TEVAL]	; DESCRIPTOR
	JRST	0(S2)		; AND RETURN
	
	 ; INSERT TEBLOK IN CHAIN
	 ;
ITE1:	HRRZ	T2,-1(STACK)	; POINT TO TEBLOK
	HRRZ	T3,0(T1)	; LOAD CURRENT BUCKET
	HRRM	T3,TELINK(T2)	; LINK TO NEXT TEBLOK
	HRRM	T2,0(T1)	; LINK TO TEBLOK
	 ;
	MOVEI	T3,VAR		; INSERT
	HRLM	T3,-1(STACK)	; VAR AS TYPE
	 ;
	MOVEI	T3,TEVAL	; INSERT OFFSET TO
	MOVEM	T3,0(STACK)	; TEVAL FIELD
	 ;
	JRST	1(S2)		; AND RETURN


	


	 ; FTE - FIND A TABLE ELEMENT (STABLE ROUTINE)
	 ;	CALLING SEQUENCE:
	 ;	LOAD T1 WITH ADDRESS OF AN UNLINKED TEBLOK
	 ;	LOAD T2 WITH ADDRESS OF A TABLE
	 ;	JSP  S3,FTE
	 ;	NOT FOUND - T1 CONTAINS ADDRESS OF BUCKET
	 ;	FOUND - T1 CONTAINS ADDRESS OF TEBLOK
	 ;
FTE:	PUSH	STACK,TEREF(T1)	; FIND ...
	PUSH	STACK,TEREF+1(T1) ; HASH NUMBER
	JSP	QLINK,HASHNO	; OF REF ELEMENT
	 ;
	MOVEM	Z,Q2		; FIND BUCKET ...
	HRRZ	Q1,TNBUCK(T2)	; NUMBER ...
	IDIV	Q2,Q1		; (INTO Q3)
	 ;
	ADDI	T2,TBUCK(Q3)	; ADDRESS OF BUCKET
	MOVEM	S3,FTESV	; SAVE LINK
	HRRZ	S3,0(T2)	; PASS ADDRESS OF BUCKET
	HRRZM	T2,FTESV+1	; SAVE BUCKET ADDRESS
	JUMPE	S3,FTE.NO	; NOT THERE
	 ;
	RELOC
FTESV:	BLOCK	2
	RELOC
	 ;
	PUSH	STACK,TEREF(T1)	; INITIALZIZE ...
	PUSH	STACK,TEREF+1(T1); IDENT WITH...
	JSP	TLINK,IDINIT	; THE REFERENCE ELEMENT
	 ;
FTE.LP:	PUSH	STACK,TEREF(S3)	; COMPARE ...
	PUSH	STACK,TEREF+1(S3) ; REFERENCE ...
	JSP	TLINK,IDENT	; ELEMENT
	SKIPA			; NOT EQUAL
	JRST	FTE.YS		; EQUAL
	 ;
	HRRZ	S3,TELINK(S3)	; GET NEXT TEBLOK
	JUMPN	S3,FTE.LP	; AND LOOP WHILE NONZERO
	 ;
	 ; COULDN'T FIND
	 ;
FTE.NO:	MOVE	T1,FTESV+1	; LOAD BUCKET ADDRESS
	JRST	@FTESV		; AND RETURN

	 ; COULD FIND
	 ;
FTE.YS:	MOVE	T1,S3		; RETURN ...
	MOVE	S3,FTESV	; TEBLOK ...
	JRST	1(S3)		; ADDRESS

	 ; TSEQ - A ROUTINE TO SEQUENCE THROUGH THE
	 ; NON-NULL ELEMENTS OF A TABLE
	 ;
	 ; CALLING SEQUENCE:
	 ;	PUSH	TDT DESCRIPTOR
	 ;	JSP	TLINK,TSEQ
	 ; 	INSTRUCTION (XCT'ED)
	 ; 	RETURN
	 ;
	 ; IF INSTRUCTION IS JSP THE CALLED ROUTINE MAY BE
	 ; TYPE Q
	 ;
TSEQ::	SKIPA	T4,[TEVAL]	; LOAD OFFSET TO VALUE
	 ;
	 ; VTSEQ - A ROUTINE TO SEQUENCE THRU THE
	 ; VARIABLE TABLE.
	 ;
VTSEQ::	MOVEI	T4,VALUE	; OFFSET TO VALUE OF ITEM
	MOVEM	T4,IGNOT	; SAVE IT HERE
	 ;
	HRRZ	T2,-1(STACK)	; POINT TO TABLE
	HRRZ	T3,TNBUCK(T2)	; NEGATIVE OF ...
	MOVN	T3,T3		; NUMBER OF ...
	HRL	T2,T3		; BUCKETS TO LEFT HALF
	 ;
	 ; MAIN LOOP THRU TABLE
	 ;
	MOVE	T3,NULLST	; LOAD FOR COMPARISON
TSEQ1:	HRRZ	T4,TBUCK(T2)	; LOAD NEXT LIST
	JUMPE	T4,TSEQ3	; 0? CONTINUE TO NEXT ITEM
	 ;
TSEQ2:	MOVEI	Q2,0(T4)	; POINT TO BLOCK
	ADD	Q2,IGNOT	; POINT TO VALUE
	JSP	QLINK,LOCVAL##	; NOW POINT TO THE REAL VALUE
	CAME	T3,0(Q2)	; SKIP IF ITS NULL
	XCT	0(TLINK)	; PROCESS THE ITEM IF NOT NULL
	HRRZ	T4,TELINK(T4)	; GET NEXT TEBLOK
	JUMPN	T4,TSEQ2	; CONTINUE IF NON-ZERO
	 ;
TSEQ3:	AOBJN	T2,TSEQ1	; KEEP LOOPING
	 ;
	JRST	1(TLINK)	; DONE, RETURN

	SUBTTL	CVTARY

	 ; TYPE S UTILITY TO CONVERT FROM TABLES
	 ; TO ARRAYS
	 ;
CVTARY::HLRZ	S2,-1(STACK)	; LOAD DT
	CAIN	S2,ADT		; ALREADY ARRAY
	JRST	1(SLINK)	; YES, QUICK RETURN
	 ;
	CAIE	S2,TDT		; TABLE?
	ERROR	13,65		; STRANGE OBJECT
	 ;
	 ; HERE IF A TABLE WAS PASSED IN
	 ;
	 ; COUNT THE NUMBER OF ITEMS IN THE TABLE
	 ;
	CLEAR	S3,		; COUNTING REGISTER
	JSP	TLINK,TSEQ	; SEQUENCE THRU TABLE
	 ;
	AOJ	S3,		; XCT'ED INSTRUCTION
	 ;
	JUMPE	S3,0(SLINK)	; IF NO ELEMENTS, FAIL
	 ;
	 ; ALLOCATE STORAGE
	 ;
	MOVEM	SLINK,TBLSV	; SAVE RETURN POINT
	MOVEM	S3,TBLSV+1	; AND NUMBER OF ITEMS
	 ;
	RELOC
TBLSV:	BLOCK	2	; SAVE AREA (IMPURE)
	RELOC
	 ;
	JSP	SLINK,LINE.##	; FORM PROTOTYPE
	XWD	0,3		; 3 ELEMENTS
	XWD	IDT,TBLSV+1	; N
	XWD	SDT,[",",,1]	; ,
	XWD	IDT,[2]		; 2
	 ;
	JSP	SLINK,ARY##	; ALLOCATE THE ARRAY
	 ;
	MOVE	S3,-1(STACK)	; LOAD ARRAY POINTER
	POP	STACK,FLAS+1	; SAVE
	POP	STACK,FLAS	; ARRAY
	 ;
	 ; COPY THE TABLE ELEMENTS
	 ;
	JSP	TLINK,TSEQ	; FOR EACH TABLE ITEM
	 ;
	JSP	QLINK,[MOVE  Q3,TEREF(T4)  ; TRANSFER
		MOVEM	Q3,SUBFAC+4(S3)	; THE
		MOVE	Q3,TEREF+1(T4)	; REFERENCE
		MOVEM	Q3,SUBFAC+5(S3)	; ITEM
		 ;
		MOVE	Q3,0(Q2)	; TRANSFER
		MOVEM	Q3,SUBFAC+6(S3)	; THE
		MOVE	Q3,1(Q2)	; VALUE
		MOVEM	Q3,SUBFAC+7(S3)	; ITEM
		 ;
		ADDI	S3,4		; BUMP ARRAY ADDR
		JRST	0(QLINK) ]	; AND RETURN

	SUB	STACK,[2,,2]	; REMOVE TABLE
	PUSH	STACK,FLAS	; REPLACE BY ..
	PUSH	STACK,FLAS+1	; ARRAY
	 ;
	MOVE	SLINK,TBLSV	; RELOAD LINK
	JRST	1(SLINK)	; AND RETURN

	SUBTTL	CVTTBL

CVTTBL::HLRZ	S2,-1(STACK)	; DATATYPE
	CAIN	S2,TDT		; ALREADY A TABLE
	JRST	1(SLINK)	; YES
	 ;
	CAIE	S2,ADT		; ARRAY ?
	ERROR	13,66		; NO - BAD ARG
	 ;
	 ; CHECK FOR PROPER PROTOTYPE
	 ;
	MOVE	S2,-1(STACK)	; ADDRESS OF ARRAY
	HRRZ	S3,NSUBS(S2)	; NUMBER OF SUBSCRIPTS
	CAIE	S3,2		; CHECK FOR 2
	ERROR	13,29		; BAD ARRAY
	 ;
	MOVE	T1,SUBLBD&SUBDIM+2(S2) ; 2ND DIMENSION
	HLRZ	T2,SUBLBD(S2)	; FIRST DIMENSION LOWER BND
	CAIN	T2,1		; = 1?
	CAME	T1,[1,,2]	; YES - IS 2ND DIMENSION GOOD?
	ERROR	13,29		; NO TO EITHER
	 ;
	 ; PREPARE TO CYCLE THRU THE ARRAY
	 ;
	POP	STACK,FLAS+1	; SAVE ARRAY IN ...
	POP	STACK,FLAS	; TENDED AREA
	 ;
	HRRZ	Z,SUBDIM(S2)	; GET NUMBER OF ITEMS
	MOVEM	Z,IGNOS		; AND SAVE
	 ;
	JSP	TLINK,TBL	; ALLOCATE
	 ;
	POP	STACK,FLAS+3	; AND SAVE THE
	POP	STACK,FLAS+2	; TABLE IN TENDED STORAGE
	 ;
	ADDI	SLINK,1		; SAVE ...
	MOVEM	SLINK,IGNOS+1	; RETURN ADDRESS
	 ;
	MOVEI	S1,SUBLBD+3	; OFFSET TO FIRST ARRAY ELEMENT
	 ;
	 ; MAIN PROCESSING LOOP
	 ;
CVTTB1:	MOVE	T1,FLAS		; LOAD ADDRESS OF ...
	ADD	T1,S1		; REFERENCE ELEMENT
	 ;
	PUSH	STACK,2(T1)	; PUSH VALUE
	PUSH	STACK,3(T1)	; ITEM (TO BE USED LATER)
	 ;
	PUSH	STACK,FLAS+2	; PUSH ...
	PUSH	STACK,FLAS+3	; TABLE (FIRST ARG TO ALTE)
	 ;
	PUSH	STACK,0(T1)	; PUSH REFERENCE
	PUSH	STACK,1(T1)	; ITEM (2ND ARG TO ALTE)
	 ;
	JSP	TLINK,ALTE	; ALLOCATE A TEBLOK
	 ;
	JSP	S2,ITE		; INSERT IT INTO THE TABLE
	JFCL			; NOOP
	 ;
	POP	STACK,T4	; REMOVE RETURN
	POP	STACK,T3	; VALUE (ITS A VARIABLE)
	ADD	T3,T4		; ADD OFFSET TO ADDR
	POP	STACK,1(T3)	; STORE VALUE
	POP	STACK,0(T3)	; INTO TEBLOK
	 ;
	ADDI	S1,4		; BUMP S1 BY 2 DESCRIPTORS
	SOSLE	IGNOS		; LOOP ON #
	JRST	CVTTB1		; OF ITEMS
	 ;
	PUSH	STACK,FLAS+2	; RELOAD
	PUSH	STACK,FLAS+3	; TABLE
	JRST	@IGNOS+1	; AND RETURN

	END







