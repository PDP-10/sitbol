	LIST	; FORCE USER TO SEE WHO WE ARE.
	COMMENT .













			* * *   S I T B O L   * * *

				VERSION   3





	COPYRIGHT STEVENS INSTITUTE OF TECHNOLOGY   1972, 1973

	ALL RIGHT RESERVED.



















;-----------------------;

	IF2 ,<PRINTX SITBOL VERSION 3 - MODULE EDIT NUMBER = 0>

;-----------------------;


	TITLE	ERR	 ERROR HANDLER
;
;	 CONTENTS
;
;	 EXECUTION ERROR TABLE
;	 EXECUTION ERRORS - PROLOGUE
;	 SETEXIT FUNCTION
;	 EXECUTION ERRORS - EPILOGUE
;	 COMPILER ERROR REPORTING - CERROR
;
	EXDATA
	TWOSEG
	RELOC	400000
	RELOC	0
	RELOC


	 SUBTTL	EXECUTION-TIME ERROR PROCESSING - PROLOGUE

	 ; GET MAJOR AND MINOR ERROR NUMBERS AND PARAMETER
	 ;
ERRA::	LDB	P1,[POINT 4,.JBUUO##,12]
				; MAJOR ERROR TO P1
	HRRZ	P2,.JBUUO	; MINOR ERROR TO P2
	 ;
	MOVE	S1,.JBUUO	; LOAD FLAGS
	TLNN	S1,ERRSFL!ERRPFL ; PARAMETERIZED ERROR?
	JRST	ERRB1		; NO
	 ;
	TLNE	S1,ERRSFL	; PARAM ON STACK?
	JRST	ERRB		; YES - BRANCH AROUND
	PUSH	STACK,0(Q3)	; NO - PUSH DESCR
	PUSH	STACK,1(Q3)	; POINTED TO BY Q3
	 ;
ERRB:	POP	STACK,ERRPRM+1	; POP STACK INTO
	POP	STACK,ERRPRM##	; &ERRPARM
	 ;
ERRB1:	 ; PRODUCE COMPOUND ERROR NUMBER
	 ;
	IMULI	P1,^D1000	; COMPOUND ERROR NUMBER = ...
	ADD	P1,P2		; MAJOR * 1000 + MINOR
	MOVEM	P1,$ERRTP	; STORE INTO TYPE
	 ;
	CAIN	P1,^D6002	; STACK OVERFLOW?
	JRST	ERRC		; YES, TOO BAD
	 ;
	 ; ENTRY POINT FROM &ERRTYPE ASSIGNMENT
	 ;
ERRTPA::SKIPE	$ERRTP+1	; CHECK FOR &ERRTYPE BEING TRACED
	JSP	SLINK,ETPTRC##	; YES - GO TRACE IT
	 ;
	SOSGE	$ERRLM		; DECREMENT AND TEST &ERRLIMIT
	JRST	ERRC		; JUMP IF IT WAS 0
	 ;
	SKIPN	S1,SET.LB	; LOAD AND TEST SETEXIT LABEL
	JRST	IFAIL##		; NOT GIVEN - JUST FAIL
	 ;
	 ; TOSS OUT PREVIOUS ERROR INFO (AT THIS LEVEL)
	 ;
	SKIPL	PUSHTP		; ERROR UNIVERSE?
	JRST	ERRSAV		; NO
	 ;
	MOVE	STACK,GROUND	; CROUCH LOW TO GROUND
	POPSA	I		; ZAP OUT OLD ERROR UNIVERSE
	 ;
ERRSAV:	 ;
	CLEARM	SET.LB		; RESET THE LABEL
	PUSHSA	I		; SAVE THE INTERPRETER STATE
	MOVEM	STACK,GROUND	; ESTABLISH NEW GROUND LEVEL
	SETOM	PUSHTP		; SET TYPE OF PUSH
	 ;
	HRLI	S1,VAR		; MAKE A VARIABLE ...
	PUSH	STACK,S1	; OUT OF THE VARIABLE BLOCK ...
	PUSH	STACK,[0]	; ADDRESS
	 ;
	JRST	GOTO##		; GO TO GOTO HANDLER IN INTERPRETER

	SUBTTL	SETEXIT AND RECOVERY LABELS
	 ;
	 ; SETEXIT(NAME) SETS THE LOCATION SET.LB WITH THE
	 ; ADDRESS OF THE VARIABLE BLOCK INDICATED BY NAME
	 ; (OR 0 IF ARG IS NULL STRING). THE RETURNED VALUE
	 ; IS RECONSTRUCTED FROM SET.LB
	 ;
	RELOC
SET.LB:	BLOCK 1
	 RELOC
	 ;
	FUNC	STXT$,1,E
	 ;
	 ; IF ARG IS NULL, JUMP DIRECTLY TO STXT1
	 ;
STXT:	MOVE	S2,NULLST	; LOAD NULL STRING TOP
	CLEAR	S1,		; S1 WILL HOLD RESULT
	CAMN	S2,-1(STACK)	; GO ON IF ARG NOT NULL
	JRST	STXT1		; JUMP IF NULL
	 ;
	 ; COMPUTE VB ADDRESS
	 ;
	JSP	TLINK,CVTNAM##	; EASIEST WAY IS TO ...
	ERROR.	1,94		; CONVERT TO NAME
	SKIPE	0(STACK)	; IS THE VARIABLE NATURAL?
	ERROR.	1,94		; NO - BAD ARG
	 ;
	HRRZ	S1,-1(STACK)	; LOAD VB ADDRESS
	 ;
	 ; MERGE HERE FROM NULL STRING CASE
	 ;
STXT1:	EXCH	S1,SET.LB	; EXCHANGE OLD AND NEW
	 ;
	MOVEM	S2,-1(STACK)	; TENTATIVELY RETURN NULL STRING
	JUMPE	S1,1(PLINK)	; OK IF S1 IS 0
	 ;
	HRLI	S1,NDT		; OTHERWISE ...
	MOVEM	S1,-1(STACK)	; RETURN A ...
	JRST	1(PLINK)	; NAME


	 ; RECOVERY LABELS
	 ;
ABORT::	JSP	SLINK,UNROLL	; RECOVER PROPER LEVEL
	MOVE	P2,ILABEL	; GET OLD
	ADD	P2,ILABEL+1	; STATEMENT
	HLRZ	S1,CSTNO(P2)	; NUMBER
	MOVEM	S1,$STNO	; AND STORE INTO &STNO
	JRST	ERRC		; AND GO PRINT MESSAGE


CONTIN::JSP	SLINK,UNROLL	; RECOVER PROPER LEVEL
	JRST	IFAIL		; AND FAIL

REPEAT::JSP	SLINK,UNROLL	; SEEK PROPER LEVEL
	 ;
	MOVE	Z,[ILABEL,,ILOC]; TRANSFER OLD
	BLT	Z,ILOC+1	; LABEL
	 ;
	JRST	IBEGIN##	; AND LEAP TO IT


	 ; COMMON ROUTINE
	 ;
UNROLL:	SKIPN	S2,PUSHTP	; LOAD PUSH TYPE AND TEST FOR 0
	ERROR	8,3		;	0 - COULDN'T FIND A PREVIOUS ERROR
	 ;
	MOVE	STACK,GROUND	; CROUCH LOW TO GROUND
	POPSA	I		; ZAP - RETURN TO PREVIOUS UNIVERSE
	SOS	$FNCLV		; DROP LEVEL 1
	JUMPG	S2,UNROLL	; IF POSITIVE - WRONG UNIVERSE
	 ;
	AOS	$FNCLV		; NEG. UNIVERSES DON'T COUNT
	JRST	0(SLINK)	; RESTORATION COMPLETE, RETURN

	SUBTTL	EXECUTION-TIME ERRORS - EPILOGUE

	 ; HERE TO PRINT OUT THE ERROR MESSAGE
	 ;
ERRC::	MOVN	P1,$ERRTP	; SET P1 FOR ABSERR EXIT
	SKIPE	IN.ERR		; HAVE WE BEEN HERE BEFORE?
	JRST	ABSERR##	; YES, BYPASS TERM ROUTINE
	SETOM	IN.ERR		; NO - PREVENT RE-ENTRY
	RELOC
IN.ERR::	BLOCK 1		; FLAG IS IMPURE
	RELOC
	 ;
	MOVE	P1,$ERRTP	; LOAD &ERRTYPE
	 ;
	JSP	QLINK,MSTIME##	; RECORD ...
	MOVEM	Z,TIME.E##	; ENDING TIME
	 ;
	SKIPN	TIME.C		; DID WE FINISH COMPILE?
	MOVEM	Z,TIME.C	; USE THIS AS END
	 ;
	IDIVI	P1,^D1000	; MINOR TO P2, MAJOR TO P1
	SKIPN	P1		; IF P1 IS 0 THEN ...
	EXCH	P1,P2		; WE REALLY DIDN'T WANT TO DIVIDE
	 ;
	MOVEI	Z,^D1000	; SET &MAXLNGTH ...
	MOVEM	Z,$MAXL		; TO A HIGH VALUE
	 ;
	SKPINC	0		; FREE UP
	JFCL			; ^O SHUT OFF
	 ;
	MOVE	STACK,STBASE	; ENSURE ENOUGH STACK
	JSP	SLINK,LINE##	; PRINT THE ...
	XWD	XERRF,^D9	; FIRST LINE WHICH GIVES:
	XWD	SDT,[12,,1]	; NEW LINE
	XWD	SDT,EERR0##	; "ERROR"
	XWD	IDT,P1		; MAJOR
	XWD	SDT,[".",,1]	; PERIOD
	XWD	IDT,P2		; MINOR
	XWD	SDT,EERR01##	; "IN STATEMENT"
	XWD	IDT,$STNO	; &STNO
	XWD	SDT,EERR02##	; "AT LEVEL"
	XWD	IDT,$FNCLV	; &FNCLEVEL
	 ;
	CAIG	P1,MXSYSE	; IF P1 IS GREATER THAN ANY SYSTEM ERROR
	CAIG	P1,0		; OR NON POSITIVE
	MOVEI	P1,MXSYSE+1	; THEN IT MUST BE USER
	 ;
	PUSH	STACK,SYSTR	; PUSH ...
	HRRZ	S2,EERRTA-1(P1)	; ERROR ...
	PUSH	STACK,0(S2)	; MESSAGE
	 ;
	MOVS	S3,EERRTA-1(P1)	; LOAD PROC. ADDR.
	JRST	0(S3)		; AND LEAP TO FIND MESSAGE

	 ; HERE IF TYPE 1 ERROR
	 ;
ERRD1:	MOVEI	Q2,ERRPRM	; FORM
	JSP	SLINK,IMAGE##	; IMAGE OF EVIL ELEMENT
	 ;
ERRD1A:	JSP	SLINK,LINE
	XWD	XERRF,2
	XWD	STACK,1
	XWD	STACK,2
	 ;
	JRST	ETERM##		; AND TERMINATE

	 ; HERE ON TYPE 8 ERRORS
	 ;
ERRD8:	CAIE	P2,2		; ONLY 8.002 IS OF INTEREST
	JRST	ERRD		; NORMAL TREATMENT IF NOT
	 ;
ERRD82:	MOVE	Z,EERR82##	; REPLACE BY ...
	MOVEM	Z,0(STACK)	; UNDEFINED LABEL
	JRST	ERRD91		; AND JOIN TYPE 9 PROCESSING

	 ; HERE IF TYPE 9 ERROR
	 ;
ERRD9:	CAIN	P2,3		; TYPE 9.003?
	JRST	ERRD82		; YES, HANDLE LIKE 8.002
	 ;
ERRD91:	PUSH	STACK,ERRPRM	; INCLUDE &ERRPARM
	PUSH	STACK,ERRPRM+1	; IN MESSAGE
	JRST	ERRD1A		; AND JOIN ERROR 1

	 ; HERE FOR NORMAL PROCESSING
	 ;
ERRD:	JSP	SLINK,LINE	; AND
	XWD	XERRF,1		; PRINT
	XWD	STACK,1		; IT
	 ;
	JRST	ETERM##		; AND TERMINATE

	SUBTTL	COMPILER ERRORS

	 ; CERROR -
	 ; CALLING SEQUENCE:
	 ;	LOAD Z WITH ERROR CODE
	 ;	JSP	SLINK,CERROR
	 ;
	RELOC
PREFIX:	BLOCK 1	; PREFIX STRING FOR ALL OUTPUT
CERARG:	BLOCK 1	; HOLDS ARGUMENT
CERLNK:	BLOCK 1	; HOLDS LINKING REG.
	RELOC
	 ;
CERROR::MOVEM	Z,CERARG	; SAVE ARGUMENT
	MOVEM	SLINK,CERLNK	; SAVE RETURN
	MOVE	Z,[11,,1]	; LOAD DEFAULT PREFIX
	MOVEM	Z,PREFIX	; STORE AS PREFIX
	 ;
	MOVE	S2,CERRF	; IF COMPILER ERRORS GO ON A ...
	CAMN	S2,LISTF	; DIFFERENT FILE AS THE LISTING ...
	SKIPGE	LISTF+1		; OR IF LISTING IS OFF THEN ...
	SKIPA			; SKIP TO PRINT THE SUBJECT
	JRST	CERR.1		; ELSE JUMP AROUND
	 ;
	PUSH	STACK,LSUBJ##	; PUSH THE ...
	PUSH	STACK,LSUBJ+1	; OFFENDING STRING
	JSP	SLINK,LINE	; AND PRINT IT
	XWD	CERRF,2		; ON THE ERROR FILE
	XWD	SDT,PREFIX	; PRECEDED BY A TAB (OR WHATEVER)
	XWD	STACK,1		; (OFFENDING STRING)
	 ;
	 ; PREPARE THE POINTER TO THE ERROR
	 ;
CERR.1:	HRRZ	S3,LSUBJ+1	; GET LENGTH OF LSUBJECT
	SUB	S3,CURSOR	; SUBTRACT CURSOR
	JUMPE	S3,CERR2	; JUMP IN NULL STRING
	SUBI	S3,1		; DEDUCT ONE TO POINT AT END OF ELEMENT
	 ;
	PUSH	STACK,LSUBJ	; GET
	PUSH	STACK,LSUBJ+1	; POINTER
	JSP	QLINK,CVTPTR##	; TO THE LISTING
	0			; SUBJECT
	ERROR	15		; (NULL STRING?)
	 ;
	CLEAR	S2,		; RESULTANT POINTER POS.
	 ;
CERR4:	ILDB	Q3,Z		; GET NEXT CHAR.
	CAIE	Q3,11		; TAB?
	AOJA	S2,CERR3	; NO, JUST ADD ONE
	 ;
	ADDI	S2,10		; YES, NEXT HIGHER
	ANDI	S2,777770	; OCTAL POSITION
	 ;
CERR3:	SOJG	S3,CERR4	; LOOP ON PREFIX COUNT
	MOVE	S3,S2		; S3 HOLDS CURSOR POSITION
	 ;
CERR2:	MOVE	Z,S3		; LOAD ARG. FOR DUPL
	PUSH	STACK,$ALPHA	; PUSH ON DESCRIPTOR ...
	PUSH	STACK,[" ",,1]	; FOR BLANK
	JSP	TLINK,DUPLI##	; PREPARE POINTER PREFIX
	ERROR	11,13		; EXCEEDED &MAXLNGTH
	 ;
	JSP	SLINK,LINE.##	; PREPARE A LINE WITHOUT PRINTING
	XWD	0,3		; 3 ARGUMENTS
	XWD	SDT,PREFIX	; THE PREFIX
	XWD	STACK,1		; THE BLANKS
	XWD	SDT,["^",,1]	; A MARK
	 ;
	JSP	SLINK,CERR.W	; AND WRITE IT OUT
	 ;
	 ; PREPARE THE MESSAGE
	 ;
	PUSH	STACK,SYSTR	; ARG IS AN ADDRESS INTO ...
	MOVE	S2,CERARG	; THE SYSTEM ...
	PUSH	STACK,0(S2)	; STRING BLOK
	 ;
	JSP	SLINK,LINE.	; PREPARE THE STRING
	XWD	0,3		; ENCLOSED
	XWD	SDT,CE.PRE	; IN STARS
	XWD	STACK,1		;
	XWD	SDT,CE.PRE
	 ;
	JSP	SLINK,CERR.W	; WRITE IT OUT
	 ;
	JRST	@CERLNK		; AND RETURN

	 ; A LITTLE SUBROUTINE TO WRITE THE STRING AT THE TOP OF THE
	 ; STACK ONTO CERRF AND POSSIBLY LISTF
	 ;
CERR.W:	MOVE	Z,LISTF		; IF THE LISTING FILE ...
	CAMN	Z,CERRF		; DIFFERS FROM THE ERROR FILE
	JRST	CERRW1		; AVOID THIS BRANCH
	 ;
	 ; WRITE STRING ON LISTF
	 ;
	PUSH	STACK,-1(STACK)	; DUPLICATE THE
	PUSH	STACK,-1(STACK)	; VALUE ON THE STACK
	MOVE	T2,LISTF	; LOAD THE ...
	MOVE	T3,LISTF+1	; FILE DESCRIPTOR
	JSP	TLINK,WRITE##	; WRITE OUT THE MESSAGE
	ERROR	12,5		; INCORRECTABLE OUTPUT ERROR
	 ;
	 ; WRITE STRING ON CERRF
	 ;
CERRW1:	MOVE	T2,CERRF	; LOAD THE ...
	MOVE	T3,CERRF+1	; FILE DESCRIPTOR
	JSP	TLINK,WRITE##	; WRITE IT OUT
	ERROR	12,5		; INCORRECTABLE OUTPUT ERROR
	 ;
	JRST	0(SLINK)	; AND RETURN




	SUBTTL	EXECUTION ERROR TABLE
;
;
; THIS TABLE CONTAINS THE LOCATION OF DESCRIPTOR
; BOTTOMS OF STRINGS IN THE SYSTEM STRING BLOCK WHICH CORRESPND
; TO MAJOR ERROR MESSAGES.
;
EERRTA:	ERRD1,,EERR1##
	ERRD,,EERR2##
	ERRD,,EERR3##
	ERRD,,EERR4##
	ERRD,,EERR5##
	ERRD,,EERR6##
	ERRD,,EERR7##
	ERRD8,,EERR8##
	ERRD9,,EERR9##
	ERRD,,EERR10##
	ERRD,,EERR11##
	ERRD,,EERR12##
	ERRD,,EERR13##
	ERRD,,EERR14##
 	ERRD,,EEUSER##

	MXSYSE==^D14		; MAXIMUM SYSTEM ERROR
	 END
