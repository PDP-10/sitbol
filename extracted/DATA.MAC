	LIST	; FORCE USER TO SEE WHO WE ARE.
	COMMENT .













			* * *   S I T B O L   * * *

				VERSION   3





	COPYRIGHT STEVENS INSTITUTE OF TECHNOLOGY   1972, 1973

	ALL RIGHT RESERVED.



















;-----------------------;

	IF2 ,<PRINTX SITBOL VERSION 3 - MODULE EDIT NUMBER = 1>

;-----------------------;



   TITLE   DATA  - PURE AND IMPURE DATA
;
;   1.   PURE DATA
;        ---------
;      1.1   COMMON CODE
;      1.2   &ALPHABET AND SINGLE CHARACTER STRINGS
;      1.3   COMMON STRINGS
;      1.4   SYSTEM CHARACTER TABLE
;      1.5   MISC. PURE DATA
;
;   2.   IMPURE DATA
;        -----------
;      2.1   IMPURE KEYWORDS
;      2.2   OTHER NONFLOATING NONRECURSIVE IMPURE DATA
;      2.3   SAVE AREAS
;      2.4   DESCRIPTOR DATA
;      2.4   MISC. NON-FLOATING DATA
;
   TWOSEG
   RELOC   400000

	SUBTTL	1.1 COMMON CODE
;
;	NORMAL RETURNING FROM A PRIMARY ROUTINE
RETNL2::SUB	STACK,[XWD 2,2]		; BUMP STACK 1 DESCRIPTOR
RETNL1::SUB	STACK,[XWD 2,2]		; BUMP STACK 1 DESCRIPTOR
RETNUL::PUSH	STACK,NULLST		; RETURN NULL STRING ...
	PUSH	STACK,NULLST+1		; FROM ...
	JRST	1(PLINK)		; PRIMARY ROUTINE
;
;	FAIL RETURNING FROM A PRIMARY ROUTINE
FRET3::	SUB	STACK,[XWD 2,2]		; BUMP STACK 3 DESCRIPTORS
FRET2:: SUB	STACK,[XWD 2,2]		; BUMP STACK 2 DESCRIPTORS
FRET1:: SUB	STACK,[XWD 2,2]		; BUMP STACK 1 DESCRIPTOR AND
	JRST	0(PLINK)		; AND FAIL.


	 ; PSHSA - ROUTINE TO PUSH SAVE AREAS
	 ; CALLING SEQUENCE:
	 ;	JSP	Z,PSHSA
	 ;	XWD	N,LOC
	 ;
PSHSA::	MOVEM	Q1,PPRET	; SAVE Q1
	AOS	Q1,Z		; RETURN ADDR TO Q1
	 ;
	HLR	Z,-1(Q1)	; LOAD WORD COUNT
	JRST	PSHR1		; JOIN PUSHR PROCESSING

	 ; PSHR - ROUTINE TO PUSH REGISTERS
	 ; CALLING SEQUENCE:
	 ;	JSP	Z,PSHR
	 ;	XWD	N+1,LOC
	 ;
PSHR::	MOVEM	Q1,PPRET	; SAVE Q1
	AOS	Q1,Z		; RETURN POINT TO Q1
	 ;
	HLR	Z,-1(Q1)	; LOAD COUNT TO Z-RIGHT
	HRLI	Z,JUNK		; TYPE TO Z-LEFT
	PUSH	STACK,Z		; PUSH WARNING WORD
	 ;
	SOS	Z		; # OF REGS TO Z-RIGHT
	 ;
PSHR1:	 ; HERE FROM PSHSA
	 ;
	HRL	Z,Z		; # OF WORDS TO BE MOVED
	ADD	Z,STACK		; NEW STACK WORD TO ...
	EXCH	Z,STACK		; STACK, OLD STACK TO Z
	 ;
	ADDI	Z,1		; 'TO' ADDRESS
	HRL	Z,-1(Q1)	; 'FROM' ADDRESS
	 ;
	SKIPL	STACK		; TEST STACK ...
	ERROR	6,2		; FOR OVERFLOW
	 ;
	EXCH	Q1,PPRET	; RESTORE Q1
	BLT	Z,0(STACK)	; DO THE DATA TRANSFER
	 ;
	JRST	@PPRET		; AND RETURN

	 ; PPSA & PPR - ROUTINES TO POP SAVE AREAS &
	 ; REGISTERS RESPECTIVELY
	 ; CALLING SEQUENCE:
	 ;	JSP	Z,PPSA (OR JSP Z,PPR)
	 ;	XWD	N,LOC
	 ;
PPSA::	TLOA	Z,400000	; FLAG ENTRY
PPR::	TLZ	Z,400000	; FLAG ENTRY
	 ;
	MOVEM	Q1,PPRET	; SAVE Q1
	AOS	Q1,Z		; RETURN ADDRESS TO Q1
	 ;
	HLL	Z,-1(Q1)	; COUNT TO Z-LEFT
	HLR	Z,Z		; AND RIGHT
	SUB	STACK,Z		; NEW STACK ...
	MOVEM	STACK,IGNOZ	; SAVE HERE
	 ;
	HRLI	Z,1(STACK)	; 'FROM' ADDRESS TO Z-LEFT
	HRRZ	STACK,Z		; COUNT TO STACK-RIGHT
	ADD	STACK,-1(Q1)	; LAST 'TO' ADDRESS TO STACK
	HRR	Z,-1(Q1)	; 'TO' ADDRESS TO Z-RIGHT
	EXCH	Q1,PPRET	; RESTORE Q1 IN CASE
	BLT	Z,-1(STACK)	; BLT IT UP
	 ;
	MOVE	STACK,IGNOZ	; LOAD NEW STACK
	SKIPL	PPRET		; POPR ENTRY?
	POP	STACK,Z		; YES - REMOVE EXTRA WORD
	 ;
	JRST	@PPRET		; AND RETURN

	SUBTTL	1.2  &ALPHABET AND 1 CHAR. STRINGS
;
$ALPHA::	XWD	SDT,ALPHAC	; DESCRIPTOR TOP AND ...
		XWD	0,^D128		; BOTTOM FOR &ALPHABET
ALPHAC::	XWD	SBLOK,<^D128/5>+3	; DUMMY BLOK ...
		0			; HEADER
; 	
;	THE FOLLOWING MACRO WILL GENERATE THE TABLE OF 128 BYTES
;
	DEFINE  ALPHAM(N)< BYTE(7)N+0,N+1,N+2,N+3,N+4>
	ALPHAN=0
	REPEAT	<^D128/5+1>,<ALPHAM(\ALPHAN)
			ALPHAN=ALPHAN+5>
;
; SINGLE CHARACTER DESCRIPTOR BOTTOMS FOLLOW:
;
S.BL::	XWD	" ",1		; BLANK
S.CM::	XWD	",",1		; COMMA
S.LP::	XWD	"(",1		; LEFT PAREN
S.RP::	XWD	")",1		; RIGHT PAREN

	SUBTTL	1.3  COMMON STRINGS
;	THE MACRO STRING WILL NOT ONLY ASSEMBLE A STRING (CALLING
; 	THE PSUEDO-OP ASCII) BUT WILL ALSO ASSEMBLE A WORD
;	OF THE FORM
;		XWD	OFFSET,LENGTH
;	TO BE USED AS THE SECOND WORD OF A 2-WORD DESCRIPTOR FOR
;	THE STRING.
;	THE VARIABLE OFF KEEPS TRACK OF THE OFFSET WHICH
;	IS RELATIVE TO SYSBL+2.
;	THE FIRST WORD OF THE DESCRIPTOR IS LOCATED AT SYSTR.
;	NUMBER IS A UTILITY MACRO USED TO CONVERT A SYMBOL TO
;	NUMERIC FORM
	DEFINE	NUMBER(N) <N>
	DEFINE STRING(S) <
	LSTR==0
	IRPC S,<
	LSTR==LSTR+1>
	XWD NUMBER(\OFF),NUMBER(\LSTR)
	ASCII	|S|
	OFF==<<<LSTR-1>/5>+2>*5+OFF   >
;
;	INITIALIZE OFF
;
	OFF==5		; THE FIRST STRING IS OFFSET BY 5
;
SYSTR:: XWD	SDT,.+1		; FIRST WORD OF DESCRIPTOR
				; (COMMON FOR ALL)
SYSBL:: XWD	SBLOK,SYSBLE-SYSBL	; PHONEY ...
	0				; HEADER
;
;	NOTE: DUE TO A BUG IN THE ASSEMBLER, COMMENTS MAY
;	NOT APPEAR ON THE SAME LINE AS A REFERENCE TO THE
;	STRING MACRO.
;
S.EQL:: STRING	< = >
S.TEQ:: STRING	<	= >
S.BLLB::STRING	 <
			; USED IN PREPARING DUMPS

;	COMPILER ERROR MESSAGES FOLLOW

CE.PRE::STRING	(*****)	; PREFIX FOR COMP. ERRORS
;CE.GT::	STRING	(ERROR IN GOTO FIELD)
; SEE EERR8
CE.NI::	STRING	(ERROR IN NUMERIC ITEM)
CE.IC:: STRING	(ILLEGAL CHARACTER)
CE.MB:: STRING	<MISSING BLANK>
CE.CP:: STRING	(INVALID -COPY CARD)
CE.PL:: STRING	(MULTIPLY DEFINED LABEL)
CE.ME:: STRING	<MISSING END SUPPLIED>
CE.BL:: STRING	(TOO MANY LEFT PARENS OR BRACKETS)
CE.BR:: STRING (TOO FEW LEFT PARENS OR BRACKETS)
CE.LS:: STRING (LINE TOO LONG)
CE.UT:: STRING	(UNDEFINED LABEL)
CE.QT:: STRING	(UNMATCHED QUOTE)
CE.SYS::STRING	(SYSTEM ERROR)
;CE.CE::	STRING 	(COMPILER ERROR)
; SEE EERR15
;
; MAJOR ERROR MESSAGES FOR EXECUTION ERRORS
;
EERR0::	STRING	<? ERROR >
;EERR01::STRING	< IN STATEMENT >
; SEE S.SMNT
EERR02::STRING	< AT LEVEL >
EERR1::	STRING	< IS AN ILLEGAL DATATYPE>
;EERR2::	STRING	<UNEXPECTED FAILURE>
; IMPOSSIBLE IN SITBOL UNLESS USER CAUSES IT, SEE EEUSER
EERR3::	STRING	<ERROR IN ARRAY REFERENCE>
EERR4::	STRING	<DETECTED BY COMPILER>
EERR5::	STRING	<KEYWORD REFERENCE ERROR>
EERR6::	STRING	<MEMORY OVERFLOW>
;EERR7::	STRING	<EVALUATION OF GOTO FIELD>
; IMPOSSIBLE, SEE EEUSER
CE.GT::
EERR8::	STRING	<ERROR IN GOTO FIELD>
EERR82::STRING	< IS AN UNDEFINED LABEL>
EERR9:: STRING	< IS AN UNDEFINED FUNCTION>
EERR10::STRING	<ARITHMETIC ERROR>
EERR11::STRING	<LIMIT EXCEEDED>
EERR12::STRING	<INPUT/OUTPUT ERROR>
EERR13::STRING	<BAD VALUE FOR FUNCTION OR OPERATOR>
EERR14::STRING	<VALUE WHERE NAME REQUIRED>
CE.CE::
EERR15::STRING	<SITBOL ERROR>
EERR2::
EERR7::
EEUSER::STRING	<USER ISSUED ERROR>
;
;  THE FOLLOWING ARE STRINGS WHICH WILL BE PUT INTO $RTNTP
;
S.RET::	STRING	<RETURN>
S.FRET::STRING	<FRETURN>
S.NRET::STRING	<NRETURN>
;
; THESE STRING ARE USED BY DFF TO CREATE TRACING FOR USER DEFINED
; FUNCTIONS.
;
FTRC.E::STRING	< ENTERED>
FTRC.R::STRING	< FROM >
;
;	THE FOLLOWING STRINGS ARE USED BY THE INTERPRETER
;
S.BLNK::   STRING	<        >
S.NORM::   STRING	< NORMAL TERMINATION AT LEVEL >
S.LAST:: STRING	< LAST LINE EXECUTED WAS >
S.DMP::	   STRING	<DUMP FOLLOWS:>
S.STAT::   STRING	<  SITBOL STATISTICS SUMMARY>
S.CMTM::   STRING	< MS. COMPILATION TIME>
S.EXTM::   STRING	< MS. EXECUTION TIME>
S.STEX:: STRING	< LINES EXECUTED,>
S.FLD::	   STRING	< FAILED>
S.GC::	   STRING	< GARBAGE COLLECTIONS>
S.NINS::   STRING	< READS>
S.NOUT::   STRING	< WRITES>
S.AVE::	   STRING	< MICROSECOND AVE. PER LINE EXECUTED>
S.USED:: STRING	< STACK, MAXIMUM WAS >
S.SST::  STRING	< SYSTEM>
S.HST::  STRING	< PATTERN MATCHING>
S.NST::  STRING < NAME-LIST>
S.MLOW:: STRING <K MAX LOW-SEG>
S.LOW::  STRING <K CURRENT LOW SEGMENT COMPRISING:>
S.HGH::  STRING <K HIGH SEGMENT>
S.FLID:: STRING < WORDS FLOATING>
S.GRID:: STRING < WORDS GROWING>
S.STKS:: STRING < WORDS FOR STACKS:>
S.VTBL:: STRING < WORD VARIABLE TABLE>
S.ID::	STRING	<SITBOL (VERSION 3 - JUNE, 1973)>
S.ATTR::STRING <STEVENS INSTITUTE OF TECHNOLOGY - HOBOKEN, N. J.>
EERR01::
S.SMNT::   STRING	< IN LINE >
S.HIST::STRING	< INPUT('H.IN',&ARB,'T')
	N. = CONVERT(&NAME,.STRING,'S') '.HST'
	OUTPUT('H.OUT',N.,'T')
	A = &HISTOGRAM
	&HISTOGRAM =
	H.P = TAB(1) SPAN('0123456789') . P.
	S. = '	' H.IN	:F(END)
	S. = ?(S. ? H.P) '(' A[P.] ')' S.
	H.OUT = S.	:[-2]>
;
;	THE FOLLOWING STRINGS ARE REEQUIRED BY TRC
S.NO::	STRING	< #>
S.BAR::STRING	<! >
S.LPRP::STRING	<() >
S.ED::	STRING	<ED >
S.CLST::STRING	< CALLED IN LINE >
S.TIME::STRING	<, TIME = >
S.STMT::STRING	< LINE >
S.KEQ::	STRING	<:	&>
S.CLT::	STRING	<:  >
S.TRAN::STRING	<TRANSFER TO >
S.CAL::	STRING	< CALL OF >
S.LEV::  STRING	<:  LEVEL = >
S.TRET::STRING	< RETURN OF >
S.REE::	STRING	<REENTER AT &STCOUNT>
;
;  THE FOLLOWING STRINGS ARE NEEDED BY THE COMPLIER ERROR WRITER TO
;  CREATE THE ERROR MESSAGES
;
CE.BK::	STRING	<     >
CE.PT::	STRING	< .$. >

S.INP:: STRING <INPUT>
S.TTY:: STRING <TTY>
S.OUT:: STRING <OUTPUT>
SYSBLE:			; SYSTEM SBLOK END

	SUBTTL	1.4  SYSTEM CHARACTER TABLE
;
;	SYSTEM WIDE CHARACTER SETS ARE DEFINED HERE
;
SYSCT::	XWD	CSDT,.+1	; FIRST WORD OF CHAR. SET DESCRIPTOR
	XWD	CTBLOK,LHDR+^D128	; PREPARE PHONEY HEADER
	0				; GC FIELD
;	'X.' LABEL PROVIDES A CONVENIENT HANDLE ON THE RELATED
; MASK BUT IT CAN ONLY BE USED IF ONE BIT APPEARS IN THE WORD.
SYSCTB:: REPEAT	11,<0>		; SKIP FIRST OCTAL 11 LOCATIONS
X.TAB::	Y.TAB			; TAB CHARACTER
	Y.VM			; LINE FEED
	Y.VM			; VERTICAL TAB
	Y.VM			; FORM FEED
	Y.CR			; CARRIAGE RETURN
	REPEAT	32-16,<0>	; SKIP TO OCTAL 32
	Y.CZ			; ^Z
	Y.ALT			; ALT-MODE
	REPEAT	40-34,<0>	; SKIP TO OCTAL 40
X.BL::	Y.BL			; BLANK
	Y.OP!Y.VB		; !
X.QQ::	Y.QQ			; "
X.OP::
	REPEAT	4,<Y.OP>	; # $ % &
X.Q::	Y.Q			; '
X.LP::	Y.LP			; (
X.RP::	Y.RP			; )
	Y.OP!Y.STAR		; *
	Y.OP!Y.PLUS		; +
X.CM::	Y.CM			; ,
	Y.OP!Y.MNS		; -
	Y.OP!Y.PER		; .
	Y.OP!Y.SLSH		; /
X.NUM::	REPEAT ^D10,<Y.NUM>	; 0-9
X.COL::	Y.COL			; :
X.SEMI::Y.SEMI			; ;
X.LB::	Y.LB			; <
	Y.OP!Y.EQ		; =
X.RB::	Y.RB			; >
	Y.OP			; ?
	Y.OP			; @
X.UPS::	REPEAT	4,<Y.UPS>	; LETTERS A-D (UPPER CASE)
	Y.E!Y.UPS		; THE LETTER E
	REPEAT  ^D21,<Y.UPS>	; THE REST OF THE UPPER CASE ALPHABET
	Y.LB			; [
	Y.OP			; \
	Y.RB			; ]
	Y.OP!Y.VB		; ^
	Y.OP!Y.UN		; _
	0			; `
X.LOWS::REPEAT	^D26,<Y.LOWS>	; LOWER CASE
	Y.LB			; lt. curly bracket
	Y.OP!Y.VB		; VERTICAL BAR
	Y.RB			; RT. CURLY BRACKET
	Y.OP			; TILDE
	0			; DELETE
;
;	MISC. MASKS FOR SYSTEM CHARACTER SETS
;	(A WORD OF THE FORM X.--- FORMS THE 2ND WORD
; 	OF A TWO WORD DESCRIPTOR THE FIRST WORD OF WHICH
;	IS FOUND AT SYSCT)
;
X.ALPH::	Y.UPS!Y.LOWS		; ALPHABETICS
X.ALNU::	Y.UPS!Y.LOWS!Y.NUM	; ALPHANUMERICS
X.ID::	Y.UN!Y.UPS!Y.LOWS!Y.NUM!Y.PER	; IDENTIFIER CHARACTERS
X.NUM.::	Y.NUM!Y.PER		; NUMBERS AND PERIOD
X.CMRP::	Y.CM!Y.RP		; COMMA OR RIGHT PAREN
X.NSC::		Y.NUM!Y.MNS!Y.PLUS!Y.PER!Y.E
					; NUMERICAL STRING CONSTANT

	SUBTTL	1.5  MISC. PURE DATA
;
NULLST::	XWD	SDT,0	; DESCRIPTOR FOR NULL STRING
		0
;
;
;


	SUBTTL	IMPURE DATA (SEE PAGE 1 FOR OUTLINE)
;
;	THE FOLLOWING MACROS ARE NEEDED TO ENCODE THE
;	IMPURE DATA AREA. THEY ALL ASSEMBLE INTO ZERO'S
;	SO AS TO MAKE THE IMPURE SEGMENT RESTARTABLE.
;	BUT THEY ALSO PROVIDE CODE (BEGINNING AT INIMP) WHICH
;	INITIALIZES THESE LOCATIONS.
;	CONTROL RETURNS VIA QLINK.
INIMP::
;
	DEFINE	XWD.(X,Y,%LOC)<
%LOC:	BLOCK 1
	RELOC
	MOVE	Z,[XWD X,Y]
	MOVEM	Z,%LOC
	RELOC	>
;
;	THE ARGUMENT TO EXP. MUST BE A HALF WORD QUANTITY
	DEFINE	EXP.(X,%LOC)<
%LOC:	BLOCK 1		;; ASSEMBLE THE WORD
	RELOC		;; GET BACK TO PURE CODE
	MOVEI	Z,X	;; GET VALUE TO REGISTER Z
	MOVEM	Z,%LOC	;; STORE VALUE INTO IMPURE LOC.
	RELOC>		;; LEAVE IT IN IMPURE.
;
	RELOC	0
FID::

	SUBTTL  2.1  IMPURE KEYWORDS
;
; PROTECTED
;
$FNCLV:: BLOCK  1	; &FNCLEVEL
	 BLOCK  1	; TRACE FLAG
$LASTN:: BLOCK  1	; &LASTNO
$RTNTP:: BLOCK  1	; &RTNTYPE
$STCNT:: BLOCK  1	; &STCOUNT
	 BLOCK  1	; TRACE FLAG
$STFCT:: BLOCK  1	; &STFCOUNT
	 BLOCK  1	; TRACE FLAG
$STNO::  BLOCK  1	; &STNO
$JOBNO:: BLOCK  1	; &JOBNO
$PPN::   BLOCK  1	; &PPN
;
; UNPROTECTED
$ABEND:: BLOCK  1    	; &ABEND
$ANCH::  BLOCK  1	; &ANCHOR
$CODE::  BLOCK  1	; &CODE
$DUMP::  BLOCK  1	; &DUMP
$ERRTP:: BLOCK  1	; &ERRTYPE
	BLOCK  1	; TRACE FLAG FOR &ERRTYPE
$ERRLM:: BLOCK  1	; &ERRLIMIT
$FTRC::  BLOCK  1	; &FTRACE
$FULL::  BLOCK  1	; &FULLSCAN
$INPUT:: EXP. 1  	; &INPUT
$MAXL::  EXP.  ^D5000	; &MAXLNGTH
$OUTPT:: EXP. 1  	; &OUTPUT
$STLIM:: XWD.	377777,777777	; &STLIMIT
$TRACE:: BLOCK  1	; &TRACE
$TRIM::  BLOCK  1	; &TRIM
$RAND::	BLOCK	1	; &RANDOM

	SUBTTL	2.2 NONFLOATING NONRECURSIVE IMPURE DATA
PREX::	  EXP. 1	;  PRE-EXECUTION STAGE.  WHEN EXECUTION BEGINS
			; THIS IS SET TO 0.
CEIL::	  BLOCK 1	; UPPER LIMIT ON FLOATING STORAGE
HIWATR::  BLOCK 1       ; HIGH WATER MARK FOR CORE REQUESTS
FLOOR::	  BLOCK 1	; BOTTOM OF FLOATING STORAGE
STBASE::  BLOCK 1	; SYSTEM STACK BASE
HSBASE::  BLOCK 1	; HISTORY STACK BASE
NSBASE::  BLOCK 1	; NAME-LIST STACK BASE
BROOM::   EXP. ^D1000	; BREATHING ROOM
TOOMCH::  EXP. ^D3000	; MAXIMUM SLACK
VTABLE::  BLOCK	1	; ADDRESS OF HASH TABLE FOR VARIABLE BLOCKS
LVTBL::	  BLOCK 1	; LENGTH OF VTABLE
TIME.S::  BLOCK 1	; STARTING TIME
TIME.C::  BLOCK 1	; TIME AT FINISH OF COMPILATION
TIME.E::  BLOCK 1       ; ENDING TIME
GRID::	  BLOCK 1	; BASE OF GROWING REGION
GSURF::	  BLOCK 1	; SURFACE OF GRID REGION
NLINES::  EXP. 777777	; LINES PER PAGE ON THE OUTPUT LISTING
DIM4::	  BLOCK 1	; 4TH DIMENSION
CMPNO::	  EXP. 1	; COMPILER STATEMENT NO.
PAGENO::  EXP. 1	; COMPILER PAGE NO.
NLPGNO::  EXP. 1	; NEXT LINE'S PAGE NUMBER
ARYID::   BLOCK 1	; ID # FOR ARRAYS
TBLID::   BLOCK 1	; ID # FOR TABLES
DFDID::	  BLOCK 1	; IDENTIFICATION # FOR DEFINED DATATYPES
NINS::	  BLOCK 1	; NUMBER OF READS
NOUTS::	  BLOCK 1	; NUMBER 0F WRITES
NGCS::    BLOCK 1	; NUMBER OF GARBAGE COLLECTS
CBLENG::  EXP. ^D400	; LENGTH OF CBLOK
AUTOHS::  BLOCK 1	; AUTO HISTOGRAM
GRFLAG::  BLOCK 1	; ALL. IN GR. REG. FLAG
IGNOZ:	BLOCK	1	; TEMPS USED BY ...
PPRET:	BLOCK	1	; PUSH-POP MACROS

	SUBTTL	2.3  SAVE AREAS
;
;	THIS IS THE START OF THE REGION TENDED BY THE GARBAGE
;	COLLECTOR.
TENDED::
;
;	2.3.1  PATTERN MATCHING SAVE AREA
;
SAVEM::		XWD.  JUNK,LIGNOM+1	
			; INDICATOR FOR GARBAGE COLLECTOR
IGNOM::			; START OF IGNORED AREA
CURSOR::	BLOCK 1		; CURSOR
STPTR::		BLOCK 1		; STREAM POINTER
MAXLEN::	BLOCK 1		; MAXIMUM LENGTH PREFIX OF ...
				; SUBJECT STRING WHICH CAN BE MATCHED
HSTACK::	BLOCK 1		; HISTORY STACK
NSTACK::	BLOCK 1		; NAME STACK
FUTILE::	BLOCK 1		; FUTILITY FLAG
SCRAD::		BLOCK 1		; SCAN RETURN ADDRESS
;
FLAM::			; FLOATING ADDRESSES FOR PATTERN MATCHING
SUBJ::		BLOCK	2	; SUBJECT STRING OF THE MATCH
PATT::		BLOCK 	2	; PATTERN FOR THE MATCH
	IFN LSAVEM-<.-SAVEM>,< PRINTX LSAVEM IS IN ERROR>
;
;	2.3.2  INTERPRETER SAVE AREA
;
SAVEI::		XWD.	JUNK,LIGNOI+1
IGNOI::				; IGNORED AREA
GROUND::	BLOCK 1		; BASIC STACK POSITION.
			; SERVES AS FRAME OF REFERENCE ON A PER
			; STATEMENT BASIS
STSAVE::	BLOCK 1		; STACK SAVE, REQUIRED ON A PER FUNCTION
				; BASIS
PUSHTP::        BLOCK 1         ; DENOTES TYPE OF PUSH
                      ; 0=BOTTOM, 1=FUNCTION, -1=ERROR RECOVERY
FLAI::			; FLOATING ADDRESS SAVE REGION OF INTERPRETER
ILABEL::	BLOCK 2		; STATEMENT LABEL POINTER
ILOC::		BLOCK 2		; LOCATION COUNTER
	IFN LSAVEI-<.-SAVEI>,<PRINTX LSAVEI IS IN ERROR>
;
;	2.3.3  UTILITY SAVE AREAS
;
;	SAVE AREA FOR PRIMARY ROUTINES
SAVEP::	XWD.	JUNK,LIGNO+1
IGNOP::	BLOCK	LIGNO	; IGNORED REGION
FLAP::	BLOCK	LFLA	; FLOATING REGION
;
;	SAVE AREA FOR SECONDARY ROUTINES
SAVES::	XWD.	JUNK,LIGNO+1
IGNOS::	BLOCK	LIGNO	; IGNORED REGION
FLAS::	BLOCK	LFLA	; FLOATING REGION
;
;	TERTIARY SAVE AREA
SAVET::	XWD.	JUNK,LIGNO+1
IGNOT::	BLOCK	LIGNO	; IGNORED REGION
FLAT::	BLOCK	LFLA	; FLOATING REGION
;
;	QUATERNARY SAVE AREA
SAVEQ::	XWD.	JUNK,LIGNO+1
IGNOQ::	BLOCK	LIGNO
FLAQ::	BLOCK	LFLA

	SUBTTL	2.4 DESCRIPTOR STORAGE
;
;	INFORMATION IN THIS SECTION APPEARS IN WORD PAIRS
;	AND ARE ASSUMED BY THE GARBAGE COLLECTOR TO BE VALID
;	DESCRIPTORS.
;
;	I/O DESCRIPTORS
;
OUTF::   	BLOCK  2	; OUTPUT FILE
LISTF::		BLOCK  2	; LISTING FILE
CERRF:: 	        	; COMPILER ERROR FILE
XERRF::  	BLOCK  2	; EXECUTION ERROR FILE
COMPIN::	BLOCK 2       	; COMPILER INPUT FILE
INFILE::	BLOCK  2	; DATA INPUT FILE
;
;	OTHER MISC. DESCRIPTORS
LASTCI::	BLOCK  2  	; LAST COMPIN DESCRIPTOR
CCTBL:: 	BLOCK  2	; CURRENT CHARACTER TABLE
$HIST::		BLOCK  2	; HISTOGRAM TABLE
LSUBJ::		BLOCK  2	; LISTING SUBJECT
RP.A2::		BLOCK 4		; 2ND AND 3RD ARGS TO REPLACE
RP.TBL::	BLOCK 2		; TABLE USED BY REPLACE
TB.FNC::	BLOCK 2		; &FNCLEVEL TRBLOK
TB.STC::	BLOCK 2		; &STCOUNT TRBLOK
TB.STF::	BLOCK 2		; &STFCOUNT TRBLOK
TB.ERR::	BLOCK 2		; &ERRTYPE TRBLOK
ERRPRM::	XWD.	SDT,0	; &ERRPARM
		BLOCK 1
;
;	END OF FIXED IMPURE DATA SECTION (FID)
;	ALSO BEGINNING OF ADJUSTABLE IMPURE DATA SECTION (AID)
AID::
	RELOC
;	END OF PURE DATA SECTION - ALSO
;	END OF INITIALIZATION, RETURN TO IO.
	JRST	0(QLINK)
	END


