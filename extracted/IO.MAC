	LIST	; FORCE USER TO SEE WHO WE ARE.
	COMMENT .













			* * *   S I T B O L   * * *

				VERSION   3





	COPYRIGHT STEVENS INSTITUTE OF TECHNOLOGY   1972, 1973

	ALL RIGHT RESERVED.



















;-----------------------;

	IF2 ,<PRINTX SITBOL VERSION 3 - MODULE EDIT NUMBER = 3>

;-----------------------;



	TITLE IO        AND SYSTEM INTERFACE

;		CONTENTS

;	INITIALIZATION
;		STORAGE INITIALIZATION
;		OPENING THE COMMAND STRING
;		FIRST PASS OVER THE COMMAND STRING
;		RECONFIGURATION OF STORAGE
;		SECOND PASS OVER THE COMMAND STRING
;		DEFAULT ASSOCIATION
;		INITIALIZATION UTILITIES
;			STORAGE CONTROL - SETMEM
;			SETSTK - SET STACK
;			CM.C - COMMAND CHARACTER
;
;	I/O
;		I/O PRIMARIES
;			DATE
;			DETACH
;			ENDFILE
;			FILE
;			INPUT
;			OUTPUT
;			RENAME
;			RESCAN
;			REWIND
;			RUN
;			TIME
;			TTY
;		I/O SECONDARIES
;			CVTFMT
;			CVTIO
;			CVTSIO
;			GETOCT
;			IOASSN
;			NONBLK
;			STFILS
;			TVIN&TVOUT
;		I/O TERTIARIES
;			CVTDW
;			CVTWD
;			DTCH
;			PEJECT
;			READ
;			STRIO
;			MAKEIO
;			WRITE
;		I/O QUATERNARIES
;			ALBUF
;			CLRFSV
;			CLS
;			ENTR
;			LKP
;			MODE
;			MSTIME
;			OPN
;			WMPROP

	TWOSEG

	 ; INITIALIZING THE JOB DATA AREA
	 ;
	 ;
	LOC	137		; .JBVER
	XWD	401,0		; VERSION # , EDIT #

	 ; STAMP HIGH SEGMENT WITH SAME NUMBER
	 ;
	RELOC	400000
ED.VER:	XWD	401,0		; HIGH SEGMENT SERIAL #

	RELOC	0
	RELOC			; NORMAL MODE IS PURE

	 ; MISC. SYMBOLS
	 ;
	EXDATA

	 ;
	 ;	CHARACTER SETS
	 ;

	Y.ALNU==Y.UPS!Y.LOWS!Y.NUM ; ALPHANUMERICS
	Y.LD==Y.VM!Y.ALT	; LINE DELIMETER
	Y.BLAH==Y.BL!Y.TAB	; NOTHING CHARACTERS
	Y.FD==Y.EQ!Y.LA!Y.CM!Y.LD	; FILE DELIMETER
	Y.SD==Y.FD!Y.BLAH!Y.SLSH	; SWITCH DELIMETER

	SUBTTL	STORAGE INITIALIZATION

	 ; HERE FOR INCOMPATIBLE HIGH-LOW SEGMENTS
	 ;
INITXX:	CLEAR	P2,		; NO &STNO OR &FNCLEVEL
	JRST	INITXY		; ESTABLISH MEMORY

	 ; HERE TO SIGNAL AN ERROR WHEN CORE IS IN A
	 ; CHAOTIC STATE. P1 CONTAINS THE NEGATIVE OF
	 ; AN ERROR NUMBER IN THE FORM
	 ; MAJOR * 1000 + MINOR
	 ;
ABSERR:: ;
	HRR	P2,$STNO	; SAVE &STNO
	HRL	P2,$FNCLV	; AND &FNCLEVEL
	 ;
	JSP	TLINK,CLSALL	; CLOSE ALL I/O
	 ;
	JRST	INITXY		; LEAP INTO FORAY

	 ; REENTER POINT - HERE WHEN A REENTER IS TYPED
	 ; AT THE TERMINAL FOLLOWING A ^C INTERRUPT
	 ;
REENTR:	AOS	$TRACE		; GIVE A TRACE MESSAGE
	EXCH	Q3,$STCNT+1	; SAVE Q3
	SKIPN	Q3		; TOUCH NOT IF ALREADY SET
	MOVEI	Q3,NULLST+1	; POINT TO 0
	EXCH	Q3,$STCNT+1	; FLAG TRACE AND RESTORE Q3
	JRSTF	@.JBOPC##	; RESUME PROCESSING


	 ; HERE IS THE MAIN ENTRY POINT!
	 ; FLAG ENTRY
	 ;
INIT:	TDZA	P1,P1		; ZERO OUT P1 AND SKIP
	MOVEI	P1,1		; ONE-IZE P1
	 ;
	RESET			; RESET ALL I/O
	 ;
	SKIPE	RSFLAG		; SAVE FILE?
	JRST	INITXW		; YES
	 ;
	 ; INITIALIZE FID## AND SET-UP MEMORY
	 ;
	RELOC
FID:		; FID REALLY STARTS HERE
	RELOC
	 ;
INITXY:	CLEARM	FID		; ZERO FIRST WORD
	MOVE	T1,[FID,,FID+1]	; LOAD FROM-TO ADDR
	BLT	T1,AID-1	; ZERO OUT REST OF FID
	 ;
	JSP	QLINK,INIMP##	; INITIALIZE IMPURE DATA
	 ;
	JSP	SLINK,SETMEM	; ESTABLISH THE REST OF MEMEORY
	 ;
INITXW:	 ; COMPUTE JOBNO IN 6-BIT, LEFT JUSTIFIED
	 ;
	PJOB	T1,		; ESTABLISH ...
	MOVEM	T1,$JOBNO##	; &JOBNO
	 ;
	RELOC
JOBNO6:	BLOCK 1
	RELOC
	 ;
	MOVEI	T4,3		; 3 DIGITS
INIT1:	IDIVI	T1,^D10		; GET DIGIT TO T2
	ADDI	T2,'0'		; MAKE IT 6-BIT
	LSHC	T2,-6		; SHIFT INTO T3
	SOJG	T4,INIT1	; LOOP ON T4
	 ;
	HLLZM	T3,JOBNO6	; SAVE
	 ;
	MOVEI	T1,REENTR	; ESTABLISH
	MOVEM	T1,.JBREN##	; REENTER ADDR
	 ;
	MOVE	T1,[JRST ERRA##] ; PLANT
	MOVEM	T1,.JB41##	; UUO HANDLER
	 ;
	MOVEI	T1,INTRPT##	; POINT TO INTERRUPT HANDLER
	MOVEM	T1,.JBAPR##	; PLUG JOB DATA AREA
	 ;
	SKIPE	RSFLAG		; VALID SAVE FILE?
	JRST	FIREUP		; YES, OFF TO RESUME PROCESSING
	 ;
	 ; CHECK FOR HIGH-LOW SEGMENT INCOMPATIBILITY
	 ;
	JUMPGE	P1,INITXZ	; JUMP UNLESS AN ERROR ...
	SETOM	RSFLAG		; IS TO BE SIGNALLED.
	MOVNM	P1,$ERRTP	; CITE ERROR
	HRRZM	P2,$STNO	; RESTORE &STNO
	HLRZM	P2,$FNCLV	; RESTORE &FNCLEVEL
	JRST	ERRC##		; FORCE ERROR
	 ;
INITXZ:	 ;
	 ; SET UP TRAP HANDLING
	 ;
	MOVEI	Q3,200000	; PUSH-OVERFLOW BIT
	MOVEM	Q3,TRFLGS	; SAVE FLAG
	APRENB	Q3,		; ESTABLISH OVERFLOW
	 ;
	RELOC
TRFLGS::	BLOCK	1	; LOCATION TO SAVE CURRENT TRAPS
	RELOC
	 ;
	CALLI	P2,14		; GET DATE
	MOVEM	P2,DIM4##	; SAVE IT
EXPIRE::CAIL	P2,-1		; BEYOND EXPIRATION
	ERROR	12,8		; YES

	SUBTTL	OPENING THE COMMAND STRING

	 ;;
	 ; OPEN XXXSNO.TMP (IF NECESSARY)
	 ;;
	JUMPE	P1,INIT2	; AVOID THIS FOR 0 ENTRY POINT
	 ;
	SETOM	RSFLAG		; SET RESTART FLAG
	 ;
	OPEN	17,CMSPEC	; OPEN IT ON CHANNEL 17
	ERROR	12,1		; NO DSK?
	 ;
	HRRM	SURF,.JBFF##	; ALLOCATE BUFFER IN FLID
	INBUF	17,1		; ONLY 1 BUFFER NEEDED
	 ;
	MOVE	Q1,[1,,T1]	; TRY TMPCOR
	MOVSI	T1,'SNO'	; NAME OF SNO
	MOVEI	T2,-1(SURF)		; BUFFER LOCATION
	HRLI	T2,-^D128	; NOMINAL BUFFER LENGTH
	TMPCOR	Q1,		; ISSUE TMPCOR UUO
	JRST	INIT1A		; TRY THE DISK
	 ;
	 ; SET UP POINTER LENGTH
	 ;
	IMULI	Q1,5		; CONVERT TO BYTE COUNT
	MOVEM	Q1,IGNOS+2	; AND STORE IN BYTE COUNT
	 ;
	MOVE	Q2,[POINT 7,0]	; SET ...
	HRR	Q2,SURF		; UP ...
	MOVEM	Q2,IGNOS+1	; POINTER
	 ;
	JRST	INIT3		; JOIN REGULAR PROCESSING

	
INIT1A:
	 ; COMPUTE NAME OF FILE
	 ;
	MOVE	T3,JOBNO6	; GET JOBNO IN LEFT HALF
	HRRI	T3,'SNO'	; COMPLETE THE FILE
	 ;
	 ; NAME IS IN T3, COMPLETE FILE DESCRIPTION
	 ;
	HRLZI	T4,'TMP'	; EXTENSION TO T4
	CLEAR	Q1,		; ZERO OUT ACCESS BITS
	CLEAR	Q2,		; AND PPN NUMBER
	 ;
	LOOKUP	17,T3		; LOOK THIS FILE UP
	AOSA	RSFLAG		; NOT FOUND - CLEAR RSFLAG AND SKIP
	 ;
	JRST	INIT3		; GO ON
	 ;
	JRST	INIT		; TMP FILE NOT THERE, JUST RESTART

	 ; SPECIFIER TO OPEN COMMAND-STRING
	 ;
CMSPEC:	EXP	1		; ASCII MODE
	SIXBIT/DSK/		; FROM THE DISK
	XWD	0,IGNOS		; INPUT RINGS AT IGNOS

	 ; TTY INITIALIZATION
	 ;
INIT2:	MOVEI	Q3,"*"		; PUT OUT STAR FOR USER
	OUTCHR	Q3

	 ; PREPARE DEPOSITORY FOR COMMAND STRING
	 ;
INIT3:	HRRZ	T1,NSTACK	; WILL BEGIN IN STACK REGION
	ADD	T1,[POINT 7,SCHARS+1] ; PREPARE DEPOSITION POINTER
	CLEAR	S3,		; BYTE COUNT
	CLEARM	IGNOP		; FLAG TO INDICATE '=' SIGN

	SUBTTL	FIRST PASS OVER THE COMMAND
	 ;
	 ;
INIT4:	JSP	QLINK,CM.C	; PICK UP COMMAND CHAR IN Q3
	CAIN	Q3,"/"		; BEGIN SWITCH?
	JRST	IN.SW		; YES
	 ;
	TDNE	Z,[Y.EQ!Y.LA]	; CHECK FOR '=' OR '_'
	SETOM	IGNOP		; YES - SET FLAG
	 ;
	TDNE	Z,[Y.LD]	; TEST FOR LINE DELIMETER
	JRST	INIT6		; YES - FINISH UP
	 ;
	CAIN	Q3,15		; IGNORE ...
	 JRST	INIT4		; <CR>'S
	 ;
INIT5:	IDPB	Q3,T1		; SAVE BYTE
	AOJA	S3,INIT4	; BUMP COUNT AND LOOP


	 ; SWITCH DETECTED
	 ;
IN.SW:	JSP	QLINK,CM.C	; GET NEXT CHAR
	CLEAR	T3,		; FLAG
	CAILE	Q3,"_"		; LOWER CASE?
	SUBI	Q3,40		; YES
	 ;
	CAIN	Q3,"C"		; IS IT CORE?
	MOVE	T3,[^D4000,,C.PAR] ; LENGTH-LOCATION
	 ;
	CAIN	Q3,"S"		; IS IT STACK?
	MOVE	T3,[^D1000,,S.PAR] ; LENGTH LOCATION
	 ;
	CAIN	Q3,"V"		; IS IT VTABLE
	MOVE	T3,[^D131,,V.PAR] ; LENGTH-LOCATION
	 ;
	CAIN	Q3,"H"		; HISTOGRAM?
	JRST	IN.SWH		; YES
	 ;
	SKIPN	T3		; DID WE FIND ONE?
	ERROR	12,11		; NO - BAD SWITCH
	 ;
	 ; SWITCH PARAMETER PROCESSING
	 ;
	CLEAR	T4,		; WILL CONTAIN PARAMETER
	 ;
IN.SW1:	JSP	QLINK,CM.C	; PICK UP NEXT CHARACTER
	 ;
	TDNE	Z,[Y.SD]	; SWITCH DELIMETER
	JRST	IN.SW2		; YES
	 ;
	TDNN	Z,[Y.NUM]	; NUMBER ?
	JRST	IN.SW1		; NO - JUST LOOP
	 ;
	IMULI	T4,^D10		; PLACE FORCES MULTIPLICATION
	ADDI	T4,-"0"(Q3)	; ADD IN NUMERIC VALUE OF CHAR.
	 ;
	JRST	IN.SW1		; LOOP BACK
	 ;
	 ; END OF SWITCH
	 ;
IN.SW2:	SKIPN	T4		; IF T4 HAS NOT BEEN PLUGGED...
	HLRZ	T4,T3		; USE DEFAULT VALUE
	 ;
	ADDM	T4,0(T3)	; T3 ALSO HAS ADDRESS OF PARAM.
	 ;
	JRST	INIT4+1		; RESUME SWITCH SEARCH

	 ; HISTOGRAM SWITCH
	 ;
IN.SWH:	SETOM	AUTOHS##	; AUTO-HISTOGRAM FLAG
	JSP	QLINK,CM.C	; GET NEXT CHAR
	JRST	INIT4+1		; AND GO BACK

	SUBTTL	RECONFIGURATION OF STORAGE
INIT6:	CLOSE	17,		; CLOSE OUT FILE
	RELEAS	17,		; AND RELEASE IT
	HRRZ	P2,NSTACK	; SAVE LOCATION OF
	ADDI	P2,1		; COMMAND STRING
	JSP	SLINK,SETMEM	; REESTABLISH MEMORY
	 ;
	 ; MAKE COMMAND STRING AN SBLOK
	 ;
	CLEARM	GCFLD(P2)	; CLEAR GC FIELD OF SBLOK
	MOVEI	T1,5*SCHARS+4(S3) ; COMPUTE # OF ...
	IDIVI	T1,5		; WORDS IN SBLOK
	HRLI	T1,SBLOK	; COMPLETE HEADER WORD
	MOVEM	T1,BTCODE&BLENG(P2)	; HEADER COMPLETE
	 ;
	 ; MOVE SBLOK TO FLOATING STORAGE
	 ;
	HRR	Q1,SURF		; TO ADDRESS
	HRL	Q1,P2		; FROM ADDRESS
	MOVE	Q2,SURF		; SAVE SURFACE
	ADDI	SURF,0(T1)	; UPDATE SURFACE
	BLT	Q1,-1(SURF)	; MOVE	SBLOK
	 ;
	 ; CLEAR VTABLE AND STACKS
	 ;
	MOVE	T3,VTABLE	; LOAD ADDRESS OF VTABLE
	CLEARM	0(T3)		; ZERO OUT FIRST WORD
	 ;
	HRLI	T3,0(T3)	; THIS WILL BE THE FROM ADDRESS
	ADDI	T3,1		; MAKE TO ADDRESS
	MOVE	T4,GRID		; LOAD GRID ADDRESS
	BLT	T3,-1(T4)	; ZERO OUT ALL UP TO GRID
	 ;
	 ; PREPARE DESCRIPTOR FOR COMMAND STRING
	 ;
	HRLI	Q2,SDT		; STRING DT
	PUSH	STACK,Q2	; PUSH FIRST WORD
	PUSH	STACK,S3	; AND 2ND WORD
	 ;
	PUSH	STACK,Q2	; REPEAT FOR
	PUSH	STACK,S3	; &COMMAND KEYWORD
	 ;
	JUMPE	S3,INIT		; START OVER FOR CR'S

	SUBTTL	2ND PASS OVER THE COMMAND STRING

;	COMMAND STRING MINUS SWITCHES IS ON STACK.
;	INPUT FILES ARE PROCESSED FIRST SINCE THIS LEADS
;	TO FEWER DIFFICULTIES.


	JSP	TLINK,STINIT##	; INITIALIZE STREAMING
	ERROR	15		; MUST BE STRING
	 ;
	MOVE	S2,SYSCT	; SEARCH FOR ...
	MOVE	S3,[Y.EQ!Y.LA]	; INPUT ...
	JSP	TLINK,STR.##	; FILES
	TDZA	P2,P2		; FLAG RUNNOUT
	JRST	INIT21		; NORMAL BRANCH
	 ;
	PUSH	STACK,SUBJ	; RELOAD ...
	PUSH	STACK,SUBJ+1	; SUBJECT
	JSP	TLINK,STINIT	; BEGIN AT BEGINNING
	ERROR	15		; IMPOSSIBLE
	JRST	INIT22		; JOIN NORMAL PROCESSING

	 ; HERE IF = WAS DETECTED
	 ;
INIT21:	SOS	CURSOR		; GET OVER ...
	IBP	STPTR		; CHARACTER
	 ;
	MOVEI	P2,1		; FLAG CHAR.
	 ;
	 ; MERGE HERE FROM NON = CASE
	 ;
INIT22:	SETOM	IGNOS		; YES WE WNAT FILE CHECKING
	JSP	SLINK,STFILS	; PROCESS INPUT
	ERROR	12,13		; FILES
	ERROR	12,30		; COULDN'T FIND FILE
	 ;
	MOVE	S1,-1(STACK)	; LOAD STREAM
	MOVEM	S1,COMPIN	; SET AS COMPILER INPUT
	MOVEM	S1,INFILE	; AND ALOS AS DATA INPUT
	SUB	STACK,[2,,2]	; POP STACK
	 ;
	MOVSI	S1,FMT.N	; LET COMPILER ...
	MOVEM	S1,COMPIN+1	; READ LINE NOS.

	 ;
	 ; NOW PROCESS THE OUTPUT LIST
	 ;
INIT23:	MOVE	T1,TTYBLK	; LOAD DEFAULT
	MOVEM	T1,OUTF		; OUTPUT FILE
	 ;
	MOVEI	P1,OUTF-2	; POINT JUST BEFORE FIRST FILE
	JUMPE	P2,INIT25	; LEAP OVER IF NONE
	 ;
	PUSH	STACK,SUBJ	; RENEW ...
	PUSH	STACK,SUBJ+1	; STREAMING ...
	JSP	TLINK,STINIT	; FROM ...
	ERROR	15		; BEGINNING
	 ;
	MOVEI	P2,DFEXTS	; POINT TO DEFAULT EXT'S
	 ;
	 ; LOOP TO PROCESS OUTPUT FILES
	 ;
INIT24:	MOVE	T1,0(P2)	; LOAD DEFAULT EXT.
	MOVEM	T1,DFTEXT	; SET IT UP
	ADDI	P2,1		; BUMP CURRENT DEFAULT
	 ;
	JSP	TLINK,STRIO	; GET NEXT DESCR.
	ERROR	12,13		; BAD FILE
	 ;
	ADDI	P1,2		; POINT TO NEXT BIN
	 ;
	CAILE	P1,XERRF	; BEYOND LAST?
	ERROR	12,14		; YES - GIVE MESSAGE
	 ;
	SUB	STACK,[2,,2]	; POP STACK
	SKIPE	T1,1(STACK)	; GET RETURNED IOBLOK
	MOVEM	T1,0(P1)	; BUT USE ONLY IF NONZERO
	 ;
	CAIE	Z,"="		; LOOK FOR ASSIGNMENT CHAR
	CAIN	Z,"_"		; AND IF FOUND
	JRST	INIT25		; TAKE THIS BRANCH
	 ;
	JRST	INIT24		; GET NEXT FILE

	 ; DEFAULT EXTENSIONS
	 ;
DFEXTS:	SIXBIT	/LST/	; FILE 1
	SIXBIT	/LST/		; LISTING FILE
	EXP	0		; ERROR FILE

INIT25:	CLEARM	DFTEXT		; DONE WITH SETTING UP IO
	 ;
	 ; IF /H SWITCH WAS SET ESTABLISH A LISTF FILE ANYWAY
	 ;
	SKIPE	AUTOHS		; TEST SWITCH
	SKIPE	LISTF		; IF SWITCH OFF OR LISTF THERE
	JRST	INIT29		; TAKE THIS BRANCH
	 ;
	JSP	QLINK,CLRFSV	; CLEAR OUT THE VARS.
	MOVSI	S2,'DSK'	; SET
	MOVEM	S2,DEVICE	; VARIOUS
	MOVE	S2,JOBNO6	; PAR-
	HRRI	S2,'HST'	;
	MOVEM	S2,NAME		; AMETERS
	MOVSI	S2,'TMP'	; AND
	MOVEM	S2,EXT		; GO
	JSP	TLINK,MAKEIO	; CREATE DSK:TMP.LST
	ERROR	15
	POP	STACK,LISTF+1	; MAKE
	POP	STACK,LISTF	; THE LISTING FILE

	 ; ESTABLISHING DEFAULT ASSOCIATIONS FOR
	 ;		 INPUT & OUTPUT


INIT29:	PUSH	STACK,SYSTR	; STRING
	PUSH	STACK,S.INP##	; 'INPUT'
	 ;
	PUSH	STACK,INFILE	; IO
	PUSH	STACK,[0]	; DESCRIPTOR
	 ;
	MOVE	Z,[IABLOK,,TVIN] ; TELL IT INPUT
	JSP	SLINK,IOASSN	; MAKE THE CALL


	PUSH	STACK,SYSTR	; STRING
	PUSH	STACK,S.OUT##	; 'OUTPUT'
	 ;
	PUSH	STACK,OUTF	; IO
	PUSH	STACK,[0]	 ; DESCRIPTOR
	 ;
	MOVE	Z,[OABLOK,,TVOUT] ; TELL IT OUTPUT
	JSP	SLINK,IOASSN	; MAKE THE CALL
	
	 ; IO ASSOCIATIONS FOR TTY
	 ;
	PUSH	STACK,SYSTR	; STRING
	PUSH	STACK,S.TTY##	; 'TTY'
	PUSH	STACK,TTYBLK	; IOBLOK
	PUSH	STACK,[0]	; FOR TTY
	CLEAR	Z,		; NO CHECK NEEDED
	JSP	SLINK,CVTSIO	; MAKE A STREAM OUT OF IT
	ERROR	15		; THIS CAN'T FAIL
	ERROR	15		; THIS CAN'T FAIL EITHER
	MOVE	Z,[IABLOK,,TVIN] ; TELL IT INPUT
	JSP	SLINK,IOASSN	; MAKE THE CALL
	 ;
	PUSH	STACK,SYSTR	; STRING
	PUSH	STACK,S.TTY##	; 'TTY'
	PUSH	STACK,TTYBLK	; IOBLOK
	PUSH	STACK,[0] 	; FOR TTY
	MOVN	Z,[OABLOK,,TVOUT]	; TELL IT OUTPUT
	JSP	SLINK,IOASSN	; MAKE THE CALL
	 ;
	JRST	ISTART##	; LET INT HAVE CONTROL


	 ; AFTER THE PROGRAM IS DONE, CONTROL COMES HERE


CLOSIO::MOVSI	Z,(CLOSE)	; LOAD UP A CLOSE
	MOVSI	Q1,(RELEAS)	; AND LOAD UP A RELEASE
	MOVSI	Q3,(1B12)	; LOAD A 1 IN THE AC FIELD
	MOVEI	Q2,20		; # OF CHANS
CLOSLP:	 ;
	XCT	Z		; DO A CLOSE
	ADD	Z,Q3		; DO THE NEXT CHAN
	 ;
	XCT	Q1		; THEN RELEASE IT
	ADD	Q1,Q3		; INCREMENT FOR NEXT
	 ;
	SOJG	Q2,CLOSLP	; LOOP FOR MORE
	 ;
	 ; NOW GO BACK OR EXIT
	 ;
	RELOC
RSFLAG:	BLOCK	1	; RESTART FLAG (FROM EXIT)
	RELOC
	 ;
	SKIPN	RSFLAG		; DID HE RESTART HIMSELF
	JRST	INIT		; NO - GIVE A STAR
	 ;
	CALLI	0,12		; GIVE AN EXIT

	SUBTTL	STORAGE CONTROL

;	STORAGE IS ORDERED AS FOLLOWS:
;	FID - FIXED IMPURE DATA
;	AID - ADJUSTABLE IMPURE DATA
;		VTABLE - VARIABLE BLOCK TABLE
;		STACKS
;			NAME STACK
;			HISTORY STACK
;			SYSTEM STACK
;	GRID - GROWING STORAGE
;	FLID - FLOATING STORAGE

	 ; THE FOLLOWING PARAMETERS MAY BE SET BY SWITCHES
	 ;
	RELOC
S.PAR:	BLOCK	1		; STACKS
V.PAR:	BLOCK	1		; VARIABLE TABLE
C.PAR:	BLOCK	1		; CORE
	RELOC

	 ; THE FOLLOWING TABLE GIVES EXCESS PERCENTAGES
	 ; AND MINIMUM VALUES.
	 ;
EMTBL:	RADIX	10
EM.VT:	XWD	14,37		; VARIABLE BLOCK TABLE
EM.ST:	XWD	10,550		; STACKS
EM.GR:	XWD	20,550		; GROWING REGION
EM.FL:	XWD	56,550		; FLOATING REGION

	 ; THE STACK BREAK-DOWN FOLLOWS
	 ;
	SS%==60		; SYSTEM STACK
	HS%==25		; HISTORY STACK
	NS%==15		; NAME STACK

	RADIX	8

;	JSP	TLINK,SETMEM
;	RETURN
;
;	WILL SET UP MEMORY INITIALIZING
;	VARIABLES LIKE SURF, CEIL, ETC.	AFTER THIS
;	CALL THE AID, GRID AND FLID REGION WILL BE
;	READY TO USE.
;
;	THROUGH IT ALL THE AID AND FLID REGIONS ARE
;	LEFT UNDISTURBED. AN ENTRY IS MADE IN THE GRID
;	REGION, VIZ. AN IOBLOK FOR TTY (SETTING UP AN
;	IO DESCRIPTOR FOR XERRF. THUS ERROR N,M WILL WORK
;	AFTER SETMEM IS CALLED.

	 ; THE SIZES OF THE VARIOUS REGIONS ARE
	 ; COMPUTED IN REGISTERS. AS FOLLOWS
	 ; VTABLE (T2), STACKS(T3), GRID(T4) AND FLID(Q1)
	 ;
SETMEM:	SKIPN	T2,V.PAR	; USE V PARAMETER FOR VTABLE
	HRRZ	T2,EM.VT	; ELSE USE MINIMUM SIZE
	 ;
	SKIPN	T3,S.PAR	; USE S PARAMETER FOR STACKS
	HRRZ	T3,EM.ST	; ELSE USE DEFAULT SIZE
	CAIGE	T3,^D256	; BUT IF LESS THAN 256
	IMULI	T3,2000		; HE MUST MEAN K
	 ;
	HRRZ	T4,EM.GR	; DEFAULT SIZE OF GRID
	 ;
	HRRZ	Q1,EM.FL	; DEFAULT SIZE OF FLID
	 ;

	 ; REGISTERS NOW CONTAIN MINIMUM VALUES
	 ; WHAT TO DO WITH THE EXCESS?
	 ; FIRST COMPUTE TOTAL
	 ;
	MOVEI	Q2,1(T2)	; LOAD VTBL SIZE
	ADD	Q2,T3		; ADD STACK SIZE
	ADD	Q2,T4		; ADD GRID SIZE
	ADD	Q2,Q1		; ADD FLID SIZE
	MOVEM	Q2,IGNOT	; REQUIRED CORE TO IGNOT
	 ;
	MOVE	Q3,C.PAR	; LOAD THE C PARAMETER
	CAIG	Q3,^D256	; IF LESS THAN 256 ...
	IMULI	Q3,2000		; USE K
	 ;
	 ; IF Q3 IS GREATER THAN Q2 DISTRIBUTE EXCESS
	 ;
	CAMG	Q3,Q2		; GREATER?
	JRST	SETMM1		; NO - USE WHAT WE HAVE
	 ;
	MOVEM	Q3,TOOMCH##	; UP THE SLACK VALUE
	MOVEM	Q3,IGNOT	; REQUIRED CORE TO IGNOT
	SUB	Q3,Q2		; FIND EXCESS
	MOVS	Q3,Q3		; INTO LEFT FOR GREATER PRECISION
	IDIVI	Q3,^D100	; CONVERT TO % UNITS
	MOVEM	Q3,IGNOQ	; SAVE THIS QUANTITY
	 ;
	MOVEI	Q2,3		; # OF SLICES MINUS 1
	 ;
	 ; LOOP TO DISTRIBUTE EXCESS
	 ;
SETMM2:	HLRZ	Q3,EMTBL(Q2)	; LOAD EXCESS %
	IMUL	Q3,IGNOQ	; MULTIPLY BY EXCESS
	HLRZ	Q3,Q3		; MOVE TO RIGHT HALF
	ADDM	Q3,T2(Q2)	; INCREMENT
	SOJGE	Q2,SETMM2	; LOOP ON Q2
	 ;
	 ; ALLOCATE ADDITIONAL CORE IF NEEDED
	 ;
SETMM1:	MOVE	Q2,IGNOT	; GET TOTAL LENGTH OF REGION
	ADDI	Q2,AID##	; ADD LENGTH OF FID
	MOVEM	Q2,IGNOT	; SAVE TOTAL
	CORE	Q2,		; ORDER THIS MUCH CORE
	ERROR	12,10		; TOO MUCH

	 ;
	 ; ESTABLISH FLID
	 ;
	MOVE	Q2,IGNOT	; RELOAD LAST ADDRESS
	SUBI	Q2,MARGIN	; POINT JUST BELOW SKY
	MOVEM	Q2,CEIL		; ESTABLISH AS CEILING
	SUBI	Q2,-MARGIN(Q1)	; DEDUCT SIZE OF FLID
	MOVEM	Q2,FLOOR	; ESTABLISH AS FLOOR
	MOVEM	Q2,SURF		; AND SURFACE OF FLOATING REG.
	 ;
	 ; ESTABLISH GRID
	 ;
	SUB	Q2,T4		; DEDUCT SIZE OF GRID
	MOVEM	Q2,GRID		; BASE OF GRID
	MOVEM	Q2,GSURF	; ALSO SURFACE OF GRID
	 ;
	 ; ESTABLISH STACKS
	 ;
	MOVEI	Z,SS%		; % THAT IS SYSTEM STACK
	JSP	QLINK,SETSTK	; GO CREATE A STACK
	MOVEM	Z,STACK		; THIS IS SYSTEM STACK
	MOVEM	Z,STBASE	; SAVE BASE FOR GC
	 ;
	MOVEI	Z,HS%		; HISTORY STACK CUT
	JSP	QLINK,SETSTK	; GO MAKE STACK
	MOVEM	Z,HSTACK	; GO ESTABLISH HISTORY STACK
	MOVEM	Z,HSBASE	; AND BASE
	MOVEM	Z,HSR		; SET UP HISTORY STACK REG.
	 ;
	MOVEI	Z,NS%		; NAME STACK PERCENT
	JSP	QLINK,SETSTK	; GO SET UP A STACK
	MOVEM	Z,NSTACK	; ESTABLISH AS ...
	MOVEM	Z,NSBASE	; NSTACK
	 ;
	 ; ESTABLISH VTABLE
	 ;
	MOVEM	T2,LVTBL	; INSERT LENGTH OF VTABLE
	SUBI	Q2,0(T2)	; POINT TO START OF VTABLE
	MOVEM	Q2,VTABLE	; INSERT ADDRESS
	MOVEM	T2,-1(Q2)	; INSERT LENGTH AT TOP OF VTABLE

	 ; ESTABLISH TTY FOR ERRORS DURING
	 ; COMMAND STRING PROCESSING
	 ;
	RELOC
TTYBLK:	BLOCK	1		; ADDR OF TTY IOBLOK
	RELOC
	 ;
	CLEARM	IOBLKS		; START CHAIN ANEW
	CLEARM	TTYBLK		; ZERO OUT OLD BLOK
	 ;
	JSP	QLINK,CLRFSV	; CLEAR VARIABLES
	MOVSI	S2,'TTY'	; SET ...
	MOVEM	S2,DEVICE	; DEVICE
	 ;
	JSP	TLINK,MAKEIO	; MAKE THE FILE
	ERROR	15		; THIS CAN'T HAPPEN
	 ;
	POP	STACK,Z		; POP JUNK
	POP	STACK,T4	; POP IOBLOK ADDRESS
	 ;
	MOVEM	T4,TTYBLK	; ESTABLISH AS TTY
	MOVEM	T4,XERRF	; AND DEFAULT ERROR FILE
	 ;
	AOS	IOMODE(T4)	; INSERT ASCII MODE
	MOVEI	Z,-1		; SET
	HRLM	Z,IOTTY(T4)	; FLAG INDICATING TTY
	 ;
	JRST	0(SLINK)	; RETURN

;	SETSTK - USED BY SETMEM TO SET UP A STACK POINTER
;
; CALLING SEQUENCE:
;	LOAD Z WITH PERCENTAGE OF TOTAL STACK LENGTH
;	Q2 POINTS JUST NORTH OF THE STACK
;	T3 CONTAINS TOTAL ALLOTMENT FOR STACKS
;	JSP	QLINK,SETSTK
;	RETURN - Z WILL CONTAIN CORRECT VALUE
;		- Q2 IS UPDATED

SETSTK:	IMUL	Z,T3		; MULTIPLY % BY LENGTH
	MOVE	Q3,Z		; MOVE TO AVOID CLOBBERING REG. 1
	IDIVI	Q3,^D100	; DIVIDE TO OBTAIN LENGTH
	 ;
	MOVN	Z,Q3		; NEED NEG. OF LENGTH
	HRL	Z,Z		; TO Z
	 ;
	SUBI	Q2,0(Q3)	; UPDATE Q2
	HRRI	Z,-1(Q2)	; AND POINT TO BASE - 1
	 ;
	JRST	0(QLINK)	; RETURN

;	CM.C - COMMAND CHARACTER, READ A
;
; CALLING SEQUENCE:
;	JSP	QLINK,CM.C
;	RETURN - Q3 CONTAINS NON ZERO CHARACTER
;		 - Z CONTAINS MASK FROM SYSCT

CM.C:	JUMPE	P1,CM.C2	; JUMP IF TTY INPUT
	SOSGE	IGNOS+2		; DECREMENT THE BUFFER COUNT
	JRST	CM.C3		; FILL BUFFER IF EMPTY
	ILDB	Q3,IGNOS+1	; RETRIEVE NEXT BYTE FROM BUFFER
	 ;
	 ; HERE AFTER TTY INPUT OF CHARACTER
	 ;
CM.C1:	JUMPE	Q3,CM.C		; IGNORES 0'S
	 ;
	MOVE	Q2,SYSCT	; LOAD ADDRESS OF CHAR. TABLE
	ADDI	Q2,CTBITS(Q3)	; POINT TO MASK
	MOVE	Z,0(Q2)		; LOAD Z WITH MASK
	 ;
	JRST	0(QLINK)	; RETURN

	 ; TTY IN
	 ;
CM.C2:	INCHWL	Q3		; LOAD CHAR.
	JRST	CM.C1		; JOIN PROCESSING
	
	 ; HERE TO FILL BUFFER IF EMPTY
	 ;
CM.C3:	IN	17,		; INPUT A BUFFER
	JRST	CM.C		; NORMAL
	 ;
	MOVEI	Q3,12		; LINEFEED IF EOF
	GETSTS	17,Q2		; TEST FOR ...
	TRNE	Q2,1B22		; END-OF-FILE
	JRST	CM.C1		; YES, EOF
	ERROR	12,		; NO - SERIOUS ERROR

	SUBTTL P (PRIMARY) ROUTINES FOR I/O

;	DATE() - MM/DD/YY

;	DETACH(NAME)

;	ENDFILE(FILE-SPEC)

;	EXIT()

;	FILE(FILE-SPEC-SEQUENCE)

;	INPUT(NAME, FILE-SPEC-SEQUENCE, FORMAT)

;	OUTPUT(NAME, FILE-SPEC, FORMAT)

;	RENAME(FILE-SPEC, FILE-SPEC)

;	RESCAN()

;	REWIND(FILE-SPEC-SEQUENCE)

;	RUN(FILE-SPEC, OFFSET)

;	TIME(N)

;	DATE()

	FUNC	DATE$,1,E

DATE:	SUB	STACK,[2,,2]	; POP USELESS ARGUMENT
	CALLI	P2,14		; PLACE CALLI IN P2
	 ;
	IDIVI	P2,^D31		; DAYS ...
	AOJ	S1,		; TO S1
	MOVEM	S1,IGNOP	; SAVE DAYS
	 ;
	IDIVI	P2,^D12		; MONTHS ...
	AOJ	S1,		; TO S1
	MOVEM	S1,IGNOP+1	; SAVE
	 ;
	ADDI	P2,^D64		; ADD '64 TO PRODUCE YEARS
	 ;
	JSP	SLINK,LINE.##	; PREPARE STRING DATE
	XWD	0,5		; 5 ARGS
	XWD	IDT,IGNOP+1	; MONTH
	XWD	SDT,["/",,1]	; /
	XWD	IDT,IGNOP	; DAY
	XWD	SDT,["/",,1]	; /
	XWD	IDT,P2		; YEAR
	 ;
	JRST	1(PLINK)	; SUCCESSFUL RETURN

;	DELETE(FILE-SPEC)

	FUNC	DELET$,1,ES

	JSP	P2,FCHECK	; DOES THE FILE EXIST?
	JRST	0(PLINK)	; NO - FAIL
	 ;
	JSP	QLINK,CLRFSV	; CLEAR AN AREA
	MOVE	Q3,IOCHAN(T4)	; LOAD A CHANNEL
	IOR	Q3,[RENAME NAME] ; COMPLETE THE INSTRUCTION
	XCT	Q3		; DELETE THE FILE
	ERROR	12,16		; TELL USER IF TROUBLE DEVELOPS
	 ;
	JSP	QLINK,CLS	; RELEASE THE CHANNEL
	 ;
	JRST	RETNUL		; AND RETURN

;	DETACH(FILE-SPEC)

	FUNC	DTCH$,1,E

	JSP	TLINK,CVTNAM	; ENSURE A NAME
	ERROR.	1,62		; BAD ARG TO DETACH

	JSP	TLINK,DTCH	; CALL SERVICE ROUTINE
	JRST	RETNL1		; POP DESCR. AND RETURN NULL


;	ENDFILE (FILE-SPEC)

	FUNC	ENDFL$,1,E
	 ;
	JSP	SLINK,CVTIO	; GET THE IOBLOK
	ERROR	12,13		; BAD SPEC
	 ;
	POP	STACK,Z		; POP
	POP	STACK,T4	; ARG
	JSP	QLINK,CLS	; AND CLOSE THE FILE
	 ;
	JRST	RETNUL		; RETURN THE NULL STRING

	FUNC	EXIT$,2,ES

	JSP	TLINK,CVTINT##	; INSURE AN INTEGER
	ERROR.	1,59		; WRONG TYPE
	 ;
	POP	STACK,T1	; GET THE SECOND ARGUMENT
	POP	STACK,Z		; AND GET RID OF DATATYPE
	JUMPE	T1,EXIT1	; ZERO SECOND ARGUMENTS DO NOTHING

	 ; HERE FOR NON-ZERO SECOND ARGUMENT.  BREAK THE BACKWARDS
	 ; LINK IN THE CURRENT CODE BLOCK TO FLUSH SOME CODE.
	 ;
	MOVE	T1,ILOC##	; GET CURRENT CODE BLOCK ADDRESS
	CLEARM	LCLINK(T1)	; AND CLEAR THE LCLINK FIELD

	 ; MERGE HERE TO PROCESS THE NORMAL FIRST ARGUMENT
	 ;
EXIT1:	JSP	TLINK,CVTINT	; ENSURE AN INTEGER FIRST ARGUMENT
	ERROR.	1,59
	 ;
	JSP	SLINK,CGCOL##	; COMPLETE GC
	 ;
	JSP	QLINK,MSTIME	; SAVE TIME OFF
	MOVEM	Z,TIME.E##	; HERE
	 ;
	MOVE	Z,[1,,IGNOP]	; SAVE
	BLT	Z,IGNOP+3	; KEY REGISTERS
	 ;
	SKIPG	0(STACK)	; EXIT 1, TYPE OF EXIT?
	JRST	EXITLE		; NO, MAKE FURTHER TESTS
	 ;
	 ; EXIT(1)
	 ;
	EXIT	1,		; YES, MAKE QUICK EXIT!
	 ;
	JRST	FIREUP+1	; BACK AGAIN? GO RECOVER
		
	 ; HERE FOR EXIT(-1) AND EXIT(0)
	 ;
EXITLE:	JSP	TLINK,CLSALL	; CLOSE OUT ALL I/O
	
EXIT2:	SETOM	RSFLAG		; AVOID RECYCLING
	 ;
	 ; COMPRESS STORAGE
	 ;
	CLEARM	0(SURF)		; BEGIN TO CLEAR ...
	HRLI	Z,0(SURF)	; UNALLOCATED REGION
	HRRI	Z,1(SURF)	; SO THAT ZERO-COMPRESS
	MOVE	T1,CEIL		; IS EFFECTIVE
	BLT	Z,MARGIN(T1)	; CLEAR IT OUT
	 ;
	 ; NOW SET JOB DATA AREA
	 ;
	ADDI	T1,MARGIN	; POINT TO (CEIL)+MARGIN
	HRLM	T1,.JBCOR##	; SET JOBCOR
	 ;
	MOVEI	T1,INIT		; SET DDT
	HRLI	T1,4000		; SET PHONEY DDT HIGH
	SKIPN	.JBDDT##	; IF NECESSARY
	SETDDT	T1,		; WITH STARTING ADDRESS
	 ;
	SKIPE	0(STACK)	; WAS ARG NEGATIVE?
	JRST	EXITL		; YES
	 ;
	 ; EXIT(0)
	 ;
	EXIT			; ISSUE THE EXIT

	;-----;
	
	 ; HERE FOR RECOVERY FROM EXIT(0) AND EXIT(-1)
	 ;
FIREUP:	RESET			; RESET I/O
	 ;
	MOVE	Q1,TRFLGS	; GET THE TRAPPING FLAGS
	APRENB	Q1,		; ENABLE THE TRAPS
	 ;
	 ; HERE FOR RECOVERY FROM EXIT(1)
	 ;
	MOVE	Z,[IGNOP,,1]	; RESTORE
	BLT	Z,4		; KEY REGISTERS
	 ;
	JSP	QLINK,MSTIME	; AUGMENT ALL
	SUB	Z,TIME.E	; TIMES BY AMOUNT SPENT
	ADDM	Z,TIME.C##	; IN HIBERNATION
	ADDM	Z,TIME.S##	;
	 ;
;*** Temporary patch, must go clear .JBDDT on old save files ***
;*** So that VM DDT will work ***
;***	JRST	RETNL1		; NOW RETURN
	JRST	PAT004##	;[***] go clear .JBDDT and return

	 ; EXIT(-1)
	 ;
EXITL:	MOVEI	Z,0(SURF)	; 'TO' ADDRESS
	HRLI	Z,ADDRN		; 'FROM' ADDRESS
	BLT	Z,RNPROT(SURF)	; MOVE NUCLEUS PROTOTYPE
	 ;
	HRRM	SURF,EXRECO+1(SURF)	; SAVE RECOVERY ADDRESS
	 ;
	MOVEI	T1,EXRECO(SURF)	; STARTUP ADDRESS
	HRRM	T1,.JBSA##	; SET ENTRY POINT
	 ;
	MOVSI	P2,1		; HIGH SEG DELETE WORD
	JRST	0(SURF)		; JUMP INTO LOWER CORE

	 ; RESTART NUCLEUS
	 ;
ADDRN:	PHASE	0		; ADDRESS OF RN PROTOTYPE
	CORE	P2,		; DELETE HIGH SEGMENT
	ERROR	15
	EXIT			; AND EXIT
EXRECO:	JFCL		; NOOP
	MOVEI	SURF,.-.	; SELF-BASING INSTRUCTION
	MOVEI	P1,RNSYS(SURF)	; POINT TO SYSTEM DESIRED
	GETSEG	P1,		; PULL HIGH SEGMENT IN
	ERROR	15		; SOME SORT OF ERROR
	 ;
	HLRZ	P1,.JBVER##	; LOW SEGMENT VERSION
	HLRZ	P2,ED.VER	; HIGH SEGMENT VERSION
	CAIN	P1,0(P2)	; SAME?
	JRST	INIT		; YES
	HRROI	P1,-^D12007	; FLASH THIS ERROR
	RESET			; AND RESET IO
	JRST	INITXX		; MESSAGE
	 ;
RNSYS:	SIXBIT	/SYS/
	SIXBIT	/SNOBOL/
RNPROT:	SIXBIT	/SHR/
RNLENG=RNPROT
	DEPHASE

;	FILE(FILE-SPEC)

	FUNC	FILE$,1,ES

FILE:	SETOM	Z		; WE WANT FILES CHECKED
	JSP	SLINK,CVTSIO	; MAKE A STREAM
	JRST	0(PLINK)	; FAIL FOR BAD SPEC
	JRST	FRET1		; FAIL FOR NO FIND
	JRST	RETNL1		; SUCCEED IF ALL GOES WELL
	 ; FCHECK - FILE CHECK
	 ; CALLING SEQUENCE:
	 ;
	 ; PUSH POTENTIAL STRING ONTO STACK
	 ; JSP	P2,FCHECK
	 ; FILE-NOT-FOUND-RETURN, T4 POINTS TO IOBLOK
	 ; FILE-FOUND-RETURN - T4 POINTS TO IOBLOK
	 ;		(FILE IS LEFT OPEN)
	 ;
	 ; STACK POPPED IN ALL CASES
	 ;
FCHECK:	SKIPE	0(STACK)	; NULL STRING?
	JRST	FILE2		; NO, GO ON
	SUB	STACK,[2,,2]	; YES, POP AND
	JRST	0(P2)		; AND FAIL
	 ;
FILE2:	JSP	SLINK,CVTIO	; OBTAIN INDICATED FILE
	ERROR	13,69		; BAD ARGUMENT
	 ;
	POP	STACK,Z		; FORMAT WORD
	POP	STACK,T4	; IOBLOK POINTER
	SKIPN	T4		; WAS A FILE FOUND
	ERROR	13,69		; BAD SPEC
	 ;
	SKIPE	IOCHAN(T4)	; IS IT OPEN NOW?
	JRST	1(P2)		; YES - RETURN
	 ;
	JSP	QLINK,MODE	; DETERMINE THE MODE
	JSP	QLINK,OPN	; OPEN THE FILE
	ERROR	12,28		; NO OPEN? HIS ERROR
	 ;
	JSP	QLINK,LKP	; LOOK THE FILE UP
	JRST	FILE1		; COULDN'T FIND IT
	 ;
	 ;
	JRST	1(P2)		; AND RETURN

	 ; HERE IF THE FILE COULDN'T BE FOUND
	 ;
FILE1:	JSP	QLINK,CLS	; RELEASE THE CHANNEL
	JRST	0(P2)		; AND FAIL

;	INPUT(NAME, FILE-SPEC-SEQUENCE, FORMAT)

	FUNC	INPUT$,3,ES

	JSP	SLINK,CVTFMT	; CONVERT CHARACTERS TO BITS
	MOVEM	Z,P2		; SAVE FORMAT
	 ;
	CLEAR	Z,		; WE DON'T WANT A FILE CHECK
	JSP	SLINK,CVTSIO	; CONVERT 2ND ARG TO STREAM
	ERROR	12,13		; BAD SPECIFICATION
	ERROR	15		; CAN'T TAKE THIS ONE
	MOVEM	P2,0(STACK)	; INSERT FORMAT
	 ;
	MOVE	P2,INFILE	; INSERT
	SKIPN	-1(STACK)	; DEFAULT FILE
	MOVEM	P2,-1(STACK)	; IF NECESSARY
	 ;
	MOVE	Z,[IABLOK,,TVIN]; ARGUMENTS FOR ...
	JSP	SLINK,IOASSN	; ASSOCIATION ROUTINE
	 ;
	JRST	RETNUL		; RETURN NULL STRING

;	OUTPUT(NAME, FILE-SPEC, FORMAT)

	FUNC	OUTPT$,3,ES
	 ;
	JSP	TLINK,CVTSTR	; ENSURE 3RD ARGUMENT
	ERROR.	1,71		; IS A STRING
	 ;
	JSP	SLINK,CVTFMT	; CONVERT 3RD ARG TO FORMAT
	MOVEM	Z,P2		; SAVE RESULT IN P2
	 ;
	JSP	SLINK,CVTIO	; CONVERT 2ND ARG TO FILE
	ERROR	12,13		; BAD 2ND ARG
	MOVEM	P2,0(STACK)	; INSERT FORMAT TO COMPLETE DESCR.
	 ;
	MOVE	Z,[OABLOK,,TVOUT]	; LOAD ARGS
	 ;
	MOVE	P2,OUTF		; INSERT DEFAULT
	SKIPN	-1(STACK)	; OUTPUT FILE
	MOVEM	P2,-1(STACK)	; IF NEEDED
	JSP	SLINK,IOASSN	; FOR COMMON ASSN FUNCTION
	 ;
	JRST	RETNUL		; RETURN

;	RENAME(FILE-SPEC,FILE-SPEC)

	FUNC	RENAM$,2,ES

RENAM:	JSP	P2,FCHECK	; CHECK 2ND FILE
	JRST	FRET1		; NOT THERE? FAIL
	MOVEM	T4,IGNOP	; SAVE RETURNED VALUE
	 ;
	MOVE	Q1,-1(STACK)	; IS THE FIRST
	CAMN	Q1,NULLST	; ARGUMENT NULL?
	JRST	FRET1		; YES, FAIL
	 ;
	JSP	P2,FCHECK	; IS FIRST FILE THERE?
	JRST	RENAM1		; NO - GOOD
	JSP	QLINK,CLS	; CLOSE IT UP
	JRST	0(PLINK)	; AND FAIL
	
	 ; HERE IF FIRST FILE IS NOT THERE
	 ; AND 2ND FILE IS THERE AND OPEN
	 ;
RENAM1:	MOVE	P2,IGNOP	; OBTAIN
	MOVE	T3,IOCHAN(P2)	; CHANNEL THAT'S OPEN
	IOR	T3,[RENAME IONAME(T4)] ; OR IN INSTR
	XCT	T3		; RENAME THE FILE
	ERROR	12,3		; COULDN'T RENAME
	 ;
	MOVE	T4,P2		; PICK UP OLD BLOK
	JSP	QLINK,CLS	; AND CLOSE IT OUT
	 ;
	JRST	RETNUL		; AND RETURN

;	RESCAN()

	FUNC	RSCN$,1,ES

	RESCAN	1		; RESCAN THE INPUT LINE
	SKPINL			; IS ANYTHING THERE ?
	JRST	FRET1		; NOPE, JUST FAIL
	 ;
	SUB	STACK,[2,,2]	; PRUNE STACK
	 ;
	MOVEI	Z,^D300		; LARGEST STRING FROM TTY
	JSP	QLINK,ASBLOK##	; ALLOCATE SBLOK
	ERROR	11,3		; TOO BIG
	 ;
	PUSH	STACK,-1(STACK)	; DUPLICATE THE...
	PUSH	STACK,-1(STACK)	; STRING DESCRIPTOR
	 ;
	JSP	QLINK,CVTPTR	; CONVERT TO POINTER
	0			; NO BASING
	ERROR	15		; CAN'T FAIL
	 ;
	MOVSI	S1,-^D300	; S1 WILL HOLD CHARACTER COUNT
	MOVE	S2,SYSCT	; S2 HAS SYSTEM CHARACTER TABLE

	 ; LOOP TO MAKE THE LAST LINE TYPED A STRING BLOK
	 ;
RSCNL:	INCHWL	Q1		; INPUT A CHARACTER TO Q1
	IDPB	Q1,Z		; DEPOSIT IN SBLOK
	ADDI	Q1,CTBITS(S2)	; POINT TO ITS MASK IN SYSCT
	MOVE	Q1,0(Q1)	; AND LOAD SAID MASK
	 ;
	TDNE	Q1,[Y.CR]	; CARRIAGE RETURNS...
	JRST	RSCNL		; ARE IGNORED
	 ;
	TDNE	Q1,[Y.LD]	; LINE DELIMITER ?
	JRST	RSCNE		; YES, FINISH UP
	 ;
	AOBJN	S1,RSCNL	; INCREMENT COUNT AND LOOP
	ERROR	12,21		; STRING IS TOO LONG

	 ; HERE WHEN A TERMINATOR IS FOUND
	 ;
RSCNE:	HRRM	S1,0(STACK)	; STORE LENGTH IN DESCRIPTOR
	 ;
	MOVEI	Q2,^D14(S1)	; COMPUTE TOTAL LENGTH OF SBLOK
	IDIVI	Q2,5		; CONVERT TO WORDS
	MOVE	Q1,-1(STACK)	; GET ADDRESS OF SBLOK
	HRRZ	Q3,BLENG(Q1)	; AND GET THE CURRENT LENGTH
	HRRM	Q2,BLENG(Q1)	; STORE NEW LENGTH
	SUB	Q3,Q2		; FIND THE DIFFERENCE
	SUB	SURF,Q3		; AND PRUNE SURFACE POINTER
	 ;
	JRST	1(PLINK)	; RETURN SUCCESS

;	REWIND(FILE-SPEC-SEQWUENCE)

	FUNC	RWND$,1,E
RWND:	CLEAR	Z,		; NO FILE CHECK
	JSP	SLINK,CVTSIO	; CONVERT ARG TO STREAM
	ERROR	12,13		; BAD SYNTAX
	ERROR	15		; CAN'T FAIL THIS TEST
	 ;
	MOVE	T3,-1(STACK)	; LOAD ADDRESS OF STBLOK
	MOVEI	T2,STIOBL(T3)	; POINT TO FIRST IOBLOK
	HRRZ	T1,BLENG(T3)	; LOAD LENGTH
	ADDI	T1,0(T3)	; UPPER BOUND
	 ;
	MOVEI	S3,STIOBL	; MAKE FIRST IOBLOK
	MOVEM	S3,STCF(T3)	; THE CURRENT FILE
	 ;
	 ; LOOP TO CLOSE OUT FILES IN STREAM
	 ;
RWND1:	CAML	T2,T1		; ARE WE STILL BELOW BOUND
	JRST	RETNL1		; NO - RETURN
	 ;
	MOVE	T4,0(T2)	; MOVE IOBLOK POINTER
	JSP	QLINK,CLS	; CLOSE THE FILE
	AOJA	T2,RWND1	; KEEP LOOPING

	 ; RUN(FILE,INC)


	FUNC	RUN$,2,ES

	JSP	TLINK,CVTINT	; ENSURE AN INTEGER
	ERROR.	1,90		;
	MOVS	P2,0(STACK)	; SAVE IN P2-LEFT
	SUB	STACK,[2,,2]	; REMOVE INTEGER
	 ;
	MOVE	S1,-1(STACK)	; LOOK AT FIRST ARGUMENT
	CAMN	S1,NULLST	; COMPARE WITH NULL STRING
	ERROR	13,52		; BAD FILE SPEC
	 ;
	JSP	SLINK,CVTIO	; GET THE FILE
	ERROR	13,52		; BAD FILE SPEC
	 ;
	JSP	TLINK,CLSALL	; CLOSE ALL I/O
	 ;
	MOVEM	SURF,IGNOP	; SAVE CRITICAL
	MOVEM	STACK,IGNOP+1	; REGISTERS
	 ;
	MOVE	T4,-1(STACK)	; POINT TO RETRIEVED IOBLOK
	MOVE	Q1,IODEV(T4)	; TRANSFER
	MOVEM	Q1,IONAME-1(T4)	; DEVICE
	HRRI	P2,IONAME-1(T4)	; POINT TO GOODIES
	RUN	P2,		; ISSUE UUO
	 ;
	MOVE	SURF,IGNOP	; RESTORE
	MOVE	STACK,IGNOP+1	; CRITICAL REG.
	ERROR	12,25		; AND SIGNAL ERROR

;	TIME(N)
;	RETURNS RUNTIME IF N=0	AND ABSOLUTE TIME IF N = 1

	FUNC	TIME$,1,E
	 ;
TIME:	JSP	TLINK,CVTINT##	; ENSURE INTEGER
	ERROR.	1,91		; BAD ARG
	 ;
	SKIPE	0(STACK)	; TEST N
	JRST	TIME1		; BRANCH IF NOT 0
	 ;
	JSP	QLINK,MSTIME	; GET TIME SINCE ...
	SUB	Z,TIME.C	; END OF COMPILATION
	JRST	TIME2		; JOIN COMMON RETURN

	 ; ABSOLUTE TIME
	 ;
TIME1:	CALLI	Z,23		; ABSOLUTE TIME
	 ;
TIME2:	MOVEM	Z,0(STACK)	; RETURN ...
	JRST	1(PLINK)	; Z

	 ; TTY()

	FUNC	TTY$,1,ES

TTY:	JSP	TLINK,CVTSTR	; ENSURE A STRING
	ERROR.	1,100		; GIVE ERROR.
	 ;
	JSP	QLINK,CVTPTR	; TRY TO MAKE A PTR
	0			; NO BASING
	JRST	TTY1		; WHOOPS - NULL STRING
	 ;
	ILDB	Q1,Z		; CHECK
	CAIE	Q1,"C"		; FOR 'C'
	ERROR	13,61		; GIVE ERROR IF NOT
	 ;
	SKPINC	0		; CHECK FOR CHAR
	JRST	0(PLINK)	; NO
	JRST	RETNUL		; YES

	 ; HERE TO TEST FOR A FULL LINE
	 ;
TTY1:	SKPINL	0		; LINE?
	JRST	FRET1		; NO
	JRST	RETNL1		; YES

	SUBTTL	TYPE S (SECONDARY) UTILITIES

;

;	CVTFMT - CONVERT TO FORMAT (STRING TO BITS)

;	CVTIO - CONVERT TO IOBLOK (FROM STRING)

;	CVTSIO - CONVERT TO STREAM (OF IOBLOKS)

;	GETOCT - GET OCTAL NUMBER (FROM THE STREAM)

;	IOASSN - DO AN I/O ASSOCIATION

;	NONBLK - STREAM TO A NONBLANK

;	STFILS - STREAM FOR FILES

;	TVIN & TVOUT - TRAPPED VARIABLES FOR I/O


;	CVTFMT - CONVERTS A DESCRIPTOR TO AN INTERNAL (ONE-WORD)
;	FORMAT. THE DESCRIPTOR MAY BE STRING OR INTEGER.
;	IF INTEGER, THE VALUE IS PLACED IN THE RIGHT HALF
;	OF THE FORMAT. IF STRING, IT MAY CONSIST OF CHARACTERS
;	CHOSEN FROM THE SET 'TCN' (ASCII MODE) OR BE ONE OF
;	'BOSUD' (WORD MODE) OR SIMPLY BE ANY OTHER SINGLE
;	CHARACTER (CHARACTER PREFIX). THE LATTER
;	IS SO AS TO BE COMPATIBLE WITH SPITBOL.

	FMT.T==100	; TERMINAL CHARACTER FORMAT
	FMT.C==200	; SINGLE CHARACTER FORMAT
	FMT.N==400	; SEQUENCE NUMBERED FILE
	FMT.D==10	; DIRECT FORMATS (WORD FORMAT)

	FMT.WM==1000		; WORD MODE
	FMT.AM==FMT.T!FMT.C!FMT.N	; ASCII MODE
	FMT.LJ==2000		; LEFT JUSTIFY ON OUTPUT
	FMT.CP==4000		; CHARACTER PREFIX

;	BYTE TABLE
;	CONTAINS CONVERSION CHARACTERISTICS

	BTTBL==.-1		; ADDRESS MINUS 1 OF THIS TABLE

	FMT.B==1		; BINARY FORMAT
	XWD	"0",1		; BASE-LENGTH
	 ;
	FMT.O==2		; OCTAL FORMAT
	XWD	"0",3		; BASE - LENGTH
	 ;
	FMT.S==3!FMT.LJ		; SIXBIT FORMAT
	XWD	" ",6		; BASE - LENGTH
	 ;
	FMT.U==4!FMT.LJ		; UNSPEC FORMAT
	XWD	0,7		; BASE - LENGTH

; CALLING SEQUENCE:
;	PUSH DESCRIPTOR ONTO STACK
;	JSP	SLINK,CVTFMT
;	RETURN - DESCRIPTOR IS POPPED FROM STACK
;		(Z CONTAINS THE FORMAT)

CVTFMT::HLRZ	T2,-1(STACK)	; GET DATATYPE
	CAIE	T2,IDT		; IS IT INTEGER?
	JRST	CVTFM1		; NO, GO HANDLE STRINGS

	 ; HERE FOR AN INTEGER FORMAT
	 ;
CVTFM4:	HRRZ	Z,0(STACK)	; LIFT INTEGER TO Z
	SUB	STACK,[2,,2]	; REMOVE DESCRIPTOR
	JRST	0(SLINK)	; AND RETURN

	 ; HERE IF STRING OR SOMETHING ELSE
	 ;
CVTFM1:	JSP	TLINK,CVTSTR##	; MUST BE A STRING HERE
	ERROR.	1,71		; WRONG DATATYPE
	 ;
	HRRZ	T4,0(STACK)	; LOAD LENGTH
	JSP	QLINK,CVTPTR	; CONVERT TO POINTER
	0			; NO BASING NEEDED
	JRST	CVTFM4		; MUST BE NULL STRING
	 ;
	MOVE	Q1,T4		; SAVE ORIGINAL LENGTJ
	 ;
	 ; EXAMINE EACH CHARACTER
	 ;
	CLEAR	T1,		; FLAGS ARE ACCUMULATED HERE
	 ;
CVTFM2:	CLEAR	T2,		; FLAGS FOR THIS PASS
	 ;
	ILDB	T3,Z		; NEXT BYTE TO T3
	 ;
	CAIN	T3,"T"		; T?
	MOVSI	T2,FMT.T
	 ;
	CAIN	T3,"N"		; N?
	MOVSI	T2,FMT.N
	 ;
	CAIN	T3,"C"		; C?
	MOVSI	T2,FMT.C
	 ;
	CAIN	T3,"D"		; D?
	MOVSI	T2,FMT.D!FMT.WM
	 ;
	CAIN	T3,"B"		; B?
	MOVSI	T2,FMT.B!FMT.WM
	 ;
	CAIN	T3,"O"		; O?
	MOVSI	T2,FMT.O!FMT.WM
	 ;
	CAIN	T3,"S"		; S?
	MOVSI	T2,FMT.S!FMT.WM
	 ;
	CAIN	T3,"U"		; U?
	MOVSI	T2,FMT.U!FMT.WM
	 ;
	SKIPE	T2		; DID WE HIT ANYTHING?
	JRST	CVTFM3		; YES, GO ON
	 ;
	MOVSI	T2,FMT.CP	; SINGLE CHAR FORMAT
	HRR	T2,T3		; GET CHARACTER TOO.
	CAIE	Q1,1		; LENGTH = 1, OK
	ERROR	12,29		; BAD FORMAT
	 ;
CVTFM3:	IOR	T1,T2		; OR IN THE BITS
	SOJG	T4,CVTFM2	; CONTINUE WITH LOOP
	 ;
	 ; ON LOOP TERMINATION, CHECK COMPATIBILITY
	 ;
	MOVE	Z,T1		; LOAD RESULT
	TLNE	Z,FMT.WM!FMT.CP	; IF NOT ASCII MODE
	CAMN	T1,T2		; SEE IF THERE'S ONLY ONE
	JRST	0(SLINK)	; IF SO - RETURN
	ERROR	13,62		; ELSE BAD ARGUMENT

;	CVTIO - CONVERT A DESCRIPTOR TO AN IO DESCRIPTOR.
;	NULL STRING IMPLIES TTY.
;
; CALLING SEQUENCE:
;	PUSH DESCRIPTOR ONTO STACK
;	JSP	SLINK,CVTIO
;	FAIL		; IMPROPER SYNTAX (DESCR POPPED)
;	SUCCESS		; I/O DESCRIPTOR REPLACES ORIGINAL

CVTIO:	JSP	TLINK,CVTSTR##	; CONVERT TO STRING
	ERROR.	1,108		; BAD DATATYPE
	 ;
CVTIO1:	JSP	TLINK,STINIT##	; INITIAIZE STREAMING
	JRST	CVTIO2		; MUST BE NULL
	 ;
	JSP	TLINK,STRIO	; GO GET NEXT I/O DESCR
	JRST	0(SLINK)	; BAD VALUE
	 ;
	JUMPE	Z,1(SLINK)	; NORMAL RETURN (IF NO BREAK)
	JRST	0(SLINK)	; OTHERWISE FAIL

	 ; NULL STRING
	 ;
CVTIO2:	SUB	STACK,[2,,2]	; POP DESCRIPTOR
	PUSH	STACK,OUTF	; RETURN ...
	PUSH	STACK,OUTF+1	; OUTPUT ...
	JRST	1(SLINK)	; FILE

;	CVTSIO - CONVERT TO STREAM I/O
;	USED BY INPUT, REWIND AND IN GENERAL WHEREVER A STREAM IS
;	REQUIRED AS OPPOSED TO JUST AN IOBLOK.
;
; CALLING SEQUENCE:
;	PUSH DESCRIPTOR (STRING OR IOBLOK) ONTO STACK
;	SET Z TO -1 IF FILES SHOULD BE
;	CHECKED AND TO 0 OTHERWISE
;	JSP	SLINK,CVTSIO
;	BAD-SYNTAX (STACK POPPED)
;	FILES-NOT-PRESENT (STREAM RETURNED)
;	NORMAL RETURN (STREAM RETURNED)


CVTSIO:	MOVEM	Z,IGNOS		; SAVE FLAG
	JSP	TLINK,CVTSTR##	; MAKE SURE IT'S STRING
	JRST	CVTST3		; TRY IOBLOK
	 ;
CVTSI2:	JSP	TLINK,STINIT##	; INITIALIZE STREAMING
	JRST	CVTSI1		; MUST BE NULL STRING
	JRST	STFILS		; JOIN STREAMING
	 ;
CVTSI1:	SUB	STACK,[2,,2]	; POP NULL STRING OFF
	PUSH	STACK,INFILE	; SUBSTITUTE ...
	PUSH	STACK,[0]	; DEFAULT FILE
	JRST	2(SLINK)	; RETURN SUCCESSFULLY

	 ; HERE IF NOT A STRING
	 ;
CVTST3:	HLRZ	S2,-1(STACK)	; LOAD DT
	CAIN	S2,PDT		; PATTERN?
	JRST	CVTST4		; YES
	CAIE	S2,IODT		; I/O ?
	ERROR.	1,70		; INCORRECT DATATYPE
	 ;
	MOVEI	S2,1		; ONE IOBLOK
	JRST	STFLS2		; JOIN FILE STREAMING

	 ; THERE'S ONLY ONE GUY WHO WOULD WANT TO READ FROM
	 ; A PATTERN
	 ;
CVTST4:	SUB	STACK,[2,,2]	; POP MEANINGLESS PATTERN
	PUSH	STACK,LISTF	; AND PUSH THE
	PUSH	STACK,LISTF+1	; LISTING FILE ON
	JRST	CVTST3		; LOOP BACK AND TRY AGAIN.


;	GETOCT - WILL STREAM ACROSS BLANKS, CONVERT A
;	SEQUENCE OF DIGITS TO OCTAL AND EAT UP THE NEXT
;	BREAK CHARACTER. THE BREAK CHARACTER IS RETURNED IN Q2.
;
; CALLING SEQUENCE:
;	STINIT HAS PREVIOUSLY BEEN CALLED
;	JSP	SLINK,GETOCT
;	RETURN	; Z CONTAINS OCTAL NUMBER

	RELOC
GETOSV:	BLOCK	1	; SAVES LINKING REGISTER
	RELOC

GETOCT:	MOVEM	SLINK,GETOSV	; SAVE RETURN
	 ;
	JSP	SLINK,NONBLK	; ENSURE A NONBLANK
	JRST	STBOMB		; RUNNOUT MEANS ERROR
	 ;
	MOVE	S3,[Y.NUM]	; MASK FOR 0-9
	JSP	TLINK,STRMC##	; FIND END
	SKIPA			; NO BREAK CHAR
	 ;
	JSP	SLINK,NONBLK	; SKIP PAST BLANKS
	CLEAR	Q2,		; NO BREAK CHAR
	 ;
	MOVE	S1,Q2		; SAVE BREAK CHAR.
	 ;
	MOVE	Z,[FMT.O,,0]	; CONVERT TO ...
	JSP	TLINK,CVTDW	; OCTAL
	JRST	STBOMB		; ERROR RETURN
	 ;
	MOVE	Q2,S1		; RESTORE Q2
	JUMPE	Q2,@GETOSV	; QUICK RETURN IF NO BRK
	;
	SOS	CURSOR		; BUMP PAST ...
	IBP	STPTR		; BREAK CHAR.
	 ;
	JRST	@GETOSV		; AND RETURN

;	IOASSN - ASSOCIATES AN IO DESCRIPTOR WITH A NAME.
;	AN ASSOCIATION BLOK IS ALLOCATED (EITHER IABLOK
;	OR OABLOK) WHICH CONTAINS THE ORIGINAL VALUE
;	PLUS THE IO DESCRIPTOR.
;
; CALLING SEQUENCE:
;	LOAD Z WITH [BLOK TYPE,,TV ADDRESS]
;	PUSH NAME DESCRIPTOR
;	PUSH IO DESCRIPTOR
;	JSP	SLINK,IOASSN
;	RETURN		; BOTH DESCRIPTORS CLEARED
;			; NOTHING RETURNED
;	IF Z IS NEG. THEN PREVIOUS ASSOCIATIONS ARE NOT REMOVED

IOASSN:	MOVEM	Z,IGNOS+1	; SAVE ARGUMENT
	 ;
	SKIPG	Z		; IF ARG IS ...
	MOVN	Z,Z		; NEGATIVE
	MOVEM	Z,IGNOS		; POSIFY IT
	 ;
	 ; ALLOCATE AN ASSOCIATION BLOK
	 ;
	HRRI	Z,ALENG		; LENGTH
	JSP	QLINK,BLOK##	; ALLOCATE A BLOK
	ERROR	15		; CAN'T FAIL
	 ;
	POP	STACK,FLAS+1	; SAVE ASSOCIATION ...
	POP	STACK,FLAS	; BLOK
	 ;
	 ; INSERT GIVEN IO DESCRIPTOR
 	 ;
	MOVE	S3,FLAS		; GET ADDRESS OF BLOK
	POP	STACK,AFILE+1(S3) ; POP 2ND ...
	POP	STACK,AFILE(S3)	; ARGUMENT
	 ;
	 ; FIND ADDRESS OF NAME GIVEN BY FIRST ARG
	 ;
	JSP	TLINK,CVTNAM##	; CONVERT TO NAME
	ERROR.	1,69		; BAD FIRST ARGUMENT
	 ;
	SKIPL	IGNOS+1		; SKIP IF Z WAS NEG.
	JSP	TLINK,DTCH	; REMOVE PREVIOUS ASSNS
	 ;
	POP	STACK,Q1	; OFFSET
	POP	STACK,Q2	; + BLOK HEAD
	ADD	Q1,Q2		; = ADDRESS
	 ;
	 ; EXCHANGE VALUE IN NAME WITH TVAR
	 ;
	MOVE	Z,FLAS		; ADDRESS OF ASSOCIATION BLOK
	HRLI	Z,TVAR		; TRAPPED VARIABLE DATATYPE
	EXCH	Z,0(Q1)		; SWITCH THIS WITH FIRST VALUE WORD
	MOVEM	Z,AVAL(S3)	; OLD VALUE TO ASSN BLOK
	 ;
	HRRZ	Z,IGNOS		; TVAR ADDRESS
	EXCH	Z,1(Q1)		; INTO TVAR DESCR
	MOVEM	Z,AVAL+1(S3)	; OLD 2ND WORD TO ASSN BLOK
	 ;
	JRST	0(SLINK)	; RETURN

;	NONBLK - STREAM FOR A NONBLANK
;
; CALLING SEQUENCE:
;	JSP	SLINK,NONBLK
;	RUNNOUT
;	NORMAL

NONBLK:	MOVE	S3,[Y.BLAH]
	JSP	TLINK,STR.C##
	JRST	0(SLINK)
	JRST	1(SLINK)

;	STFILS - A ROUTINE TO PROCESS A SEQUENCE OF
;	INPUT FILES. THESE ARE COMBINED INTO A STREAM BLOK.
;
; CALLING SEQUENCE:
;	STINIT HAS PREVIOUSLY BEEN CALLED
;	SET IGNOS WITH FLAG (FILE CHECK)
;	JSP	SLINK,STFILS
;	BAD SYNTAX, STACK UNCHANGED
;	FILE NOT FOUND (STREAM RETURNED ANYWAY)
;	NORMAL

	RELOC
STBLKS:	BLOCK	1	; HEADS A LINKED LIST OF STBLOK'S
	RELOC

	 ; ENTRY POINT - PUSH IOBLOK POINTERS ONTO STACK
	 ;
STFILS:	MOVEI	S2,1		; USED TO COUNT DESCRIPTORS
	MOVEM	STACK,IGNOS+2	; SAVE STACK
	CLEARM	IGNOS+3		; FLAG TO INDICATE ERROR
	 ;
STFLS1:	JSP	TLINK,STRIO	; STREAM FOR IO DESCRIPTOR
	JRST	STFL99		; BAD FILE SPEC
	 ;
	MOVE	S3,Z		; SAVE BREAK CHAR
	SKIPN	IGNOS		; TEST FILES?
	JRST	STFLS9		; NO
	JSP	TLINK,FILECH	; CHECK THE FILE
	SETOM	IGNOS+3		; BAD FILE FLAG
	 ;
STFLS9:	MOVE	Q3,TTYBLK	; DEFAULT FILE
	SKIPN	-1(STACK)	; IS
	MOVEM	Q3,-1(STACK)	; TTY
	 ;
	JUMPE	S3,STFLS2	; NO MORE FILES
	AOJA	S2,STFLS1	; INCREMENT & LOOP

	 ; HERE WHEN STREAMING IS DONE
	 ;
STFLS2:	SKIPN	IGNOS+3		; ANY BAD FILES?
	ADDI	SLINK,1		; YES, SKIP INCREMENT
	 ;
	MOVEI	Z,STIOBL(S2)	; LENGTH OF REQUIRED STBLOK
	JSP	QLINK,GCOLG##	; ENSURE SPACE
	MOVE	T1,GSURF	; POINT TO STBLOK BEING FORMED
	 ;
	HRLI	Z,STBLOK	; INSERT TYPE OF BLOK
	MOVEM	Z,BTCODE&BLENG(T1)	; STUFF INTO BLOK HEADER
	CLEARM	GCFLD(T1)	; SATISFY GC
	 ;
	MOVEI	T2,STIOBL	; OFFSET TO FIRST IOBLOK
	MOVEM	T2,STCF(T1)	; MAKE CURRENT FILE
	MOVEI	T2,STIOBL-1(T1)	; COMPUTE ADDRESS OF ...
	ADDI	T2,0(S2)	; LAST IOBLOK
	MOVEI	S3,0(S2)	; LOAD COUNT
	 ;
STFLS3:	POP	STACK,Z		; JUNK WORD
	POP	STACK,0(T2)	; POP FILE WORD
	SUBI	T2,1		; DECREMENT FOR NEXT
	SOJG	S3,STFLS3	; COUNT DOWN ON S3

	 ;
	 ; COMPARE WITH PREVIOUS STBLOKS
	 ; T1 POINTS TO NEWLY FORMED STBLOK
	 ;
	SKIPA	T2,STBLKS	; LOAD HEAD OF LIST
	 ;
STFLS4:	MOVE	T2,STNXT(T2)	; TRY NEXT STBLOK
	JUMPE	T2,STFLS6	; END-OF-LINE
	 ;
	MOVE	Z,BLENG(T1)	; LOAD LENGTH WORD
	CAME	Z,BLENG(T2)	; COMARE LENGTH WORDS
	JRST	STFLS4		; LOOP BACK FOR MORE
	 ;
	MOVEI	S3,0(S2)	; LOAD COUNT AGAIN
	MOVEI	Q1,STIOBL(T1)	; FIRST IOBLOK OF NEW
	MOVEI	Q2,STIOBL(T2)	; FIRST IOBLOK OF OLD
	 ;
	 ; LOOP TO COMPARE STBLOK'S
	 ;
STFLS5:	MOVE	Z,0(Q1)		; COMPARE ...
	CAME	Z,0(Q2)		; IOBLOK'S
	JRST	STFLS4		; DIFFERENT - NEXT STBLOK
	 ;
	AOJ	Q1,		; BUMP IOBLOK ...
	AOJ	Q2,		; POINTERS ...
	SOJG	S3,STFLS5	; AND LOOP
	 ;
	PUSH	STACK,T2	; RETURN ...
	PUSH	STACK,[0]	; FOUND STBLOK ...
	JRST	1(SLINK)	; NORMALLY

	 ; NO MATCH WAS FOUND, LINK NEW STBLOK INTO LIST
	 ;
STFLS6:	HRRZ	Z,BLENG(T1)	; LENGTH OF STBLOK
	ADDM	Z,GSURF		; MAKE IT OFFICIAL
	 ;
	HRLI	T1,IODT		; THIS DATATYPE IS OK
	PUSH	STACK,T1	; RETURN THE ...
	PUSH	STACK,[0]	; DESCRIPTOR
	 ;
	MOVE	T2,STBLKS	; LOAD FIRST STBLOK
	MOVEM	T2,STNXT(T1)	; INSERT AS OUR NEXT
	MOVEM	T1,STBLKS	; MAKE OURS THE FIRST
	 ;
	JRST	1(SLINK)

	 ; ERROR - BAD SPECIFICATION
	 ;
STFL99:	MOVE	STACK,IGNOS+2	; RETRIEVE STACK
	JRST	0(SLINK)	; GIVE ERROR RETURN

;	TVIN AND TVOUT - ARE THE S TYPE ROUTINES
;	USED TO IMPLEMENT THE TRAPPED VARIABLES ASSOCIATED
;	WITH INPUT AND OUTPUT RESPECTIVELY.

TVIN:	JRST	TVREAD		; VALUE
	JRST	TVNAME		; NAME
	JRST	TVASGN		; ASSIGNMENT

TVOUT:	JRST	TVFTCH		; VALUE
	JRST	TVNAME		; NAME
	JRST	TVWRIT		; ASSIGNMENT

;	TVREAD - TRAPPED VARIABLE ON TOP OF STACK -
;	TO BE REPLACED BY READ-IN VALUE

TVREAD:	MOVE	S2,-1(STACK)	; ADDRESS OF ASSN BLOK
	 ;
	MOVE	T2,AFILE(S2)	; LOAD FILE WORD
	MOVE	T3,AFILE+1(S2)	; FORMAT WORD
	MOVE	S3,T3		; SAVE FORMAT WORD
	JSP	TLINK,READ	; DO THE READ
	ERROR	12,4		; INCORRECTIBLE READ
	JRST	0(SLINK)	; EOF - TAKE FAIL
	 ;
	AOS	NINS		; INCREMENT READ COUNT
	 ;
	TLNN	S3,FMT.WM	; DID WE READ IN WORD MODE?
	JRST	TVRD1		; NO - TAKE BRANCH
	 ;
	MOVE	T2,Z		; MOVE WORD FOR CONVERSION
	MOVE	Z,S3		; FORMAT
	JSP	TLINK,CVTWD	; CONVERT WORD TO DATA
	ERROR	15		; CAN'T FAIL
	JRST	TVRD2		; JUMP OFF TO INSERT VALUE

	 ; HERE IF READ WAS UNDER ASCII MODE
	 ;
TVRD1:	SKIPE	$TRIM		; WAS &TRIM SET?
	JSP	TLINK,TRIMT##	; YES - DO IT
	 ;
	 ; HERE TO PLACE VALUE IN VALUE FIELD
	 ;
TVRD2:	MOVE	S2,-3(STACK)	; POINT TO ASSN BLOK
	MOVEI	Q2,AVAL(S2)	; POINT TO VALUE FIELD
	JSP	QLINK,LOCVAL##	; POINT TO REAL VALUE FIELD
	POP	STACK,1(Q2)	; POP VALUE ...
	POP	STACK,0(Q2)	; INTO THIS FIELD
	 ;
	SUB	STACK,[2,,2]	; POP TRAPPED VARIABLE
	PUSH	STACK,0(Q2)	; PLACE VALUE ...
	PUSH	STACK,1(Q2)	; BACK INTO STACK
	JRST	1(SLINK)	; AND RETURN

TVNAME:	MOVE	S2,-1(STACK)	; GET ADDRESS OF ASSN BLOK
	SUB	STACK,[2,,2]	; POP DESCRIPTOR
	 ;
	HRLI	S2,NDT		; INSERT DATATYPE
	PUSH	STACK,S2	; THIS IS FIRST WORD
	MOVEI	S3,AVAL		; THIS IS OFFSET
	PUSH	STACK,S3	; PUSH IT
	 ;
	JRST	1(SLINK)	; AND RETURN

TVASGN:	POP	STACK,S3	; POP ...
	POP	STACK,S2	; VALUE
	 ;
	MOVE	Z,-1(STACK)	; ADDRESS OF ASSN BLOK
	HRLI	Z,VAR		; MAKE IT A VARIABLE
	PUSH	STACK,Z		; PUSH VARIABLE ...
	PUSH	STACK,[AVAL]	; ONTO STACK
	 ;
	PUSH	STACK,S2	; PUSH VALUE ...
	PUSH	STACK,S3	; BACK ON
	 ;
	JSP	TLINK,ASGNVL##	; DO THE ASSIGNMENT
	JRST	0(SLINK)	; PASS ANY ERRORS BACK
	 ;
	POP	STACK,Z		; GET RID ...
	POP	STACK,Z		; OF VARIABLE
	 ;
	JRST	1(SLINK)	; AND RETURN

TVFTCH:	MOVE	S2,-1(STACK)	; GET ADDRESS	OF BLOK
	SUB	STACK,[2,,2]	; REMOVE DESCRIPTOR
	 ;
	PUSH	STACK,AVAL(S2)	; PUSH CURRENT
	PUSH	STACK,AVAL+1(S2) ; VAL
	 ;
	JSP	TLINK,CVTVAL##	; MAKE IT A VALUE
	JRST	0(SLINK)	; PASS SUCCESS BACK
	JRST	1(SLINK)	; AND RETURN SUCCESS

TVWRIT:	SKIPN	$OUTPT		; CHECK &OUTPUT
	JRST	TVASGN		; OFF - JUST ASSIGN
	 ;
	PUSH	STACK,-1(STACK)	; DUPLICATE OBJECT...
	PUSH	STACK,-1(STACK)	; FOR ULTIMATE ASSIGNMENT
	 ;
	MOVE	S2,-5(STACK)	; ASSN BLOK PTR
	MOVE	S3,AFILE+1(S2)	; FORMAT WORD
	TLNN	S3,FMT.D	; DIRECT?
	JRST	TVWRT1		; NO -
	 ;
	JSP	TLINK,CVTNUM##	; ENSURE NUMERIC
	ERROR.	1,109		; BAD VALUE
	POP	STACK,Z		; BITS TO BE TRANSMITTED
	POP	STACK,0(STACK)	; PRUNE STACK
	JRST	TVWRT2		; JUMP TO WRITE

	 ; HERE FOR NON DIRECT WRITING
	 ;
TVWRT1:	JSP	TLINK,CVTSTR##	; CONVERT TO STRING IF POSSIBLE
	JSP	QLINK,DTNAME##	; NO - JUST USE NAME
	 ;
	TLNN	S3,FMT.WM	; WORD MODE?
	JRST	TVWRT2		; NO
	 ;
	MOVE	Z,S3		; LOAD FORMAT
	JSP	TLINK,CVTDW	; CONVERT TO WORD
	ERROR	13,64		; BAD VALUE

	 ; HERE WITH ITEM READY TO BE OUTPUT
	 ;
TVWRT2:	MOVE	T2,AFILE(S2)	; LOAD FILE WORD
	MOVE	T3,S3		; LOAD FORMAT WORD
	JSP	TLINK,WRITE	; WRITE IT OUT
	ERROR	12,5		; INCORRECTIBLE
	 ;
	AOS	NOUTS		; INCREMENT # OF WRITES
	JRST	TVASGN		; DO AN ASSIGNMENT

	SUBTTL	TYPE T (TERTIARY) I/O UTILITIES

;	CLSALL - CLOSE ALL I/O FILES

;	CVTDW - CONVERT FROM DATA TO WORD

;	CVTWD - CONVERT FROM WORD TO DATA

;	DTCH - DETACH ALL ASSOCIATIONS

;	FILECH - FILE CHECK

;	PEJECT - PAGE EJECT

;	READ

;	STRIO - STREAM FOR IO

;		MAKEIO - (ALTERNATE ENTRY FOR STRIO)

;	WRITE


	 ; CLSALL WILL CLOSE ALL FILES
	 ; CALLING SEQUENCE:
	 ;	 JSP TLINK,CLSALL
	 ;	 RETURN
	 ;
CLSALL:: HRRZ	T4,IOBLKS	; PICK UP FIRST
	 ;
CLSAL1:	JUMPE	T4,0(TLINK)	; TEST FOR DONE
	JSP	QLINK,CLS	; CLOSE IT
	HRRZ	T4,IONEXT(T4)	; GET NEXT
	JRST	CLSAL1		; LOOP BACK

;	CVTDW - CONVERT FROM DATA TO WORD.
;
; CALLING SEQUENCE -
;	PUSH DESCRIPTOR ONTO STACK
;	LOAD Z WITH FORMAT
;	JSP	TLINK,CVTDW
;	ALTERNATE RETURN - INPUT STRING TOO LONG
;	NORMAL RETURN - Z CONTAINS CONVERTED VALUE
;
;	ON THE ALTERNATE RETURN, Z WILL CONTAIN THE
;	CONVERTED REPRESENTATION OF AN INITIAL SUBSTRING
;	OF THE INPUT STRING.	STACK IS POPPED IN EITHER CASE

CVTDW::	MOVEM	TLINK,CDWSV	; SAVE RETURN POINT
	RELOC
CDWSV:	BLOCK	1		; HERE
	RELOC
	 ;
	TLNN	Z,FMT.D		; IS IT D FORMAT?
	JRST	CVTDW1		; NO - BRANCH
	 ;
	JSP	TLINK,CVTNUM	; MAKE A NUMBER OUT OF IT
	ERROR.	1,105		; FORMAT-DATATYPE INCOMPATABILITY
	 ;
	POP	STACK,Z		; THE REAL VALUE
	POP	STACK,T2	; JUNK
	 ;
	MOVE	TLINK,CDWSV	; RESTORE LINK
	JRST	1(TLINK)	; NORMAL RETURN

	 ; HERE ON ANYTHING BUT 'D' FORMAT
	 ;
CVTDW1:	JSP	QLINK,WMPROP	; SET 'BT-WORDS' FROM FORMAT
	 ;
	JSP	TLINK,CVTSTR##	; ENSURE A STRING
	ERROR.	1,106		; BAD DATATYPE
	MOVE	TLINK,CDWSV	; RESTORE TLINK
	 ;
	HRRZ	T4,0(STACK)	; LOAD LENGTH
	 ;
	JSP	QLINK,CVTPTR##	; CONVERT TO ...
	0			; POINTER
	JRST	CVTDW9		; NULL STRING EXIT
	 ;
	CLEAR	Q2,		; LENGTH RECORDED HERE
	CLEAR	T2,		; RESULT ACCUMULATED HERE

	 ;
	 ; TOP OF LOOP - WORD IS FORMED IN T3
	 ;
CVTDW2:	ILDB	T3,Z		; GET 7-BIT BYTE FROM STRING
	SUB	T3,BTBASE	; SUBTACT OFF BASE
	 ;
	SKIPGE	T3		; TOO LOW?
	ERROR	13,63		; YES
	 ;
	CAMGE	T3,BTMAX	; TOO HIGH?
	JRST	CVTDW4		; NO - 0K
	 ;
	MOVE	Q3,BTSIZE	; MAYBE ...
	CAIE	Q3,6		; SIXBIT?
	ERROR	13,63		; NO
	SUBI	T3,40		; YES, LOWER-UPPER CASE
	 ;
CVTDW4:	IDPB	T3,BTPTR	; INSERT BYTE
	 ;
	AOJ	Q2,		; INCREMENT LENGTH
	CAML	Q2,T4		; GO ON IF WE HAVE NOT EXHAUSTED STR.
	JRST	CVTDW3		; BRANCH IF DONE
	CAMGE	Q2,BTLENG	; SKIP IF WE HAVE FILLED A WORD
	JRST	CVTDW2		; OTHERWISE LOOP
	MOVE	Z,T2		; VALUE TO RETURN REGISTER
	JRST	0(TLINK)	; ALTERNATE RETURN

	 ; INPUT STRING EXHAUSTED
	 ;
CVTDW3:	MOVE	Z,T2		; MOVE VALUE TO RETURN REG.
	 ;
	SKIPE	BTLJFL		; TEST LEFT-JUSTIFY FLAG
	JRST	1(TLINK)	; ON - JUST RETURN
	 ;
	IMUL	Q2,BTSIZE	; GET LENGTH OF INFO IN BITS
	ROT	Z,0(Q2)		; SHIFT INFO INTO LOW ORDER
	 ;
	JRST	1(TLINK)	; NORMAL RETURN

	 ; HERE ON NULL STRINGS
	 ;
CVTDW9:	SUB	STACK,[2,,2]	; POP STACK
	CLEAR	Z,		; HE WANTS A 0
	JRST	1(TLINK)	; NORMAL RETURN

;	CVTWD - CONVERT WORD TO DATA (UNDER FORMAT CONTROL).
;
; CALLING SEQUENCE:
;	LOAD Z WITH FORMAT
;	LOAD T2 WITH WORD
;	JSP	TLINK,CVTWD
;	FAIL - SPARE EXIT NOT CURRENTLY TAKEN
;	SUCCESS - DESCRIPTOR RETURNED ON STSACK

CVTWD::	TLNN	Z,FMT.D		; 'D' FORMAT?
	JRST	CVTWD1		; NO
	 ;
	PUSH	STACK,[IDT,,0]	; EASY CASE -
	PUSH	STACK,T2	; MAKE INTEGER ...
	JRST	1(TLINK)	; OUT OF IT

	 ; HERE IF NOT 'D' FOMRAT
	 ;
CVTWD1:	JSP	QLINK,WMPROP	; WORD-MODE PROPERTIES
	 ;
	MOVE	Z,BTLENG	; ALLOCATE STRING ...
	JSP	QLINK,ASBLOK##	; OF APPROPRIATE LENGTH.
	ERROR	11,13		; EXCEEDED &MAXLNGTH
	 ;
	MOVE	T4,BTLENG	; TRANSFER LENGTH ...
	MOVEM	T4,0(STACK)	; INTO DESCR.
	 ;
CVTWD2:	ILDB	T3,BTPTR	; EXTRACT BYTE FROM T2
	ADD	T3,BTBASE	; ADD BYTE CORR. TO 0
	IDPB	T3,Q3		; TOSS BYTE INTO STRING
	SOJG	T4,CVTWD2	; LOOP ON T4
	 ;
	JRST	1(TLINK)	; RETURN

;	DTCH - A TYPE T ROUTINE TO DETACH ALL I/O
;	ASSOCIATIONS FOR A GIVEN VARIABLE
;
; CALLING SEQUENCE:
;	PUSH NAME OF VARIABLE ONTO STACK
;	JSP 	TLINK,DTCH
;	RETURN	(STACK UNPOPPED)

DTCH:	MOVE	T2,-1(STACK)	; GET ADDRESS ...
	ADD	T2,0(STACK)	; OF VALUE DESCRIPTOR
	 ;
	 ; HERE AFTER DESCRIPTOR HAS BEEN REPLACED
	 ;
DTCH2:	HLRZ	T4,0(T2)	; LOAD DATATYPE
	CAIE	T4,TVAR		; IS IT TRAPPED
	JRST	0(TLINK)	; NO - RETURN
	 ;
	MOVE	T4,0(T2)	; LOAD BLOK ...
	HLRZ	Q1,BTCODE(T4)	; TYPE AND TEST ...
	CAIE	Q1,IABLOK	; INPUT OR ...
	CAIN	Q1,OABLOK	; OUTPUT
	JRST	DTCH1		; YES
	 ;
	 ; NOT IO TRAP, MUST BE TRACE
	 ;
	MOVEI	T2,LHDR(T4)	; POINT TO NEW VALUE
	JRST	DTCH2		; LOOP BACK

	 ; HERE TO REMOVE ASSOCIATION
	 ;
DTCH1:	PUSH	STACK,AVAL(T4)	; TRANSFER VALUE
	PUSH	STACK,AVAL+1(T4)	; FROM ASSN BLOK
	POP	STACK,1(T2)	; BACK INTO
	POP	STACK,0(T2)	; THE VARIABLE
	JRST	DTCH2		; AND LOOP

;	FILECH - CHECKS FOR THE EXISTENCE OF AN INPUT
;	FILE.  IT THE EXT IS NULL AND THE FILE DOES NOT
;	EXIST, IT TRIES AN EXTENSION OF SNO.
;	IF THE FILE IS 0 THEN TTY IS SUPPLIED.
;	THESE THINGS ARE VALID ONLY DURING COMMAND STRING
;	EVALUATION
;
;	CALLING SEQUENCE:
;	PUSH IO DESCR. ONTO STACK
;	JSP	TLINK,FILECH
;	ERROR - FILE DOES NOT EXIST
;	NORMAL RETURN, STACK UNPOPPED

FILECH:	MOVE	T4,-1(STACK)	; LOAD IOBLOK
	JUMPE	T4,1(TLINK)	; RETURN IF FILE IS NULL
	 ;
	SKIPE	IOFLGS(T4)	; CHECK IF BUFFERS EXIST
	JRST	1(TLINK)	; YES - RETURN
	 ;
	MOVE	Z,0(STACK)	; COMPUTE ...
	JSP	QLINK,MODE	; MODE
	 ;
	JSP	QLINK,OPN	; OPEN THE FILE
	ERROR	12,23		; CAN'T OPEN
	 ;
FILCH2:	JSP	QLINK,LKP	; LOOK THE FILE UP
	JRST	FILCH1		; COULDN'T FIND FILE
	 ;
FILCH4:	JSP	QLINK,CLS	; MIGHT AS WELL CLOSE IT
	 ;
	JRST	1(TLINK)	; AND RETURN

	 ; HERE IF WE COULDN'T LOCATE THE FILE AS GIVEN
	 ;
FILCH1:	SKIPN	IOEXT(T4)	; NULL EXTENSION
	SKIPE	COMPIN		; TRY 'SNO' ONLY IF COMPIN IS 0
	SOJA	TLINK,FILCH4	; GO BACK AND FAIL
	 ;
	MOVSI	Q1,'SNO'	; TRY AN EXTENSION OF 'SNO'
	MOVEM	Q1,IOEXT(T4)	; PLACE THIS IN IOBLOK
	 ;
	JRST	FILCH2		; TRY AGAIN
	

;	PEJECT - GENERAL UTILITY TO EJECT A PAGE
;
; CALLING SEQUENCE:
;	LOAD T2 WITH FILE WRD
;	LOAD T3 WITH FORMAT WORD
;	JSP 	TLINK,PEJECT
;	ERROR
;	NORMAL - STACK UNCHANGED


PEJECT::MOVSI	T3,FMT.C	; SINGLE CHAR. FORMAT
	PUSH	STACK,$ALPHA	; SEND ...
	PUSH	STACK,[14,,1]	; FORM-FEED ...
	JRST	WRITE		; TREAT LIKE A WRITE

;	READ - READS A RECORD (OR A CHARACTER, OR A WORD)
;	FROM A STREAM ACCORDING TO A FORMAT.
;
; CALLING SEQUENCE:
;	LOAD T2 WITH POINTER TO STREAM
;	LOAD T3 WITH FORMAT
;	JSP	TLINK,READ
;	ERROR
;	END-OF-FILE
;	NORMAL
;
;	ON NORMAL RETURN EITHER A 36-BIT WORD IS RETURNED IN
;	Z (WORD MODE FORMAT) OR A STRING IS RETURNED ON THE STACK.
;	IN ASCII MODE (NON C FORMAT) Z IS SET WITH FLAGS
;	F.FLG IF A FORM FEED WAS ENCOUNTERED.
;	N.FLG IF THE LINE WAS SEQUENCE NUMBERED

	 ; ENTRY POINT
	 ;
READ::	JUMPL	T3,1(TLINK)	; END-OF-FILE FLAG
	 ;
	TLNE	T3,FMT.CP	; CHARACTER-PREFIX FORMAT?
	CLEAR	T3,		; YES - IGNORE FORMAT ON INPUT
	 ;
	MOVE	T4,STCF(T2)	; CURRENT FILE OFFSET
	HRRZ	Q1,BLENG(T2)	; GET LENGTH OF BLOK
	CAML	T4,Q1		; IS CURRENT FILE WITHIN BOUNDS?
	JRST	1(TLINK)	; NO - END-OF-FILE
	 ;
	ADDI	T4,0(T2)	; POINT TO POINTER
	MOVE	T4,0(T4)	; LOAD IOBLOK POINTER
	 ;
READ1:	CAMN	T4,TTYBLK	; IS IT TTY?
	JRST	RDTTY		; YES - TRANSFER BEYOND READ6
	 ;
	MOVE	Q1,IOFLGS(T4)	; GET FLAGS
	TLNE	Q1,IOINFL	; ALREADY OPEN FOR INPUT?
	JRST	READ2		; YES
	 ;
	 ; PREPARE FILE FOR READING
	 ;
READ1A:	JSP	QLINK,CLS	; CLOSE FILE IN CASE
	;
	MOVE	Z,T3		; FORMAT WORD
	JSP	QLINK,MODE	; MODE TO REG Z
	 ;
	JSP	QLINK,OPN	; OPEN THE FILE
	ERROR	12,23		; COULDN'T OPEN
	 ;
	JSP	QLINK,LKP	; LOOK UP THE FILE
	ERROR	12,30		; NOT FOUND
	 ;
	MOVSI	Z,IOINFL	; ALLOCATE
	JSP	QLINK,ALBUF	; INPUT BUFFERS

	 ;
	 ; ASCERTAIN MODE-FORMAT COMPATABILITY
	 ;
READ2:	MOVE	Z,T3		; CONVERT FORMAT ...
	JSP	QLINK,MODE	; TO MODE
	 ;
	CAME	Z,IOMODE(T4)	; MODES INCOMPATIBLE?
	ERROR	12,19		; YES - GIVE ERROR
	 ;
	 ; SAVE REGISTERS
	 ;
	MOVEM	T1,RDLINK	; SAVE
	MOVEM	T2,RDSTBL	; REGS.
	CLEARM	RDFLGS		; CLEAR FLAGS
	 ;
	RELOC
RDLINK:	BLOCK	1		; LINK SAVE FOR READ
RDSTBL:	BLOCK	1		; READ STREAM BLOCK
RDFLGS:	BLOCK	1		; HOLDS FLAGS
	RELOC
	 ;
	N.FLG==1
	F.FLG==2
	 ;
	 ; WORD MODE READING
	 ;
	TLNN	T3,FMT.WM	; WORD MODE?
	JRST	READ3		; NO
	 ;
	SOSGE	IOIBHD+2(T4)	; DECREMENT WORD COUNT
	JSP	QLINK,FINBUF	; FILL BUFFER IF 0
	ILDB	Z,IOIBHD+1(T4)	; EXTRACT WORD
	 ;
	JRST	2(TLINK)	; NORMAL RETURN

	 ; 'C' FORMAT
	 ;
READ3:	TLNN	T3,FMT.C	; 'C' FORMAT?
	JRST	READ4		; NO
	 ;
	HRRZ	Q2,IOLAST(T4)	; GET LAST CHAR
	HLRM	Q2,IOLAST(T4)	; SET TO 0
	JRST	READ3B		; ENTER WITHIN
	 ;
READ3A:	SOSGE	IOIBHD+2(T4)	; DECREMENT CHAR. COUNT
	JSP	QLINK,FINBUF	; FILL BUFFER ON 0 COUNT
	ILDB	Q2,IOIBHD+1(T4)	; GET NEXT BYTE
READ3B:	JUMPE	Q2,READ3A	; REPEAT IF 0
	 ;
	CAIE	Q2,32		; ^Z ?
	JRST	READ3C		; NO - GO AROUND
	SKIPGE	IOTTY(T4)	; TTY?
	JRST	FINBU1		; YES - EOF
	 ;
	 ;	HERE FROM TTY 'C' FORMAT
	 ;
READ3C:	MOVS	Q2,Q2		; CHAR TO LEFT HALF
	HRRI	Q2,1		; ONE TO RIGHT HALF
	PUSH	STACK,$ALPHA	; FIRST DESCRIPTOR WORD
	PUSH	STACK,Q2	; SECOND WORD
	JRST	2(TLINK)
	 ;
	 ; ALLOCATE SBLOK
	 ;
READ4:	MOVE	Z,IOIBHD+2(T4)	; SIZE OF SBLOK
	AOJ	Z,		; MAKE IT AT LEAST 1
	MOVE	T1,Z		; SAVE THE VALUE
	 ;
	JSP	QLINK,ASBLOK	; ALLOCATE ONE
	ERROR	11,3
	 ;
	MOVEM	T1,0(STACK)	; SET LENGTH
	PUSH	STACK,-1(STACK)	; DUPLICATE ...
	PUSH	STACK,-1(STACK)	; VALUE
	 ;
	JSP	QLINK,CVTPTR	; GET POINTER
	Q3			; BASE ON Q3
	ERROR	15		; CAN'T FAIL
	 ;
	MOVEM	Z,DEPTR		; SAVE POINTER
	CLEAR	T2,		; DEPOSITION-CHAR COUNT
	 ;
	RELOC
DEPTR:	BLOCK	1		; DEPOSITION POINTER
	RELOC
	 ;
	HRRZ	Q2,IOLAST(T4)	; LOAD LAST BYTE

	 ;
	 ; PHASE I - LOOK FOR A MARKED WORD
	 ; (INDICATING SEQUENCE NUMBERING)
	 ;
	JRST	READ5A		; ENTER THE FORAY
	 ;
	 ; PHASE I LOOP - CHECK FOR SEQUENCE NUMBERING
	 ; WITHIN FILE
	 ;
READ5:	SOSGE	IOIBHD+2(T4)	; DECREMENT COUNT
	JSP	QLINK,FINBF1	; FILL BUFFER IF NECESSARY
	ILDB	Q2,IOIBHD+1(T4)	; GET NEXT BYTE
	 ;
	 ; HERE IF BYTE ALREADY EXISTS
	 ;
READ5A:	MOVE	Q1,IOIBHD+1(T4)	; GET POINTER
	LSH	Q1,-^D30	; BYTE POSITION TO Q1 RIGHT
	CAIN	Q1,^D29		; LEFT-MOST BYTE?
	JRST	READ5B		; YES
	JUMPE	Q2,READ5	; IF 0 - LOOP
	JRST	READ6		; OTHERWISE IT CAN'T BE NUMBERED

	 ; HERE IF BYTE IS FIRST BYTE OF A WORD
	 ;
READ5B:	MOVE	Q1,IOIBHD+1(T4)	; GET POINTER AGAIN
	MOVE	Q1,0(Q1)	; LOAD POINTED-TO WORD
	 ;
	MOVEI	Z,N.FLG		; SET ...
	TRNE	Q1,1		; SEQUENCE # FLAG IF ...
	IORM	Z,RDFLGS	; FILE IS SEQUENCED #ED
	 ;
	TRNE	Q1,1		; IF NOT SEQUENCED #'ED
	TLNE	T3,FMT.N	; OR IF N FORMAT
	JRST	READ6		; THEN GET THE WHOLE THING
	 ;
	 ; FILE IS SEQUENCE NUMBERED & NOT N FORMAT
	 ; IGNORE FIRST SIX CHARACTERS OF STRING
	 ;
	MOVEI	T1,6		; NUMBER OF CHARACTES TO OMIT
READ5C:	SOSGE	IOIBHD+2(T4)	; DEDUCT COUNT
	JSP	QLINK,FINBF1	; FILL BUFF IF NECESSARY
	ILDB	Q2,IOIBHD+1(T4)	; LOAD NEXT BYTE
	SOJG	T1,READ5C	; KEEP LOOPING UNTIL CHARS ARE EATEN

;	READ6 - PHASE II OF THE GENERALIZED LINE INPUT.
;	CHARACTERS ARE TRANSFERED FROM THE BUFFER TO THE
;	DEPOSITION STRING. WHILE THIS IS DONE, A COUNT IS
;	KEPT IN T2 AND THE CHARACTERS ARE EXAMINED FOR
;	AN OCCURRENCE OF A TERMINAL. Y.T1 DESCRIBES THE
;	SET OF ALL TERMINALS WHEREAS Y.T2 DESCRIBES THE
;	SUBSET OF TERMINALS CALLED BREAKS.

Y.T2==Y.ALT!Y.VM	; BREAKS ARE PRECISLY THE
			; VERTICAL MOTION CHARACTERS
Y.T1==Y.T2 ! Y.CR	; TERMINALS ARE THE BREAKS PLUS <CR>

;	A LINE ENDS WITH ANY SUCCESSION OF BREAKS AND THE LONGEST
;	SUFFIX OF TERMINALS IS CALLED THE TCC (TERMINAL
;	CONTROL CHARACTER) SEQUENCE.
;
;	ENTER WITH Q2 CONTAINING A CHARACTER. T1 HOLDS THE STATE
;	 STATE 0 :	NO TERMINAL YET
;	 STATE 1 :	THE LAST CHAR WAS A TERMINAL BUT NO BREAK YET
;	 STATE 2 :	THE LAST CHAR WAS A BREAK

READ6:	MOVEI	T1,RD.ST0	; INITIAL STATE IS 0
	CLEAR	T2,		; BYTE COUNT
	SETOM	IGNOT		; LENGTH OF MEAT
	JRST	READ6B		; JUMP INTO THE LOOP

	 ; LOOP BACK HERE FOR EACH CHAR
	 ;
READ6A:	SOSGE	IOIBHD+2(T4)	; BUMP COUNT
	JSP	QLINK,FINBF1	; REFRESH BUFFER IF 0
	ILDB	Q2,IOIBHD+1(T4)	; GET NEXT BYTE
	 ;
READ6B:	JUMPE	Q2,READ6A	; IGNORE NULL CHARS
	MOVE	Q1,SYSCT	; ADDRESS OF SYSTEM CHAR TABLE
	ADDI	Q1,CTBITS(Q2)	; POINT TO MASK
	MOVE	Q1,0(Q1)	; LOAD MASK
	JRST	@T1		; TRANSFER TO CURRENT STATE

	 ; CONTROL RETURNS EITHER HERE OR AT READ6D.
	 ; THE LATTER IS THE END-OF-RECORD LOCATION
	 ;
READ6C:	IDPB	Q2,DEPTR	; DEPOSIT BYTE
	AOJA	T2,READ6A	; BUMP COUNT AND LOOP

	 ; STATE 0
	 ;
RD.ST0:	TDNN	Q1,[Y.T1!Y.CZ]	; A TERMINAL?
	JRST	READ6C		; NO
	 ;
	MOVEM	T2,IGNOT	; SAVE CURRENT CURSOR
	MOVEI	T1,RD.ST1	; CHANGE TO STATE 1
	 ;
	 ; STATE 1
	 ;
RD.ST1:	MOVEI	Z,F.FLG		; LOAD FORM FEED FLAG
	CAIN	Q2,14		; FORM FEED?
	IORM	Z,RDFLGS	; YES - SET FORM FEED FLAG
	 ;
	SKIPL	IOTTY(T4)	; IS IT A TTY?
	JRST	RD.S1A		; NO
	 ;
	CAIN	Q2,32		; EOF?
	JRST	FINBU2		; YES
	 ;
	TDNN	Q1,[Y.T2]	; BREAK CHAR?
	JRST	RD.S1A		; NO - TREAT LIKE NORMAL CASE
	 ;
	IDPB	Q2,DEPTR	; DEPOSIT VALUE
	AOJA	T2,READ6G	; INC COUNT AND JUMP TO END GAME

RD.S1A:	TDNN	Q1,[Y.T1]	; SOME KIND OF TERMINAL?
	MOVEI	T1,RD.ST0	; NO - BACK TO STATE 0
	 ;
	TDNE	Q1,[Y.T2]	; A BREAK?
	MOVEI	T1,RD.ST2	; YES - UP TO STATE 2
	 ;
	JRST	READ6C		; GO AND DEPOSIT BYTE

	 ; STATE 2
	 ;
RD.ST2:	MOVEI	Z,F.FLG		; LOAD FORM FEED FLAG
	CAIN	Q2,14		; FORM FEED CHAR?
	IORM	Z,RDFLGS	; YES - SET FORM FEED FLAG
	 ;
	TDNE	Q1,[Y.T2]	; IS IT A BREAK?
	JRST	READ6C		; YES - OK

	 ; THE SEARCH FOR A LOGICAL RECORD IS COMPLETE
	 ; PREPARE TO RETURN.
	 ;
	 ; HERE ON END-OF-FILE WITHIN FINBF1
	 ;
READ6D:	HRRM	Q2,IOLAST(T4)	; SAVE CHAR.
	 ;
READ6G:	 ; HERE FROM TTY END-OF-LINE
	 ;
	SKIPGE	IGNOT		; IGNORE MEAT LENGTH ...
	JRST	READ6F		; IF NOT SET
	TLNN	T3,FMT.T	; 'T' FORMAT?
	MOVE	T2,IGNOT	; NO - USE SHORTER LENGTH
	 ;
READ6F:	TLNN	T3,FMT.CP	; IF CHAR PREFIX
	TRNN	T3,-1		; OR IF RIGHT SIDE 0
	JRST	READ6E		; IGNORE LENGTH FORMAT
	 ;
	CAILE	T2,0(T3)	; IF T2 IS GREATER THAN FORMAT-RIGHT
	MOVEI	T2,0(T3)	; USE FORMAT RIGHT
	 ;
READ6E:	MOVEM	T2,0(STACK)	; INSERT LENGTH IN DESCRIPTOR
	 ;
	 ; SNIP OFF EXCESS FROM SBLOK
	 ;
	MOVEI	Q2,^D14(T2)	; FIND REQUIRED ...
	IDIVI	Q2,5		; NEW LENGTH OF SBLOK TO Q2
	MOVE	Q1,-1(STACK)	; POINT TO SBLOK
	HRRZ	Q3,BLENG(Q1)	; CURRENT LENGTH
	HRRM	Q2,BLENG(Q1)	; INSERT COMPUTED LENGTH
	ADDI	SURF,0(Q2)	; ADJUST SURFACE ...
	SUBI	SURF,0(Q3)	; POINTER
	 ;
	MOVE	TLINK,RDLINK	; RESTORE LINK
	MOVE	Z,RDFLGS	; LOAD FLAGS
	JUMPN	T2,2(TLINK)	; AND RETURN (UNLESS NULL)
	 ;
	MOVE	T2,NULLST	; BUT RETURN
	MOVEM	T2,-1(STACK)	; A REAL NULL STRING
	JRST	2(TLINK)	; IF LENGTH WAS 0

	 ; HERE TO DO READING FROM THE TTY
	 ;
RDTTY:	MOVEM	T1,RDLINK	; SAVE LINK REG.
	MOVEM	T2,RDSTBL	; SAVE STREAM BLOK
	 ;
	TLNE	T3,FMT.WM	; WORD MODE?
	ERROR	12,20		; YES-INCOMPATIBLE
	 ;
	SKIPN	IOFLGS(T4)	; OPEN FOR OUTPUT?
	JRST	RDTTY1		; NO - JUMP
	 ;
	MOVE	Q3,IOCHAN(T4)	; LOAD CHANNEL #
	IOR	Q3,[OUT 0-0,0]	; FLUSH OUT ...
	XCT	Q3		; CURRENT BUFFERS
	SKIPA			; GODD FLUSH
	ERROR	12,31		; BAD FLUSH
	 ;
RDTTY1:	TLNN	T3,FMT.C	; SINGLE CHARACTER?
	JRST	RDTTYL		; NO - GET LINE
	 ;
	 ; 'C' FORMAT FOR TTY
	 ;
	INCHRW	Q2		; LOAD Q2 WITH NEXT CHAR
	CAIN	Q2,32		; CHECK FOR ^Z
	JRST	FINBU1		; YES-JOIN LATTER PART OF FINBUF
	JRST	READ3C		; JOIN OTHER 'C' PROCESSING
	 ;
	 ; NON-'C' FORMATS FOR TTY
	 ;
RDTTYL:	MOVEI	Z,^D300		; MAX. LINE WIDTH
	JSP	QLINK,ASBLOK	; ALLOCATE BLOK
	ERROR	11,3		; EXCEEDED &MAXLNGTH
	MOVEM	Q3,DEPTR	; ESTABLISH DEP POINTER
	CLEARM	IOIBHD+2(T4)	; SET TRAP
	CLEAR	Q2,		; INITIAL CHARACTER
	MOVEI	T1,RD.ST0	; INITIALIZE STATE
	CLEAR	T2,		; INITIALIZE CHARACTER COUNT
	JRST	READ6B		; JUMP TO ENTRY POINT
				; IN GENERALIZED LINE HANDLER
	

;	FINBUF AND FINBF1 SERVE TO FILL THE NEXT INPUT
;	BUFFER IF POSSIBLE.	
;	FINBUF IS USED FOR  WORDS OR SINGLE CHARACTERS
;	FINBF1 IS USED WITH STRINGS.
;
; CALLING SEQUENCE:
;	RETURN
;	JSP	QLINK,FINBUF [OR FINBF1]
;
;	NOTE THE NON-STANDARD CALLING SEQUENCE

FINBF1:	CAME	T4,TTYBLK	; TTY?
	JRST	FINBF4		; NO
	INCHWL	Q2		; GET NEXT CHAR
	CAIE	Q2,32		; ^Z ?
	JRST	READ6B		; NO - RETURN
	 ;
	JRST	FINBU2		; JOIN LATTER PART OF FINBUF
	 ;
FINBF4:	MOVE	Q2,IOCHAN(T4)	; LOAD Q2 WITH ...
	IOR	Q2,[IN 0-0]	; AN IN UUO
	XCT	Q2		; AND GO FILL BUFFERS
	JRST	FINBF2		; GOOD READ
	 ;
	 ; UNUSUAL CONDITIONS
	 ;
	MOVE	Q2,IOCHAN(T4)	; GET ...
	IOR	Q2,[GETSTS 0-0,Q3] ; STATUS ...
	XCT	Q2		; TO Q3
	 ;
	TRNN	Q3,1B22		; END-OF-FILE?
	ERROR	12,4		; NO - INCORRECTIBLE
	 ;
	JUMPN	T2,FINBF5	; JUMP IF ANY CHAR SO FAR
	JRST	FINBU2		; JOIN NEXT-FILE PROCESSING
	 ;
FINBF5:	JSP	QLINK,CLS	; FIRST CLOSE OUT THE FILE
	CLEAR	Q2,		; NULL CHAR
	MOVE	Q3,RDSTBL	; LOAD CURRENT STREAM BLOK
	AOS	STCF(Q3)	; BUMP CURRENT FILE
	JRST	READ6D		; JOIN END GAME

	 ; HERE IF BUFFER WAS FILLED PROPERLY
	 ;
	 ; WE WANT TO ALLOCATE ADDITONAL STORAGE FOR SBLOK
	 ;
FINBF2:	MOVEM	QLINK,RDQLNK	; SAVE LINK
	 ;
	RELOC
RDQLNK:	BLOCK	1		; HERE
	RELOC
	 ;
	MOVE	Q2,IOIBHD+2(T4)	; # OF CHARACTERS
	IDIVI	Q2,5		; # OF WORDS TO Q2
	MOVEI	Z,1(Q2)		; 1 EXTRA FOR GOOD MEASURE
	JSP	QLINK,GCOLF##	; ENSURE ADDITIONAL STORAGE
	 ;
	MOVE	Q2,-1(STACK)	; POINT TO SBLOK
	ADDM	Z,BLENG(Q2)	; BUMP WORD COUNT
	ADDM	Z,SURF		; ALSO BUMP SURFACE

	MOVE	Q2,IOIBHD+2(T4)	; GET CHAR. COUNT AGAIN
	ADDM	Q2,0(STACK)	; ADD TO STRING LENGTH
	MOVE	Q3,-1(STACK)	; RENEW BASE FOR DEPTR
	MOVE	QLINK,RDQLNK	; RESTOR QLINK
	JRST	-2(QLINK)	; RETURN BACKWARD
;	FINBUF - FILL INPUT BUFFER

FINBUF:	MOVE	Q2,IOCHAN(T4)	; LOAD Q2 WITH IN ...
	IOR	Q2,[IN 0]	; UUO
	XCT	Q2		; EXECUTE SAME
	JRST	-2(QLINK)	; SUCCESSFUL FILL
	 ;
	 ; UNUSUAL CONDITION ENCOUNTERED
	 ;
	MOVE	Q2,IOCHAN(T4)	; GET
	IOR	Q2,[GETSTS Q3]	; STATUS ...
	XCT	Q2		; INTO Q3
	 ;
	TRNN	Q3,1B22		; END-OF-FILE?
	ERROR	12,4		; INCORRECTIBLE
	 ;
	 ; HERE FROM ^Z ON TTY
	 ; MOVE ON TO NEXT FILE IN STREAM
	 ;
	SKIPA
FINBU2:	SUB	STACK,[2,,2]	; POP STRING
	 ;
FINBU1:	JSP	QLINK,CLS	; CLOSE FILE
	MOVE	T2,RDSTBL	; RELOAD STBLOK ADDRESS
	AOS	STCF(T2)	; INCREMENT CURR FILE
	MOVE	TLINK,RDLINK	; RELOAD LINK
	JRST	READ		; START OVER WITH NEW FILE

;	STRIO - STREAM FOR I/O
;
; CALLING SEQUENCE:
;	GIVEN THAT A STRING BEARING A FILE SPEC HAS
;	PREVIOUSLY BEEN PASSED TO STINIT...
;	JSP	TLINK,STRIO
;	ERROR
;	NORMAL - FILE DESCRIPTOR ON STACK AND
;		 Z CONTAINS BREAK CHARACTER (OR 0 ON
;		 RUNNOUT) CURSOR POSITIONED AFTER BREAK CHAR

	RELOC
	 ;
	 ; FILE SPEC VARIABLES
	 ;
DEVICE:	BLOCK	1
NAME:	BLOCK	1
EXT:	BLOCK	1
PRIV:	BLOCK	1
PPN::	BLOCK	1
	 ;
	 ; OTHER IMPURE VALUES
	 ;
TERMCH:	BLOCK	1	; TERMINAL (OR BREAK) CHAR
IOBLKS:	BLOCK	1	; POINTER TO LIST OF IOBLOKS
	 ;
	RELOC

;	MAKEIO (ALTERNATE ENTRY POINT TO STRIO)
;
; CALLING SEQUENCE:
;
;	SET FILE SPEC VARIABLES TO DESIRED STATE
;
;	JSP	TLINK,MAKEIO
;	ERROR
;	NORMAL - I/O DESCRIPTOR ON STACK, Z ZEROED

	 ; ENTRY POINTS
	 ;
STRIO:	MOVEI	T2,STIO1	; FIRST LOCATION
	PUSHR	PST		; ELEVATE STATUS
	JRST	0(T2)		; START


MAKEIO:	MOVEI	T2,STIO99	; ENTER BY BACK DOOR
	JRST	STRIO+1		; JOIN STRIO

	 ; INITIALIZE FILE-SPEC VARIABLES
	 ;
STIO1:	JSP	QLINK,CLRFSV	; CLEAR FILE-SPEC VARIABLES
	 ;
	MOVSI	S1,'DSK'	; DEFAULT ...
	MOVEM	S1,DEVICE	; DEVICE
	 ;
	 ; CHECK FOR LEADING ALPHANUMERICS
	 ;
	MOVE	S2,SYSCT	; BASE ALL STREAMING
	 ;
	JSP	SLINK,NONBLK	; ZIP ACROSS BLANKS
	JRST	STIONL		; NO FILE
	 ;
STIO2:	MOVE	S3,[Y.ALNU]	; DID WE FIND AN ...
	JSP	TLINK,CHECK##	; ALPHANUMERIC?
	JRST	STIO35		; NO
	 ;
	JSP	TLINK,STRMC##	; LOOK FOR END OF IT
	JRST	STIO3		; RUNNOUT (WILL USE NAME)
	JSP	SLINK,NONBLK	; SKIP TO NEXT NONBLANK
	JRST	STIO3		; SAME AS RUNNOUT
	 ;
	CAIE	Q2,":"		; COLON?
	JRST	STIO3		; NO
	 ;
	IBP	STPTR		; INCREMENT ...
	SOS	CURSOR		; CURSOR
	 ;
	MOVE	Z,[FMT.S!FMT.WM,,0]	; CONVERT
	JSP	TLINK,CVTDW	; TO SIXBIT
	JRST	STBOMB		; ERRONEOUS FILE SPEC
	MOVEM	Z,DEVICE	; ESTABLISH AS DEVICE
	 ;
	JSP	SLINK,NONBLK	; SEEK NEXT NON BLANK
	JRST	STIO99		; NONE MEANS DONE
	JRST	STIO2		; LOOP FOR NAME
	
	 ; HERE TO PROCESS NAME
	 ;
STIO3:	MOVE	Z,[FMT.S!FMT.WM,,0]	; CONVERT TO ...
	JSP	TLINK,CVTDW	; SIXBIT
	JFCL			; NOOP - IGNORE LONG STRING
	MOVEM	Z,NAME		; ESTABLISH AS FILE NAME
	SKIPN	FRSTNM		; FIRST NAME?
	MOVEM	Z,FRSTNM	; YES, SAVE IT
	 ;
	RELOC
FRSTNM::	BLOCK	1
	RELOC
	 ;
	SKIPG	CURSOR		; AT END?
	JRST	STIO99		; YES

	 ;
	 ; STREAM FOR AND PROCESS EXTENSION
	 ;
STIO35:	MOVE	S3,[Y.PER]	; IS NONBLANK ...
	JSP	TLINK,CHECK##	; A PERIOD?
	JRST	STIO4		; NO
	 ;
	CLEARM	DFTEXT		; YES, CLEAR DEFAULT EXTENSION
	 ;
	IBP	STPTR		; INCREMENT PAST ...
	SOSG	CURSOR		; PERIOD
	JRST	STIO99		; JUMP IF NO CHARS LEFT
	 ;
	JSP	SLINK,NONBLK	; SKIP TO FIRST NONBLANK
	JRST	STIO99		; NONE MEANS DONE
	 ;
	MOVE	S3,[Y.ALNU]	; ALPHA-
	JSP	TLINK,CHECK	; NUMERIC?
	JRST	STIO4		; NO - TRY PPN
	 ;
	JSP	TLINK,STRMC	; LOOK FOR END OF THEM
	JFCL			; ON RUNNOUT - NOOP
	 ;
	MOVE	Z,[FMT.S!FMT.WM,,0]	; CONVERT STRING
	JSP	TLINK,CVTDW	; TO SIXBIT
	JFCL			; IGNORE OVERFLOW
	HLLM	Z,EXT		; ESTABLISH AS EXTENSION
	 ;
	 ; HERE TO PROCESS PPN
	 ;
STIO4:	JSP	SLINK,NONBLK	; FIND SOMETHING?
	JRST	STIO99		; NOTHING
	 ;
	CAIE	Q2,"["		; START OF PPN?
	JRST	STIO5		; NO - TRY PRIV
	 ;
	IBP	STPTR		; GET PAST ...
	SOS	CURSOR		; THE BRACKET
	 ;
	JSP	SLINK,GETOCT	; GET OCTAL
	HRLM	Z,PPN		; THIS IS PROJECT NUMBER
	CAIE	Q2,","		; WAS BREAK A COMMA
	JRST	STBOMB	; NO
	 ;
	JSP	SLINK,GETOCT	; GET NEXT ...
	HRRM	Z,PPN		; PROGRAMMER NUMBER
	 ;
	JRST	STIO4		; BACK FOR MORE

	 ;
	 ; HERE TO PROCESS <PRIVILEGE>
	 ;
STIO5:	CAIE	Q2,"<"		; ONE OF THESE?
	JRST	STIO6		; NO
	IBP	STPTR		; GET PAST
	SOS	CURSOR		; CHARACTER
	 ;
	JSP	SLINK,GETOCT	; CONVERT TO OCTAL
	LSH	Z,^D27		; MOVE INTO FIELD 0-8
	MOVEM	Z,PRIV		; OF PRIV
	 ;
	JRST	STIO4		; LOOK FOR MORE THINGS

	 ; HERE WHEN STRANGE UNIDENTIFIED CHARACTER IS ENCOUNTERED
	 ;
STIO6:	MOVEM	Q2,TERMCH	; LAST CHAR PICKED UP
	SOS	CURSOR		; AND STEP ...
	IBP	STPTR		; PAST HIM
	 ;
	 ; MERGE HERE FROM RUNNOUT CONDITIONS
	 ; LOOK FOR IDENTICAL FILE PREVIOUSLY INSTALLED
	 ;
STIO99:	MOVE	T1,DEVICE	; LOAD ...
	MOVE	T2,NAME		; PARAMETERS ...
	MOVE	T3,EXT		; INTO ...
	MOVE	T4,PPN		; REGISTERS ...
	MOVE	Q1,PRIV		; FOR FAST COMPARISON
	 ;
	 ; CHECK FOR UFD
	 ;
	MOVS	Q2,EXT		; IS EXTENSION ...
	CAIN	Q2,'UFD'	; UFD ?
	SKIPE	NAME		; AND IS NAME NULL?
	JRST	STIO98		; THEN AVOID THIS BRANCH
	 ;
	MOVE	T2,PPN		; AND SET NAME FROM PPN
	MOVEI	T4,16		; AND ...
	GETTAB	T4,		; RETRIEVE ...
	MOVE	T4,[1,,1]	; MPD PPN
	 ;
	 ; CHECK FOR NULL FILE
	 ;
STIO98:	MOVS	Q2,DEVICE	; IF DEVICE IS ...
	CAIN	Q2,'DSK'	; DSK AND ...
	JUMPE	T2,STIONL	; NAME IS NULL, REPORT NULL FILE
	 ;
	 ; DEFAULT EXTENSION
	 ;
	CAIN	T3,0		; IS THE EXTENSION 0?
	CAIN	T2,0		; AND IS THE NAME NONZERO
	SKIPA			; THEN
	MOVE	T3,DFTEXT	; USE THE DEFAULT
	 ;
	RELOC
DFTEXT:	BLOCK	1	; CURRENT DEFAULT EXT
	RELOC
	 ;
	MOVEI	S1,IOBLKS	; POINT TO LIST OF IOBLOKS
	 ;
	 ; SPECIAL TTY TEST
	 ;
	MOVE	S2,TTYBLK	; LOAD TTYBLK
	JUMPE	S2,STIO7	; IF STILL 0, MOVE ON
	CAMN	T1,[SIXBIT /TTY/] ; IS OUR DEVICE TTY?
	JRST	STIO11		; YES - AVOID SEARCH
	 ;
	 ; TOP OF SEARCH LOOP
	 ;
STIO7:	SKIPN	S2,0(S1)	; LOAD ADDR OF NEXT IOBLOK
	JRST	STIO9		; NONE LEFT
	 ;
	CAMN	T1,IODEV(S2)	; DEVICE ?
	CAME	T2,IONAME(S2)	; NAME?
	JRST	STIO8		; JUMP IF UNSAME
	 ;
	CAMN	T3,IOEXT(S2)	; EXTENSION?
	CAME	T4,IOPPN(S2)	; PROJ-PROG
	JRST	STIO8		; JUMP IF DIFF
	 ;
	CAMN	Q1,IOPRIV(S2)	; SAME PRIV
	JRST	STIO11		; JUMP IF IDENTICAL
	 ;
STIO8:	MOVEI	S1,IONEXT(S2)	; POINT TO NEXT POINTER
	JRST	STIO7		; AND LOOP BACK

	 ; HERE IF NO MATCH WAS FOUND
	 ;
STIO9:	MOVEI	Z,IOLENG	; ENSURE ...
	JSP	QLINK,GCOLG##	; ENOUGH GROWING STORGE
	 ;
	MOVE	S2,GSURF	; INSERT ADDRESS OF ...
	MOVEM	S2,0(S1)	; FRESH BLOK
	ADDM	Z,GSURF		; UPDATE GSURF
	 ;
	HRLI	Z,IOBLOK	; INSERT CODE
	MOVEM	Z,BTCODE&BLENG(S2) ; AND LENGTH
	 ;
	CLEARM	GCFLD(S2)	; CLEAR ...
	HRRI	Z,GCFLD+1(S2)	; ALL ...
	HRLI	Z,GCFLD(S2)	; OF NEW ...
	BLT	Z,IOLENG-1(S2)	; IOBLOK
	 ;
	MOVEM	T1,IODEV(S2)	; TRANSFER
	MOVEM	T2,IONAME(S2)	; THE ...
	MOVEM	T3,IOEXT(S2)	; GOODIES
	MOVEM	T4,IOPPN(S2)	;
	MOVE	Q1,PRIV	; RELOAD PRIVILEGE
	 ;
	 ; HERE FROM DETECTION OF MATCH
	 ;
STIO11:	MOVEM	Q1,IOPRIV(S2)	; SET PRIVILEGE
	 ;
	MOVE	Q2,S2		; SAVE ADDR OF IOBLOK
	HRLI	Q2,IODT		; FILL DATATYPE FIELD
	 ;

	 ; HERE FROM NULL FILE CASE
	 ;
STIO12:	POPR	PST		; RESTORE REGS
	 ;
	PUSH	STACK,Q2	; PUSH ...
	PUSH	STACK,[0]	; DESCRIPTOR
	 ;
	MOVE	Z,TERMCH	; SET BREAK CHAR
	JRST	1(TLINK)	; AND RETURN

	 ; HERE IF NO CHARACTERS IN STRING AT ALL
	 ;
STIONL:	CLEAR	Q2,		; RETURN 0-0
	JRST	STIO12		; JOIN COMMON END
	

	 ; HERE IF THE FILE SPEC HAS POOR SYNTAX
	 ;
STBOMB:	POPR	PST		; RESTORE ALL REGS.
	JRST	0(TLINK)	; TAKE HUMBLE EXIT

;	WRITE - EXTERNAL UTILITY
;
; CALLING SEQUENCE:
;	LOAD Z WITH WORD (FOR WORD MODE)
;	PUSH STRING DESCRIPTOR ONTO STACK0(OTHERWISE)
;	LOAD T2 WITH ADDRESS OF IOBLOK
;	LOAD T3 WITH FORMAT
;	JSP	TLINK,WRITE
;	ERROR
;	NORMAL ; ARG POPPED FROM STACK

	 ; ENTRY POINT
	 ;
WRITE::	JUMPL	T3,WRIT99	; NO-OP FLAG
	JUMPE	T2,WRIT99	; OR NO FILE - RETURN
	 ;
	MOVE	T4,T2		; SET UP ARG FOR Q-CALLS
	MOVEM	Z,IGNOT		; SAVE WORD ARGUMENT
	MOVE	Q3,IOFLGS(T2)	; GET FLAGS
	TLNE	Q3,IOOUFL	; CURRENTLY OPENED OUT?
	JRST	WRIT1		; YES
	 ;
	 ; CLOSE THE FILE AND OPEN IT FOR OUTPUT
	 ;
	JSP	QLINK,CLS	; CLOSE THE FILE (IF OPENED)
	 ;
	MOVE	Z,T3		; DETERMINE THE ...
	JSP	QLINK,MODE	; M;ODE
	 ;
	JSP	QLINK,OPN	; OPEN THE FILE ACCORDING TO THE WORD
	ERROR	12,22		; COULD NOT OPEN
	 ;
	JSP	QLINK,ENTR	; ENTER THE NAME
	ERROR	12,22		; BAD OPEN
	 ;
	MOVE	Z,[IOOUFL,,0]	; ALLOCATE OUTPUT ...
	JSP	QLINK,ALBUF	; BUFFERS
	 ;
	 ; HERE FROM ALREADY-OPEN CASE
	 ;
WRIT1:	MOVE	Z,T3		; DETERMINE ...
	JSP	QLINK,MODE	; MODE
	XOR	Z,IOMODE(T4)	; COMPARE WITH CURRENT FOR ...
	TRNE	Z,10		; WORD - CHAR INCOMPATIBILITY
	ERROR	12,19		; MODE - INCOMPATIBLE
	 ;
	TLNN	T3,FMT.WM	; WORD MODE?
	JRST	WRIT2		; NO - ASCII

	 ;
	 ; WORD MODE
	 ;
	MOVE	Q2,IGNOT	; LOAD WORD FOR OUTPUT
	 ;
WRIT1A:	SOSGE	IOOBHD+2(T4)	; DECREMENT COUNT
	JSP	QLINK,EMPBUF	; EMPTY BUFFER
	IDPB	Q2,IOOBHD+1(T4)	; OUT HE GOES
	JRST	1(TLINK)	; RETURN
 	 ; ASCII OUTPUT
	 ;
WRIT2:	HRRZ	T2,0(STACK)	; GET LENGTH
	JSP	QLINK,CVTPTR	; MAKE POINTER
	0			; NO BASING
	SUB	STACK,[2,,2]	; NULL STRING
	 ;
	MOVEM	Z,EXPTR		; ESTABLISH EXTRACTION PTR
	RELOC
EXPTR:	BLOCK	1		; DEFINE EXTRACTION PTR
	RELOC
	 ;
	 ; 'C' FORMAT
	 ;
WRIT3:	TLNN	T3,FMT.C	; 'C' ?
	JRST	WRIT4		; NO - ON TO OTHER THINGS
	 ;
	JUMPE	T2,1(TLINK)	; WAS LENGTH 0?
	 ;
	MOVEI	T2,1		; MAKE SURE ITS ONE CHAR
	TLO	T3,FMT.T	; SIMULATE TERMINAL FORMAT
	JRST	WRIT6		; PROCESS LIKE NORMAL WRITE

	 ;
	 ; 'N' FORMAT
	 ;
WRIT4:	TLNN	T3,FMT.N	; 'N' FORMAT?
	JRST	WRIT5		; NO - MOVE ON
	 ;
	CAIGE	T2,6		; ENOUGH CHARACTERS?
	ERROR	12,24		; MUST BE AT LEAST 6
	 ;
	 ; LOOP FOR BYTE AT BEGINNING OF WORD
	 ;
WRIT4A:	SOSGE	IOOBHD+2(T4)	; ANOTHER LEFT?
	JSP	QLINK,EMPBUF	; EMPTY IF NECESSARY
	IBP	IOOBHD+1(T4)	; INCREMENT POINTER
	MOVE	Q3,IOOBHD+1(T4)	; LOAD POINTER
	LSH	Q3,-^D30	; POSITION OF BYTE
	CAIE	Q3,^D29		; LEFT-MOST = 29
	JRST	WRIT4A		; KEEP LOOPING IF NOT LEFT
	 ;
	 ; LEFT MOST BYTE HAS BEEN FOUND
	 ;
	CAMGE	T2,IOOBHD+2(T4)	; ENOUGH LEFT
	JRST	WRIT4B		; YES
	 ;
	CLEARM	IOOBHD+2(T4)	; PRETEND WE'VE WRITTEN ALL
	JRST	WRIT4A		; JUST LOOP


	 ; HERE WHEN WE'RE READY TO START WRITING
	 ;
WRIT4B:	MOVE	Q2,IOOBHD+1(T4)	; GET ACTUAL POINTER
	MOVEI	Z,1		; RIGHT-MOST BIT
	IORM	Z,0(Q2)		; SET BIT IN BUFFER
	 ;
	ILDB	Q2,EXPTR	; GET FIRST BYTE
	DPB	Q2,IOOBHD+1(T4)	; DEPOSIT W/O INCREMENTING
	SOJA	T2,WRIT5	; DECREMENT COUNT AND LEAP

	 ; CHARACTER PREFIX
	 ;
WRIT5:	TLNN	T3,FMT.CP	; PREFIX REQUIRED?
	JRST	WRIT6		; NO - ONWARD
	 ;
	SOSGE	IOOBHD+2(T4)	; DECREMENT COUNT
	JSP	QLINK,EMPBUF	; EMPTY BUFFER IF NECESSARY
	IDPB	T3,IOOBHD+1(T4)	; DEPOSIT BYTE
	JRST	WRIT6		; JOIN REST OF PROCESSING

	 ; BASIC WRITE LOOP
	 ;
WRIT6:	SOJL	T2,WRIT7	; LOOP ON STRING LENGTH
	SOSGE	IOOBHD+2(T4)	; DECREMENT BUFFER LENGTH
	JSP	QLINK,EMPBUF	; EMPTY BUFFER IF NECESSARY
	 ;
	ILDB	Q2,EXPTR	; GET NEXT CHAR
	IDPB	Q2,IOOBHD+1(T4) ; DEPOSIT SAME
	JRST	WRIT6		; AND LOOP

	 ; FINISHING UP
	 ;
WRIT7:	TLOE	T3,FMT.T	; TERMINAL CHARACTERS?
	JRST	WRIT9		; JUST RETURN
	 ;
	MOVE	Q2,[POINT 7,[BYTE (7)15,12]] ; POINTER TO ...
	MOVEM	Q2,EXPTR	; <CR> <LF>
	MOVEI	T2,2		; LENGTH IS 2
	JRST	WRIT6		; BACK FOR MORE WRITING

	 ; HERE TO DO FINAL RETURN
	 ;
WRIT9:	SKIPL	IOTTY(T4)	; TTY?
	JRST	1(TLINK)	; NO - JUST RETURN
	JSP	QLINK,EMPBUF	; YES, EMPTY BUFFER FIRST

	 ; QUICK RETURN
	 ;
WRIT99:	SUB	STACK,[2,,2]	; POP ARG
	JRST	1(TLINK)	; NORMAL RETURN

; EMPBUF IS CALLED ONLY FROM WITHIN WRITE
; TO EMPTY A BUFFER (AND SWITCH TO THE NEXT)
; CALLING SEQUENCE
;	RETURN
;	JSP	QLINK,EMPBUF

EMPBUF:	MOVE	Q3,IOCHAN(T4)	; LOAD CHANNEL #
	IOR	Q3,[OUT 0-0,0]	; COMPLETE THE INSTRUCTION
	XCT	Q3		; ADVANCE BUFFERS
	JRST	-2(QLINK)	; OK - EXIT
	ERROR	12,5		; OUTPUT ERROR

	SUBTTL	TYPE Q (QUATERNARY) I/O UTILITIES

;	ALBUF	ALLOCATE BUFFERS

;	CLRFSV - CLEAR FILE SPEC VARIABLES

;	CLS - CLOSE A FILE

;	ENTR - ENTER A FILE NAME

;	LKP - LOOKUP A FILE NAME

;	MODE - DETERMINE MODE FROM FORMAT

;	MSTIME - RETURN RUN TIME

;	OPN - OPEN A FILE

;	WMPROP - COMPUTE WORD MODE PROPERTIES

; ALBUF WILL ALLOCATE BUFFERS (2) FOR A FILE.
; THE FILE MUST NOT BE CURRENTLY BUFFERED (UNLESS TTY).
;
; CALLING SEQUENCE:
;	LOAD T4 WITH ADDRESS OF IOBLOK
;	LOAD Z LEFT WITH IOINFL OR IOOUFL
;	JSP	QLINK,ALBUF
;	RETURN

	RELOC
ALBFSV:	BLOCK	1	; PERMITS Q CALLS
	RELOC

ALBUF:	MOVEM	QLINK,ALBFSV	; SAVE LINK
	CAME	T4,TTYBLK	; TTY ?
	JRST	ALBUF0		; NO - JUMP
	 ;
	TLNN	Z,IOINFL	; IF ITS INPUT THEY WANT
	SKIPE	IOFLGS(T4)	; OR IF BUFFERS ARE THERE
	JRST	0(TLINK)	; RETURN IMMEDIATELY
	 ;
ALBUF0:	MOVEM	Z,IOFLGS(T4)	; SET FLAGS
	MOVEI	Q2,IOMODE(T4)	; POINT TO OPEN BLOCK
	DEVSIZ	Q2,		; GET BUFFER SIZE
	ERROR	12,28		; BAD DEVICE
	LSH	Q2,1		; DOUBLE SIZE
	ADDI	Q2,BUBITS	; ADD TO DETERMINE BLENG
	HRLI	Q2,OBBLOK	; LOOKING FOR AN OLD BUFFER
	MOVE	Q3,GRID		; POINT TO BEGINNING OF GRID

	 ;
	 ; SEARCH LOOP FOR OLD BUFFER
	 ;
ALBUF1:	CAML	Q3,GSURF	; ARE WE STILL BELOW SURFACE
	JRST	ALBUF4		; NO - MOVE ON
	 ;
	MOVEI	Q1,VARSIZ	; VARIABLE BLOCK SIZE
	MOVE	Z,BTCODE&BLENG(Q3) ; LOAD FIRST WORD
	TLNE	Z,BLOKF		; A BLOK ?
	HRRZ	Q1,Z		; YES - USE BLENG
	ADDI	Q3,0(Q1)	; INCREMENT POINTER
	CAME	Q2,Z		; IS CURRENT BLOK USEFUL
	JRST	ALBUF1		; NO - JUMP
	 ;
	SUBI	Q3,0(Q1)	; YES - FIND OLD ADDRESS
	HRRM	Q3,IOBUBL(T4)	; ESTABLISH AS BUFFER
	MOVE	Q2,Q3		; HAVE Q2 POINT TO BUBLOK
	JRST	ALBUF6		; JOIN COMMON PROCESSING
	
	 ; COULDN'T FIND AN OLD ONE
	 ;
ALBUF4:	MOVEI	Z,0(Q2)	; GET SIZE REQUIRED
	JSP	QLINK,GCOLG##	; ENSURE THIS MUCH GRID
	 ;
	MOVE	Q2,GSURF	; POINT TO NEW AREA
	HRRM	Q2,IOBUBL(T4)	; INSERT AS BUFFER
	ADDM	Z,GSURF		; BUMP SURFACE POINTER
	 ;
ALBUF6:	CLEARM	GCFLD(Q2)	; MAKE GC HAPPY
	HRLI	Z,BUBLOK	; INSERT BTCODE
	MOVEM	Z,BTCODE&BLENG(Q2) ; FILL FIRST WORD
	 ;
	 ; NOW TELL THE SYSTEM ABOUT OUR BUFFER
	 ;
ALBUF5:	MOVEI	Q3,BUBITS(Q2)	; POINT TO MEAT OF BUFFER
	HRRM	Q3,.JBFF	; INSERT FOR SYSTEM SAKE
	 ;
	MOVE	Q2,[INBUF 2]	; LOAD INSTRUCTION (INPUT)
	MOVE	Q1,IOFLGS(T4)	; GET FLAGS
	TLNE	Q1,IOOUFL	; BUT IS IT REALLY OUTPUT
	MOVE	Q2,[OUTBUF 2]	; YES
	 ;
	IOR	Q2,IOCHAN(T4)	; COMPLETE INSTRUCTION
	XCT	Q2		; EXECUTE INSTRUCTION
	JRST	@ALBFSV		; AND RETURN

;	CLRFSV - CLEAR FILE SPEC VARIABLES
;	(SEE STRIO PROLOGUE FOR DECLARATIONS)

CLRFSV:	CLEARM	DEVICE		; ZERO FIRST WORD
	MOVE	Z,[DEVICE,,NAME] ; FROM - TO
	BLT	Z,TERMCH	; BLIITT
	JRST	0(QLINK)	; RETURN

;	CLS - CLOSE A FILE. RELEASE ANY BUFFERS AND ISSUE
;	A CLOSE UUO
; CALLING SEQUENCE:
;	LOAD T4 WITH ADDRESS OF IOBLOK
;	JSP	QLINK,CLS
;	RETURN

CLS:	SKIPN	Q3,IOCHAN(T4)	; IF ALREADY CLOSED
	JRST	0(QLINK)	; RETURN
	 ;
	IOR	Q3,[CLOSE 0,0]	; COMPLETE THE UUO
	XCT	Q3		; AND EXECUTE IT
	 ;
	MOVE	Q3,IOCHAN(T4)	; LOAD CHANNEL AGAIN
	IOR	Q3,[MTAPE 0,1]	; REWIND IF ...
	XCT	Q3		; MAG TAPE
	 ;
	MOVE	Q3,IOCHAN(T4)	; CHECK
	IOR	Q3,[STATZ 0-0,740000] ; FOR
	XCT	Q3		; AN
	ERROR	12,9		; ERROR IN CLOSING
	 ;
	MOVE	Q3,IOCHAN(T4)	; NOW
	IOR	Q3,[RELEAS 0-0,0] ; RELEASE
	XCT	Q3		; IT
	 ;
	CLEARM	IOCHAN(T4)	; CLEAR CHANNEL INDICATOR
	 ;
	 ; RELEASE BUFFERS
	 ;
	SKIPN	Q3,IOBUBL(T4)	; LOAD AND TEST BUFFER
	JRST	0(QLINK)	; ALREADY 0 - JUST RETURN
	 ;
	MOVEI	Q2,OBBLOK	; OLD BUFFER CODE
	HRLM	Q2,BTCODE(Q3)	; INSERTED IN OLD BUFFER
	CLEARM	IOFLGS&IOBUBL(T4) ; ZAP OUT BUFF INDICATORS
	 ;
	JRST	0(QLINK)	; RETURN

;	ENTR - ENTER A FILE NAME IN THE DIRECTORY
;	(CALLS ENTER UUO)
;
; CALLING SEQUENCE:
;	LOAD T4 WITH IOBLOK
;	JSP	QLINK,ENTR
;	ERROR (REFLECTED ERROR)
;	RETURN
;	FILE MUST HAVE BEEN PREVIOUSLY OPENED


ENTR:	MOVE	Q3,[ENTER 0-0,NAME] ; LOAD UUO
	 ;
	 ; HERE FROM LKP
	 ;
	IOR	Q3,IOCHAN(T4)	; CHANNEL #
	 ;
	HRLI	Q2,IONAME(T4)	; FROM ADDRESS
	HRRI	Q2,NAME		; TO ADDRESS
	BLT	Q2,PPN		; TRANSFER GOODIES
	 ;
	XCT	Q3		; EXECUTE THE UUO
	JRST	0(QLINK)	; COULDN'T ENTER OR LOCATE
	JRST	1(QLINK)	; OK - COULD

;	LKP - LOOKUP A FILE
;	CALLS LOOKUP UUO
;	FILE MUST HAVE PREVIOUSLY BEEN OPENED
;
; CALLING SEQUENCE:
;	LOAD T4 WITH IOBLOK ADDR
;	JSP	QLINK,LKP
;	FAIL
;	RETURN


LKP:	MOVE	Q3,[LOOKUP 0-0,NAME] ; LOAD UUO
	JRST	ENTR+1		; JOIN ENTR PROCESSING

;	MODE - RETURNS THE I/O MODE GIVEN THE FORMAT WORD
;	OF AN I/O DESCRIPTOR.
;
; CALLING SEQUENCE:
;	LOAD Z WITH FORMAT WORD
;	JSP	QLINK,MODE
;	RETURN WITH MODE IN Z

MODE:	MOVEI	Q2,1		; ASCII MODE (TENTATIVELY)
	TLNE	Z,FMT.WM	; BUT IF WORD MODE ...
	MOVEI	Q2,13		; USE IMAGE BINARY
	 ;
	MOVE	Z,Q2		; PASS TO RESULT REG.
	JRST	0(QLINK)	; RETURN

;	MSTIME - EXTERNAL UTILITY

MSTIME::CLEAR	Z,		; CLEAR Z TO ...
	RUNTIM	Z,		; GET THE TIME
	JRST	0(QLINK)	; AND RETURN IT

;	OPN WILL OPEN A FILE ON THE NEXT AVAILABLE
;	CHANNEL. IT SHOULD NO ALREADY BE OPEN.
;
; CALLING SEQUENCE:
;	LOAD Z WITH MODE
;	LOAD T4 WITH IOBLOK ADDRESS
;	JSP	QLINK,OPN
;	ERROR (COULDN'T OPEN)
;	NORMAL

OPN:	SKIPE	IOCHAN(T4)	; ALREADY OPEN?
	JRST	1(QLINK)	; YES
	 ;
	MOVEM	Z,IOMODE(T4)	; SET THE MODE
	 ;
	MOVEI	Q3,IOIBHD(T4)	; INBUF HEADER
	HRLI	Q3,IOOBHD(T4)	; OUTBUF HEADER
	MOVEM	Q3,IOBUFS(T4)	; OUTBUF,,INBUF WORD
	 ;
	MOVE	Q3,IODEV(T4)	; DETERMINE DEVICE
	DEVCHR	Q3,		; CHARACTERISTICS
	 ;
	TRNN	Q3,200000	; IF ITS NOT ALREADY INITED?
	JRST	OPN2		; THEN LET THE OPEN OCCUR
	TLNN	Q3,200010	; ALSO IF ITS DISK OR TTY LET IT OPEN
	ERROR	12,17		; NO - CAN'T OPEN DEVICE AGAIN.
OPN2:	 ;
	CLEARM	IOLAST(T4)	; LAST CHAR READ IS VOID
	 ;
	MOVEI	Z,-1		; SETUP FOR TTY FLAG
	TLNE	Q3,10		; IS DEVICE TTY?
	HRLM	Z,IOTTY(T4)	; YES, SET FLAG
 	 ;
	 ; FIND THE NEXT AVAILABLE CHANNEL (EXCEPT 0)
	 ;
	MOVEI	Q3,1		; DENOTES CHANNEL FOUND
	 ;
OPN1:	MOVE	Q2,Q3		; COPY CHANNEL
	CAIL	Q2,20		; WITHIN RANGE OF CHANNEL #'S
	ERROR	12,15		; NO?
	 ;
	DEVCHR	Q2,		; ASK MONITOR ABOUT CHANNEL
	SKIPE	Q2		; SKIP IF AVAILABLE
	AOJA	Q3,OPN1		; TRY NEXT
	 ;
	LSH	Q3,^D23		; SHIFT NO. INTO AC POSITION
	MOVEM	Q3,IOCHAN(T4)	; REMEMBER CHANNEL
	 ;
	IOR	Q3,[OPEN IOMODE(T4)]	; COMPLETE THE UUO
	XCT	Q3		; EXECUTE THE OPEN UUO
	JRST	0(QLINK)	; COULDN'T OPEN
	JRST	1(QLINK)	; COULD OPEN

;	WMPROP - WORD MODE PROPERTIES
;
;	SETS PROPERTIES FOR CONVERSION TO TAKE PLACE. IS CALLED
;	BY CVTWD AND CVTDW. IT IS ASSUMED THAT FMT.WM BIT IS ON.
;
;	THE LOCATIONS ALTERED ARE:

	RELOC
BTSIZE:	BLOCK	1	; SIZE OF BYTE (1,3,6,7)
BTLENG:	BLOCK	1	; LENGTH OF ASSOCIATED STRING
BTPTR:	BLOCK	1	; POINTS TO BYTE POSITION IN T2
BTBASE:	BLOCK	1	; LOWEST ASCII SYMBOL
BTMAX:	BLOCK	1	; UPPER BOUND ON BYTE
BTLJFL:	BLOCK	1	; LEFT-JUSTIFY FLAG
	RELOC

; CALLING SEQUENCE:
;
;	LOAD Z WITH A FORMAT
;	JSP	QLINK,WMPROP
;	RETURN - Z IS UNCHANGED

WMPROP:	CLEARM	BTLJFL		; LEFT-JUSTIFY IS OFF
	TLNE	Z,FMT.LJ	; UNLESS BIT IS SET
	SETOM	BTLJFL		; IN WHICH CASE WE SET IT ON
	 ;
	HLRZ	Q2,Z		; COPY FORMAT INTO Q2 RIGHT
	ANDI	Q2,7		; LOW ORDER 3 BITS
	MOVE	Q3,BTTBL(Q2)	; GET BASE-SIZE WORD ...
	 ;			; FROM TABLE (SEE CVTFMT)
	HRRZM	Q3,BTSIZE	; ESTABLISH SIZE OF BYTE
	HLRZM	Q3,BTBASE	; BASE (LOWEST POSSIBLE CHAR)
	 ;
	MOVEI	Q2,1		; COMPUTE ...
	LSH	Q2,0(Q3)	; 2 ** BTSIZE
	MOVEM	Q2,BTMAX	; = MAXIMUM BYTE VALUE
	 ;
	LSH	Q3,^D24		; MOVE SIZE INTO BITS 6-11
	IOR	Q3,[POINT 0-0,T2] ; COMPLETE THE POINTER
	MOVEM	Q3,BTPTR	; (THE WORD IS EXPECTED IN T2)
	 ;
	MOVEI	Q2,^D36		; COMPUTE LENGTH
	IDIV	Q2,BTSIZE	; OF STRING
	MOVEM	Q2,BTLENG	; CORRESPONDING TO WORD.
	 ;
	JRST	0(QLINK)	; RETURN

END	INIT
