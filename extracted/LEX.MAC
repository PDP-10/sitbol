	LIST	; FORCE USER TO SEE WHO WE ARE.
	COMMENT .













			* * *   S I T B O L   * * *

				VERSION   3





	COPYRIGHT STEVENS INSTITUTE OF TECHNOLOGY   1972, 1973

	ALL RIGHT RESERVED.



















;-----------------------;

	IF2 ,<PRINTX SITBOL VERSION 3 - MODULE EDIT NUMBER = 1>

;-----------------------;



 TITLE LEX	 LEXICAL ANALYZER
	EXDATA
	TWOSEG
	RELOC 400000
	RELOC 0
LASLOT: BLOCK 1
NXTUBE: BLOCK 1
STATE: BLOCK 1
LINES: BLOCK 1
	RELOC
;
S.TAB:	XWD	11,1
;
	EXTERN	SY.ID,SY.CON,SY.FUN,SY.ARY,SY.UNY,SY.BIN
	EXTERN	SY$COM,SY$LP,SY$RP,SY$COL,SY$LB,SY$RB
UBLOK==UTBLOK
X.MNS: Y.MNS
 INTERN UBENTR
 EXTERN CVTNUM,GCOLG,STR.,X.ALNU,X.COL,X.Q,X.QQ
 EXTERN CONCAT,INSTAL,END,STR.C,X.OP,X.ALPH
 EXTERN X.CM,X.SEMI,X.RB,X.LB,X.ID,STRMC,X.LP,X.RP
;
UBSIZE= ^D22
;
;
X.CMNT:	Y.STAR ! Y.VB ! Y.SEMI	; COMMENT CARD CHAR
X.CTIN:	Y.PER!Y.PLUS	; CONTINUE CARD CHAR
Y.BLAH==Y.BL!Y.TAB	; SYNTACTIC EQUIVALENT OF BLANK
X.BLAH: Y.BLAH
X.BLAS:	Y.BL!Y.TAB!Y.SEMI!Y.CR
X.NSC:	Y.PLUS!Y.MNS!Y.NUM!Y.UPS!Y.LOWS!Y.PER	; NUMERIC CHAR SET
X.QL:	Y.Q!Y.QQ	; QUOTED LITERAL
Y.RSPC==Y.RB!Y.RP	; RIGHT SPECIAL CHARS
X.RSPC: Y.RSPC
X.OSPC:	Y.LB!Y.LP!Y.COL	; OTHER SPECIAL CHARS
X.IDLM:	Y.BL!Y.TAB!Y.RB!Y.RP!Y.CM	; IDENTIFIER DELIMITOR
X.DIL4:	Y.RP!Y.RB!Y.COL!Y.CM!Y.SEMI!Y.CR ; STATE 4 DELIMITORS
X.OPND:	Y.OP!Y.UPS!Y.LOWS!Y.LP!Y.Q!Y.QQ!Y.PLUS!Y.MNS!Y.NUM	; OPERAND FOR UNARY OPERATOR
X.F.A:	Y.LB!Y.LP	; IDENTIFIER SUFFIX FOR ARRAY OF FUNCTION
;
;
;
N.FLG==1	; SEQUENCE #'ED FLAG
F.FLG==2	; FORM FEED FLAG

;	TKINIT & EXINIT --- TOKEN INITIALIZATION ROUTINES
;	-------------------------------------------------
;
;
;	TOKEN INITIALIZATION FOR EXPRESSIONS
;
EXINIT::MOVEI	Z,ST2	; IGNORE LABEL SEARCH
	CLEARM	GTFLAG		; NON GOTO SYNTAX
	SKIPA			; MERGE WITH TKINIT

;	TOKEN INITIALIZATION FOR PROGRAMS
;
TKINIT::	MOVEI	Z,ST1	; INITIALIZE STATE
	MOVEM	Z,STATE		; STATE=ST1
	SKIPE	PREX		; IN PREX STAGE?
	JRST	INPREX		; JUMP IF YES
	JSP	TLINK,STINIT##	; SET UP FOR STREAMING
	JRST	0(SLINK)	; ERROR RETURN
	JRST	1(SLINK)	; SUCCESS RETURN
;
INPREX:	SETZM	LINES		; INITIALIZE LINE COUNTER
	JSP 	TLINK,GETREC	; FETCH A RECORD
	JRST	0(SLINK)	; ERROR RETURN
	JRST	1(SLINK)	; SUCCESS RETURN

;
;	GETREC --- INTERNAL ROUTINE TO FETCH AN INPUT RECORD
;	----------------------------------------------------
;
;
;
GETREC:	MOVE	S2,TLINK	; SAVE RETURN ADR IN S2
READ1:
	MOVE	T2,NLPGNO##	; SET ...
	MOVEM	T2,PAGENO##	; PAGE NUMBER
	MOVE	T2,COMPIN	; SET UP FOR READ
	MOVE 	T3,COMPIN+1
	JSP	TLINK,READ##	; READ 1 SOURCE RECORD
	ERROR	12,4		; BAD READ
	JRST	0(S2)		; END OF FILE
	 ;
	TRNE	Z,F.FLG		; FORM FEED?
	AOS	NLPGNO		; YES, INCREMENT NEXT PG. NO.
	 ;
	TRNN	Z,N.FLG		; SEQUENCE NUMBERING?
	JRST	LREAD1		; NO
	 ;
	MOVEI	S3,1		; ONE ARG FOR CONCAT
	 ;
	HRRZ	T1,0(STACK)	; LOAD LENGTH OF STRING
	SUBI	T1,6		; SUBTRACT OFF # OF PERIFS.
	 ;
	SKIPE	AUTOHS##	; HISTOGRAMMING?
	JRST	IGREAD		; YES, JUMP
	 ;
	JUMPLE	T1,COMENT	; IF NULL , TREAT AS COMMENT
	 ;
	PUSH	STACK,-1(STACK)	; PUSH REDUCED STRING ...
	HRLI	T1,6		; ONTO ...
	PUSH	STACK,T1	; STACK
	 ;
	PUSH	STACK,-1(STACK)	; CONVERT
	PUSH	STACK,[5]	; THE FIRST
	JSP	TLINK,CVTINT##	; 5
	SKIPA	T1,CMPNO	; CHARACTERS TO
	MOVE	T1,0(STACK)	; INTEGER (IF POSSIBLE)
	SUB	STACK,[2,,2]	; USE COMPNO IF NOT
	MOVEM	T1,CMPNO	; MAKE NEW CMPNO
	 ;
	JRST	LREAD2		; JOIN PROCESSING

	 ; HERE IF WE ARE TO IGNORE AN EXISTING SEQ. NUMBER
	 ;
IGREAD:	JUMPG	T1,IGRD1	; INSURE A NON-NULL STRING
	SUB	STACK,[2,,2]	; NULL STRING, PRUNE STACK...
	PUSH	STACK,NULLST	; AND PUSH ON A...
	PUSH	STACK,NULLST+1	; NULL STRING
	JRST	COMENT		; TREAT THIS AS A COMMENT
	 ;
IGRD1:	HRLI	T1,6		; DIMINISH LENGTH OF NON-NULL STRING
	MOVEM	T1,0(STACK)	; BY 6
	 ;
	 ; HERE IF LINE IS NOT SEQUENCED NUMBERED
	 ;
LREAD1:	MOVEI	S3,2		; TWO STRINGS TO BE CONCATED
	PUSH	STACK,$ALPHA	; TAB IS ...
	PUSH	STACK,S.TAB	; THE OTHER STRING
	 ;
	PUSH	STACK,-3(STACK)	; REPEAT ...
	PUSH	STACK,-3(STACK)	; SUBJECT
	 ;
	 ; MERGE HERE FROM SEQUENCE #'ED FILES
	 ;
LREAD2:	JSP	TLINK,STINIT	; SET UP FOR STREAMING
	AOJA	S3,COMENT	; TREAT NULL STRING AS A COMMENT
	 ;
	 ; NOW CHECK THE FIRST CHARACTER
	 ;
	MOVE	Q3,SUBJ		; FETCH 1ST CHAR BASED ON Q3
	LDB	Q2,STPTR	; INTO Q2
	MOVE	T2,SYSCTB(Q2)	; CHAR SET FOR CHAR TO T2
	TDNE	T2,X.CMNT	; COMMENT CARD
	JRST	COMENT		; JUMP IF YES
	TDNE	T2,X.MNS	; CONTROL CARD
	JRST	CONTRL		; JUMP TO PROCESS CONTROL CARD
	TDNE	T2,X.CTIN	; CONTINUE CARD?
	JRST	NONUMB		; SKIP STMT NUMBER IF SO
	 ;
	CAIE	S3,2		; ALSO IF ALREADY SEQUENCED ...
	JRST	NONUMB		; WE SHOULD ALSO SKIP
	 ;
	MOVEI	S3,3		; FOR CONCAT LATER
	PUSH	STACK,[XWD IDT,0]	; FOR CONVERSION
	PUSH	STACK,CMPNO	; STMT NUMBER
	JSP	TLINK,CVTSTR##	; STMT NO. TO STRING
	ERROR	15
NONUMB:	JSP	TLINK,PRINT	; TO PRINT OUT LISTING
	JRST	0(S2)		; ERROR RETURN
	JRST	1(S2)		; SUCCESS - RETURN TO CLIENT
;
;
CONTRL:		; CODE TO PROCESS CONTROL CARDS
;
;
;
;
;
;
;
COMENT:	JSP	TLINK,PRINT	; OUTPUT TO LISTING FILE
	JRST	0(S2)		; ERROR RETURN
	JRST	READ1		; GET ANOTHER RECORD

;
;	PRINT --- ROUTINE TO SEND DATA TO LISTING FILE
;	-----------------------------------------------
;
;
;
PRINT:	MOVE	Z,S3		; NO. OF STRINGS TO CONCATENATE
	MOVE	S3,TLINK	; SAVE RETURN ADR
	CAIN	Z,1		; ONLY ONE ARG?
	JRST	PRINT1		; YES, AVOID CONCAT
	JSP	TLINK,CONCAT	; CONCATENATE FOR OUTPUT
	ERROR	15		; ERROR--RETURN
	 ;
PRINT1:	MOVE 	T2,LISTF	; DENOTES LISTING FILE
	MOVE	T3,LISTF+1
	 ;
	POP	STACK,LSUBJ+1	; SAVE THE LAST STRING ...
	POP	STACK,LSUBJ##	; PRINTED FOR
	ADD	STACK,[2,,2]	; DIAGNOSTIC PURPOSES
	 ;
	JSP	TLINK,WRITE##	; OUTPUT TO LISTING FILE
	ERROR	12,26		; ERROR DETECTED
	 ;
	 ; TEST FOR PAGE EJECT
	 ;
PRINT2:	AOS	Q2,LINES	; INCREMENT LINE COUNTER
	CAML	Q2,NLINES	; TIME FOR PAL EJECT?
	JRST	PRINTE		; YES
	 ;
	MOVE	Q2,PAGENO	; SEE IF A FORM-FEED
	CAMN	Q2,NLPGNO	; WAS ENCOUNTERED
	JRST	1(S3)		; NO - JUST RETURN
	 ;
PRINTE:	MOVE 	T2,LISTF	; INDICATE LISTING FILE
	MOVE 	T3,LISTF+1	; 2ND OF LIST FILE
	JSP	TLINK,PEJECT##	; EJECT PAGE
	JRST	0(S3)		; ERROR DETECTED BY PEJECT
	SETZM	LINES		; RESET LINE COUNTER
	JRST	1(S3)		; RETURN

;	TOKEN --- ROUTINE TO BREAK OUT 1 TOKEN
;	--------------------------------------
;
;
TOKEN::	JRST	@STATE		; JUMP TO APPROPRIATE STATE
;
;	STATE 1 ---- LOOK FOR A LABEL
;	-----------------------------

	RELOC
GTFLAG:	BLOCK 1		; GO TO FLAG:
	RELOC
ST1:	CLEARM	GTFLAG		; STATE 1 - CHECK FOR A LABEL.
				; NEXT STATE IS 2.
;
	MOVEI	Z,ST2		; SET UP NEXT STATE (2)
	MOVEM	Z,STATE
	MOVE	S2,SYSCT	; SET UP TO STREAM FOR BLANKS
	MOVE	S3,X.BLAS	; CHAR SET FOR BLANKS
	JSP	TLINK,STRM##	; STREAM
	JFCL	Z,		; FASTEST NO-OP
	JSP	TLINK,INSTAL	; INSTAL ANY LABEL IF ANY
	JRST	NOLABL		; FAILURE MEANS NO LABEL
	MOVE	Q2,Z		; SAVE POINTER
	HRLI	Z,SY.ID		; FOR RETURN
	MOVS	Q3,VLABEL(Q2)	; VLABEL=END?
	CAIE	Q3,END		; COMPARE
	JRST	2(SLINK)	; LABEL FOUND--NOT END
	MOVE	S3,X.ALNU	; BREAK ON ALPHANUMERIC
	JSP	TLINK,STR.	; STREAM
	JRST	ENOLAB		; END WITH NO STARTING LABEL
	MOVE	S3,X.BLAH
	JSP	TLINK,STRM	; STREAM FOR BLANK
	JFCL	Z,		; FASTEST NO-OP
	JSP	TLINK,INSTAL	; INSTALL START LABEL
				;
ENOLAB:	CLEAR	Z,		; TO INDICATE NO STARTING LABEL
	JRST	1(SLINK)	; EOS RETURN
NOLABL:	CLEAR	Z,		; NULL LABEL RETURN
	JRST	2(SLINK)	; RETURN TO CLIENT

;
;	STATE 2 --- REQUIRES NON-EXISTANCE OF A BINARY OPERATOR
;	-------------------------------------------------------
;
;
ST2:
	MOVE	S2,SYSCT	; SET UP TO SPAN BLANKS
	MOVE	S3,X.BLAH	; CHAR SET FOR BLANKS
	JSP	TLINK,STR.C	; LAST CHAR IN Q2 ON RETURN.
	JRST	EOR		; RUNOUT MEANS END OF RECORD
	MOVE	Q3,SYSCTB(Q2)	; CHAR SET MASK TO Q3
	;
ST2.1:	TDNE	Q3,X.OP		; CHECK FOR OPERATOR
	JRST	LEX.UO		; OFF TO PROCESS UNARY OPERATOR
	TDNE	Q3,X.ALPH	; CHECK FOR A LETTER
	JRST	LEX.ID		; PROCESS IDENTIFIER,ARY,FUN
	TDNE	Q3,X.NSC	; CHECK FOR NUMERIC
	JRST	LEX.NM		; PROCESS NUMERIC CONSTANT
	TDNE	Q3,X.QL		; Q2 CONTAINS QUOTE TYPE
	JRST	LEX.QL		; IF A QUOTED LITERAL
	TDNE	Q3,X.CM		; CHECK FOR A COMMA
	JRST	LEX.CM		; GO PROCESS COMMA
	TDNE	Q3,X.RSPC	; CHECK FOR RIGHT DELIMITOR
	JRST 	LEX.SR		; WILL CHECK FOR STEREOTYPES
	TDNE	Q3,X.OSPC	; CHECK FOR OTHER SPEC CHARS
	JRST	LEX.SL		; PROCESS SPECIAL LEFT CHAR
	TDNE	Q3,X.SEMI	; CHECK FOR STMT END
	JRST	EOS		; END OF STMT
	TDNE	Q3,[Y.CR]	; CHECK FOR <CR>
	JRST	EOS2		; END OF STMT
	JRST	ERR.S		; ILLEGAL CHAR DETECTED
;
;
LEX.UO:				; PROCESS A UNARY OPERATOR
	MOVE	Q3,SUBJ		; BASE STPTR
	ILDB	T2,STPTR	; UPDATE STPTR (& GET CHAR) ...
	SOSG	CURSOR		; AND CURSOR
	JRST	ERR.S		; INVALID CHAR AFTER UNARY OP
	MOVE	T2,SYSCTB(T2)	; GET CS MASK
	TDNN	T2,X.OPND	; SEE IF VALID CHAR FOLLOWS U-OP
	JRST	ERR.S		; YES, INVALID
	PUSH	STACK,$ALPHA	; DESCRIPTOR TOP FOR &ALPHABET
	MOVS	T3,Q2		; CHAR TO T3 LEFT
	ADDI	T3,1		; LENGTH=1
	PUSH	STACK,T3	; DESCRIPTOR BOTTOM
	JSP	TLINK,INSTAL
	ERROR	15		; SYSTEM ERROR IN INSTALL
	HRLI	Z,SY.UNY	; RETURN SY.UNY,(PTR)
	JRST	2(SLINK)	; RETURN TO CLIENT
;
;
;
ISYSER:	MOVEI	Z,CE.SYS	; SYSTEM ERROR
	JRST	ERR

;
LEX.SR:	TDNE	Q3,X.RB		; WAS IT RIGHT BRACKET?
	MOVEI	Q2,SY$RB	; YES
	TDNE	Q3,X.RP		; WAS IT RIGHT PAREN?
	MOVEI	Q2,SY$RP	; YES
;
LEX.S3:	MOVEI	Z,ST3		; STATE=ST3
	JRST	SPCHAR
;
LEX.CM:	MOVEI	Q2,SY$COM	; COMMA PROCESSING IN SYN

LEX.S4:	MOVEI	Z,ST4		; STATE=ST4
;
SPCHAR:	MOVEM	Z,STATE		; SPEC CHAR PROCESSING
;
LEX.SP:	IBP	STPTR		; UPDATE STPTR ...
	SOS	CURSOR		; AND CURSOR
	HRLZ	Z,Q2		; MOVE PROCESSING ADDRESS ...
	JRST	2(SLINK)	; INTO Z-LEFT AND RETURN
;
LEX.SL:	TDNE	Q3,[Y.COL]	; TEST FOR COLON
	JRST	LEX.CL		; YES, IT IS COLON
	 ;
	TDNE	Q3,X.LB		; WAS IT LEFT BRACKET?
	MOVEI	Q2,SY$LB	; YES
	TDNE	Q3,X.LP		; WAS IT LEFT PAREN?
	MOVEI	Q2,SY$LP	; YES
	MOVEI	Q1,ST4		; NEXT STATE IS
	MOVEM	Q1,STATE	; IS STATE 4
	JRST	LEX.SP		; JOIN COMMON PROCESSING
LEX.CL:	MOVEI	Q2,SY$COL	; YES
	SETOM	GTFLAG		; FREE UP SUBSEQUENT SYNTAX
	JRST	LEX.SP
;
LEX.ID:	MOVE	S2,SYSCT	; IDENTIFIER PROCESSING
	MOVE	S3,X.ID		;CHAR SET
	JSP	TLINK,STRMC	; BREAK OUT IDENTIFIER
	JFCL	Z,		; INSTALL ID EVEN ON RUNOUT
	MOVE	S2,SYSCTB(Q2)	; SAVE CHAR SET MASK
	JSP 	TLINK,INSTAL	; INSTAL
	ERROR	15		; SYSTEM ERROR IF INSTAL FAILS
	TDNE	S2,X.F.A	; SKIP IF IDENT.
	JRST	F.OR.A		;	JUMP IF FUN OR ARY
REGID:	HRLI	Z,SY.ID		; RETURN SY.ID,(PTR)
	MOVEI	Q2,ST3		; STATE=ST3
	MOVEM	Q2,STATE
	JRST	2(SLINK)	; RETURN TO CLIENT
;
F.OR.A:	HRLI	Z,SY.FUN	; PREPARE FOR SY.FUN
	TDNE	S2,X.LP		; CHECK IF FUNCTION TYPE
	JRST	AF.RET		; JUMP IF SO
	TDNN	S2,X.LB		; CHECK FOR ARRAY TYPE
	ERROR	15		; ERROR IF NEITHER
	HRLI	Z,SY.ARY	; PREPARE FOR SY.ARY RETURN
	;
AF.RET:	MOVEI	S3,ST4		; STATE=ST4
	MOVEM	S3,STATE
	IBP	STPTR		; UPDATE CURSOR & STPTR
	SOS	CURSOR
	JRST	2(SLINK)
;
;
ERR.S:	MOVEI	Z,CE.IC		; ILLEGAL CHAR ERROR
	JRST	ERR

;
LEX.QL:	IBP	STPTR		; QUOTED LITERAL PROCESSING
	SOS	CURSOR		; UPDATE CURSOR & STPTR
	MOVE	S2,SYSCT	; SET UP FOR STRM
	MOVE	S3,X.Q		; SPECIFY CHAR SET FOR SINGLE QUOTE
	CAIN	Q2,42		; IF LITERAL BEGAN WITH DOUBLE QUOTE
	MOVE	S3,X.QQ		; THEN SPECIFY ITS CHAR SET
	JSP	TLINK,STRM	; SPAN QUOTED LITERAL
	JRST	UNBAL		; UNBALANCED QUOTE FOUND
	IBP	STPTR		; BUMP CURSOR & STPTR
	SOS	CURSOR
	JSP	TLINK,STCON##	; ENTER INTO CONSTANT AREA
UBSTOR:	JSP	TLINK,UBENTR	; CREATE UBLOK ENTRY
	JFCL	Z,		; NO-OP
	HRLI	Z,SY.CON	; RETURN SY.CON,(PTR)
	MOVEI	Q2,ST3		; STATE=ST3
	MOVEM	Q2,STATE
	JRST	2(SLINK)	; RETURN TO CLIENT
UNBAL:	MOVEI	Z,CE.QT		; UNMATCHED QUOTE ERROR
	SUB	STACK,[2,,2]	; POP ARG FROM STACK
	JRST	ERR
;
LEX.NM:	MOVE	S2,SYSCT	; SET UP TO SPAN NUMERIC TYPE
	MOVE	S3,X.NSC	
	JSP	TLINK,STRMC	; STREAM
	JFCL	Z,		; NO ERROR FOR RUNOUT
	JSP	TLINK,CVTNUM	; CONVERT TO NUMERIC
	JRST	BADNUM		; ILLEGAL NUMERIC ERROR
	JRST	UBSTOR		; STORE VALUE IN UBLOK
BADNUM:	SUB	STACK,[XWD 2,2]	; POP STACK
	MOVEI	Z,CE.NI		; ERROR IN NUMERIC ITEM
	JRST	ERR

;
;	STATE 3 --- THIS STATE IS USED TO DETECT ANY BINARY OPERATORS
;	-------------------------------------------------------------
;
;
;
ST3:	MOVE	T4,CURSOR	; SAVE CURSOR VALUE
	MOVEM	T4,IGNOS	; IN TEMP LOCATION
ST3.1:	MOVE	S2,SYSCT	; PREPARE TO SPAN BLANKS
	MOVE	S3,X.BLAH	; CHAR SET FOR BLANKS
	JSP	TLINK,STR.C	; SPAN BLANKS
	JRST	EOR		; END OF RECORD DETECTED
	MOVE	Q3,SYSCTB(Q2)	; CS MASK OF CHAR IN Q2
	TDNE	Q3,X.RSPC	; CHECK FOR RIGHT SPECIAL CHAR
	JRST	LEX.SR		; JUMP IF YES
	MOVEI	T2,ST4		; STATE=ST4
	MOVEM	T2,STATE
	TDNE	Q3,X.OP		; CHECK FOR BINARY OPERATOR
	JRST	ST3.BO		; JUMP IF OPERATOR
	TDNE	Q3,X.CM		; CHECK FOR COMMA
	JRST	LEX.CM		; JUMP IF COMMA
	TDNE	Q3,X.SEMI	; CHECK FOR SEMI-COLON
	JRST	EOS		; END OF RECORD
	TDNE	Q3,[Y.CR]	; <CR>?
	JRST	EOS2		; YES
	TDNE	Q3,[Y.LB]	; LEFT BRACKET?
	JRST	LEX.SL		; YES
	MOVEI	T2,ST2		; STATE=ST2
	MOVEM	T2,STATE
	TDNE	Q3,X.COL	; CHECK FOR COLON
	JRST	LEX.CL		; JUMP IF COLON
	MOVE	T4,IGNOS	; FETCH PREVIOUS CURSOR VALUE
	CAME	T4,CURSOR	; DID CURSOR MOVE?
	JRST	LEX.IC		; IMPLICIT CONCATENATION DETECTED
	SKIPE	GTFLAG		; GOTO ZONE?
	JRST	ST2		; YES, ALLOW THIS
	 ;
	MOVEI	Z,CE.IC##	; ERROR - ILLEGAL CHARACTER
	JRST	ERR		; GO PROCESS ERROR

	 ; HERE IF BINARY OP WAS DETECTED
	 ;
ST3.BO:	MOVE	T4,IGNOS	; LOAD FORMER CURSOR
	CAME	T4,CURSOR	; SAME AS PRESENT VALUE?
	JRST	LEX.BO		; NO, OFF TO PROCESS BO
	 ;
	MOVEI	Z,CE.MB##	; MISSING BLANK
	JRST	ERR		; ERROR

;
;	STATE 4 --- THIS STATE IS USED TO DETECT IMPLICIT NULL STRINGS
;	--------------------------------------------------------------
;
;
;
ST4:	MOVE	S2,SYSCT	; PREPARE TO SPAN BLANKS
	MOVE	S3,X.BLAH	; CS FOR BLANKS
	JSP	TLINK,STR.C	; SPAN BLANKS
	JRST	EOR4		; END OF RECORD DETECTED
	MOVEI	T2,ST2		; STATE=ST2
	MOVEM	T2,STATE
	MOVE	Q3,SYSCTB(Q2)	; CHAR SET MASK TO Q3
	TDNN	Q3,X.DIL4	; CHECK FOR STATE 4 DELIMITORS
	JRST	ST2.1		; JUMP IF NONE OF THESE
IMPNUL:	MOVE	Z,[XWD SY.CON,NULLST]	; IMPLICIT NULL
	JRST	2(SLINK)	; RETURN TO CLIENT

	 ; HERE IF NO CHARACTERS ARE LEFT
	 ;
EOR4:	SKIPE	PREX		; RUNTIME?
	JRST	EOR1		; NO - COMPILE TIME
	 ;
	MOVEI	T2,EOR		; INSERT ...
	MOVEM	T2,STATE	; NEXT STATE
	JRST	IMPNUL		; AND RETURN NULL

;
LEX.BO:	MOVE	Z,CURSOR	; SAVE CURSOR
	MOVEM	Z,IGNOS	
	MOVE	Z,STPTR
	MOVEM	Z,IGNOS+1
	MOVE	S2,SYSCT	; PREPARE TO SPAN OPERATORS
	MOVE	S3,X.OP		; CHAR SET FOR OPERATORS
	JSP	TLINK,STRMC	; SPAN OPERATORS
	JRST	INBOP		; BIN OP AT END OF RECORD
	MOVE	Q3,SYSCTB(Q2)	; CHAR SET MASK
	TDNN	Q3,[Y.BLAH!Y.RSPC] ; IS IT A BINARY OP. ?
	JRST	NOTBO		; JUMP IF NOT
INBOP:	JSP	TLINK,INSTAL	; INSTALL BINARY OPERATOR
	ERROR 	15		; ERROR IN INSTAL
	MOVE	T4,Z		; POINTER TO T4
	SKIPL	T3,VKEY(T4)	; OPFLAG SET?
	JRST	INSERT		; NO GO INSERT DEFAULT PRECEDENCES
BINARY:	HRLI	Z,SY.BIN	; RETURN BINTYP,PTR
	JRST	2(SLINK)	; RETURN TO CLIENT
;
INSERT:	HRLZI	T3,OPFLAG	; SET OPFLAG
	IORM	T3,VKEY(T4)
	HRLZI	T3,LDPREC	; INSERT LEFT DEFAULT PRECEDENCE
	HLLM	T3,LPREC(T4)
	HRLZI	T3,RDPREC	; INSERT RIGHT DEFAULT PRECEDENCE
	HLLM	T3,RPREC(T4)
	JRST	BINARY	
;
;
NOTBO:	SUB	STACK,[XWD 2,2]	; BINARY OPER IS CONCATENATION
	MOVE	Z,IGNOS		; RESTORE CURSOR
	MOVEM	Z,CURSOR
	MOVE	Z,IGNOS+1
	MOVEM	Z,STPTR

;
LEX.IC:	PUSH	STACK,$ALPHA	; DESCRIPTOR TOP FOR & ALPHABET
	PUSH	STACK,[XWD " ",1]	; BLANK
	MOVEI	Z,ST2		; STATE=ST2
	MOVEM	Z,STATE
	JSP	TLINK,INSTAL	; INSTALL BLANK
	ERROR	15		; ERROR IN INSTALL
	JRST	BINARY		; JUMP TO RETURN BINTYP,PTR
;
;
EOR:		; ENTRY POINT UPON REACHING END OF RECORD
	SKIPE	PREX		; TEST FOR PRE-EXECUTION
	JRST	EOR1		; YES - JUMP
	MOVEI	S2,ENOLAB	; NEXT STATE BEGINS AT ...
	MOVEM	S2,STATE	; ENOLAB
	JRST	1(SLINK)	; TAKE EOS RETURN
	 ;
EOR1:	JSP	TLINK,GETREC	; FETCH A NEW RECORD
	JRST	MISEND		; NO END CARD
	MOVE	Q3,SUBJ		; FETCH 1ST CHAR BASED ON Q3...
	LDB	Q2,STPTR	; INTO Q2
	MOVE	T2,SYSCTB(Q2)	; CHAR SET MASK
	TDNE	T2,X.CTIN	; CONTINUE CARD?
	JRST	REZUM		; JUMP IF YES
	MOVE	T4,STATE	; STATE=ST4
	CAIE	T4,ST4		;IS STATE ST4?
	JRST	ST5		; JUMP IF NOT
	MOVEI	T4,ST5
	MOVEM	T4,STATE	; SET STATE=ST5
	JRST	IMPNUL		; IMPLICIT NULL

	 ; HERE FOR <CR> <LF>
	 ;
EOS2:	IBP	STPTR		; INCREMENT PAST
	SOS	CURSOR		; THE CARRIAGE RETURN
	 ;
	 ; HERE FOR SEMICOLON
	 ;
EOS:	IBP	STPTR		; BUMP CURSOR AND ...
	SOSG	CURSOR		; SKIP IF NOT AT END
	JRST	EOR		; END OF STRING - JUST LIKE PL/I
;
ST5:	MOVEI	T4,ST1		; STATE=ST1
	MOVEM	T4,STATE
	JRST	1(SLINK)	; END OF STMT RETURN TO CLIENT
;
REZUM:	IBP	STPTR		; UPDATE STPTR & CURSOR
	SOS	CURSOR	
	MOVE	Q3,STATE	; IS STATE=ST3
	CAIE	Q3,ST3
	JRST	TOKEN		; GO FETCH THE NEXT TOKEN
	MOVEI	Q3,7777		; LARGE VALUE FOR COMPARISON WITH CURSOR
	MOVEM	Q3,IGNOS	; SAVE VALUE
	JRST	ST3.1		; PROCEED TO FETCH A TOKEN
ERR:		; ENTER WITH NUMBER IN ACC 0
	MOVEI	S2,NEXT1	; SET STATE TO ...
	MOVEM	S2,STATE	; NEXT1
	JRST	0(SLINK)	; AND GIVE THE ERROR RETURN

NEXT1:	JSP	TLINK,GETREC	; READ 1 SOURCE RECORD
	ERROR	12,4		; INCORRECTIBLE READ ERROR
	MOVE	Q3,SUBJ		; FETCH 1ST CHAR BASED ON Q3 ...
	LDB	Q2,STPTR	; INTO Q2
	MOVE	T2,SYSCTB(Q2)	; CHAR SET MASK
	TDNE	T2,X.CTIN	; CONTINUE CARD
	JRST	NEXT1		; FETCH ANOTHER RECORD IF YES
	JRST	ST1		; GO GIVE LABEL

	 ; HERE IF NO MORE SOURCE COULD BE FOUND
	 ;
MISEND:	MOVEI	T4,MISEN1	; SET UP LOCATION...
	MOVEM	T4,STATE	; FOR NEXT TIME
	JRST	1(SLINK)	; JUST INDICATE END OF STATE.
	
MISEN1:	MOVEI	Z,CE.ME		; ERROR MESSAGE
	MOVEM	SLINK,STATE	; SAVE LINK
	JSP	SLINK,CERROR##	; GIVE MESSAGE
	MOVE	SLINK,STATE	; RESTORE STATE
	CLEAR	Z,		; NO END LABEL
	JRST	1(SLINK)	; END OF PROGRAM

;
;	UBENTR --- ROUTINE TO INSERT 1 ENTRY INTO A UBLOK
;	-------------------------------------------------
;
;
;
UBENTR:	MOVE	Q2,NXTUBE	; GET POINTER TO NEXT UBLOK SLOT
	CAML	Q2,LASLOT	; IS THERE ROOM IN THE CURRENT UBLOK?
	JRST	GETSOM		; NO, ALLOCATE A NEW UBLO
ENTRY:	POP	STACK,1(Q2)	; CREATE THE UBLOK ENTRY
	POP	STACK,0(Q2)
	MOVE	Z,Q2		; UBLOK ENTRY POINTER INTO ACC 0
	ADDI	Q2,2		; UPDATE UBLOK POINTER
	MOVEM	Q2,NXTUBE	; SAVE VALUE
	JRST	0(TLINK)	; RETURN
GETSOM:	MOVEI	Z,UBSIZE	; ARGUMENT TO GCOLG
	JSP	QLINK,GCOLG	; CALL GARBAGE COLLECTOR
	MOVE	Q3,GSURF	; GET POINTER TO AVAILABLE CORE
	MOVEI	Q2,1(Q3)
	HRL	Q2,Q3		; SET UP FOR BLT COMMAND
	SETZM	0(Q3)		; ZERO 1ST WORD
	BLT	Q2,UBSIZE-1(Q3)	; ZERO A BLOCK OF WORDS
	MOVE	Z,[XWD UBLOK,UBSIZE]	; BLOK HEADER WORD
	MOVEM	Z,@Q3		; INSERT HEADER
	MOVEI	Z,UBSIZE(Q3)	; SET UP END-OF-BLOK POINTER
	MOVEM	Z,GSURF
	MOVEM	Z,LASLOT	; SAVE IN MEMORY
	MOVEI	Q2,2(Q3)	; SET UP POINTER FOR INITIAL ENTRY
	MOVEM	Q2,NXTUBE
	MOVEM	Z,GSURF
	JRST	ENTRY		; PROCEED TO MAKE ENTRY
;
	END
